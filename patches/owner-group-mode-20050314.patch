=== subversion/include/svn_io.h
==================================================================
--- subversion/include/svn_io.h  (revision 94)
+++ subversion/include/svn_io.h  (local)
@@ -28,6 +28,7 @@
 #include <apr.h>
 #include <apr_pools.h>
 #include <apr_file_io.h>
+#include <apr_user.h>
 #include <apr_thread_proc.h>
 
 #include "svn_types.h"
@@ -874,6 +875,36 @@
 svn_error_t *
 svn_io_write_version_file (const char *path, int version, apr_pool_t *pool);
 
+/** Return a string for the userid in @a owner in the format "uid name".
+ * Use @a pool for all allocations.
+ */
+svn_string_t *
+svn_io_file_owner_string (apr_uid_t owner,
+                              apr_pool_t *pool);
+
+/** Return a string for the @a group in the format "uid name".
+ * Use @a pool for all allocations.
+ */
+svn_string_t *
+svn_io_file_group_string (apr_gid_t group,
+                              apr_pool_t *pool);
+
+/** Return a string for the @a mode in octal, ie. unix-like.
+ * Use @a pool for all allocations.
+ */
+svn_string_t *
+svn_io_file_mode_string(apr_fileperms_t mode,
+                        apr_pool_t *pool);
+
+/** Set the file's owner, group, and mode, if specified.
+ */
+svn_error_t *
+svn_io_file_set_file_owner_group_mode (const char *path,
+                                       const svn_string_t *owner,
+                                       const svn_string_t *group,
+                                       const svn_string_t *mode,
+                                       apr_pool_t *pool);
+
 /** @} */
 
 #ifdef __cplusplus
=== subversion/include/svn_props.h
==================================================================
--- subversion/include/svn_props.h  (revision 94)
+++ subversion/include/svn_props.h  (local)
@@ -188,6 +188,19 @@
 /** The value to force the special property to when set. */
 #define SVN_PROP_SPECIAL_VALUE "*"
 
+/** The files' last modification time */
+#define SVN_PROP_TEXT_TIME  SVN_PROP_PREFIX "text-time"
+
+/** The files' owner */
+#define SVN_PROP_OWNER SVN_PROP_PREFIX "owner"
+
+/** The files' group */
+#define SVN_PROP_GROUP  SVN_PROP_PREFIX "group"
+
+/** The files' unix-mode */
+#define SVN_PROP_UNIX_MODE  SVN_PROP_PREFIX "unix-mode"
+
+
 /** Describes external items to check out into this directory. 
  *
  * The format is a series of lines, such as:
=== subversion/libsvn_client/commit.c
==================================================================
--- subversion/libsvn_client/commit.c  (revision 94)
+++ subversion/libsvn_client/commit.c  (local)
@@ -207,8 +207,30 @@
         {
           const void *pname;
           void *pval;
+          apr_finfo_t finfo;
 
+          SVN_ERR( svn_io_stat(&finfo, path, APR_FINFO_NORM, pool) );
+
           apr_hash_this (hi, &pname, NULL, &pval);
+
+          /* if the svn:text-time property is set, use the current file
+           * date instead of the value */
+          if (strcmp (pname, SVN_PROP_TEXT_TIME) == 0)
+            pval=svn_string_create( 
+                                   svn_time_to_cstring (finfo.mtime, pool),
+                                   pool );
+
+          /* do the same for owner, group, and unix-mode */
+          if (strcmp (pname, SVN_PROP_OWNER) == 0)
+            pval=svn_io_file_owner_string(finfo.user, pool);
+
+          if (strcmp (pname, SVN_PROP_GROUP) == 0)
+            pval=svn_io_file_group_string(finfo.group, pool);
+
+          if (strcmp (pname, SVN_PROP_UNIX_MODE) == 0)
+            pval=svn_io_file_mode_string(finfo.protection, pool);
+
+
           SVN_ERR (editor->change_file_prop (file_baton, pname, pval, pool));
         }
     }
=== subversion/libsvn_client/commit_util.c
==================================================================
--- subversion/libsvn_client/commit_util.c  (revision 94)
+++ subversion/libsvn_client/commit_util.c  (local)
@@ -30,6 +30,8 @@
 #include "svn_pools.h"
 #include "svn_wc.h"
 #include "svn_props.h"
+#include "svn_string.h"
+#include "svn_time.h"
 
 #include <assert.h>
 #include <stdlib.h>  /* for qsort() */
@@ -418,7 +420,61 @@
 
   /* Set text/prop modification flags accordingly. */
   if (text_mod)
-    state_flags |= SVN_CLIENT_COMMIT_ITEM_TEXT_MODS;
+    {
+      apr_finfo_t finfo;
+
+
+      state_flags |= SVN_CLIENT_COMMIT_ITEM_TEXT_MODS;
+
+      SVN_ERR( svn_io_stat(&finfo, path, APR_FINFO_NORM, pool) );
+
+      SVN_ERR (svn_wc_prop_get (&propval, SVN_PROP_TEXT_TIME, path, adm_access,
+                                pool));
+      /* If the text has been modified AND the modification time
+       * should be recorded, there's an property modification too. */
+      if (propval)
+        {
+          propval=svn_string_create( 
+                                    svn_time_to_cstring (finfo.mtime, pool),
+                                    pool );
+          SVN_ERR (svn_wc_prop_set (SVN_PROP_TEXT_TIME, 
+                                    propval, path, adm_access, pool) );
+          state_flags |= SVN_CLIENT_COMMIT_ITEM_PROP_MODS;
+
+        }
+
+      /* Check for svn:owner, svn:group, and svn:unix-mode */
+      SVN_ERR (svn_wc_prop_get (&propval, SVN_PROP_OWNER, path, adm_access,
+                                pool));
+      if (propval)
+        {
+          propval=svn_io_file_owner_string(finfo.user, pool);
+          SVN_ERR (svn_wc_prop_set (SVN_PROP_OWNER, 
+                                    propval, path, adm_access, pool) );
+          state_flags |= SVN_CLIENT_COMMIT_ITEM_PROP_MODS;
+        }
+
+      SVN_ERR (svn_wc_prop_get (&propval, SVN_PROP_GROUP, path, adm_access,
+                                pool));
+      if (propval)
+        {
+          propval=svn_io_file_group_string(finfo.group, pool);
+          SVN_ERR (svn_wc_prop_set (SVN_PROP_GROUP, 
+                                    propval, path, adm_access, pool) );
+          state_flags |= SVN_CLIENT_COMMIT_ITEM_PROP_MODS;
+        }
+
+      SVN_ERR (svn_wc_prop_get (&propval, SVN_PROP_UNIX_MODE, path, adm_access,
+                                pool));
+      if (propval)
+        {
+          propval=svn_io_file_mode_string(finfo.protection, pool);
+          SVN_ERR (svn_wc_prop_set (SVN_PROP_UNIX_MODE, 
+                                    propval, path, adm_access, pool) );
+          state_flags |= SVN_CLIENT_COMMIT_ITEM_PROP_MODS;
+        }
+    }
+
   if (prop_mod)
     state_flags |= SVN_CLIENT_COMMIT_ITEM_PROP_MODS;
 
=== subversion/libsvn_client/export.c
==================================================================
--- subversion/libsvn_client/export.c  (revision 94)
+++ subversion/libsvn_client/export.c  (local)
@@ -103,7 +103,8 @@
   svn_subst_eol_style_t style;
   apr_hash_t *props;
   const char *base;
-  svn_string_t *eol_style, *keywords, *executable, *externals, *special;
+  svn_string_t *eol_style, *keywords, *executable, *externals,
+               *special, *text_time, *owner, *group, *mode;
   const char *eol = NULL;
   svn_boolean_t local_mod = FALSE;
   apr_time_t tm;
@@ -153,7 +154,15 @@
                             APR_HASH_KEY_STRING);
   special = apr_hash_get (props, SVN_PROP_SPECIAL,
                           APR_HASH_KEY_STRING);
-  
+  text_time = apr_hash_get (props, SVN_PROP_TEXT_TIME,
+                            APR_HASH_KEY_STRING);
+  owner = apr_hash_get (props, SVN_PROP_OWNER,
+                        APR_HASH_KEY_STRING);
+  group = apr_hash_get (props, SVN_PROP_GROUP,
+                        APR_HASH_KEY_STRING);
+  mode = apr_hash_get (props, SVN_PROP_UNIX_MODE,
+                       APR_HASH_KEY_STRING);
+
   if (eol_style)
     SVN_ERR (get_eol_style (&style, &eol, eol_style->data, native_eol));
   
@@ -166,6 +175,9 @@
   else
     {
       tm = entry->cmt_date;
+
+      if (text_time)
+        SVN_ERR(svn_time_from_cstring (&tm, text_time->data, pool));
     }
 
   if (keywords)
@@ -203,8 +215,16 @@
                                          FALSE, pool));
 
   if (! special)
-    SVN_ERR (svn_io_set_file_affected_time (tm, to, pool));
+    {
+      SVN_ERR (svn_io_set_file_affected_time (tm, to, pool));
 
+      SVN_ERR (svn_io_file_set_file_owner_group_mode (to,
+                                                      owner,
+                                                      group,
+                                                      mode,
+                                                      pool) );
+    }
+
   return SVN_NO_ERROR;
 }
 
@@ -434,11 +454,15 @@
   const svn_string_t *executable_val;
   svn_boolean_t special;
 
+  /* unix owner, group, and mode will be restaured */
+  svn_string_t *owner, *group, *mode;
+
   /* Any keyword vals to be substituted */
   const char *revision;
   const char *url;
   const char *author;
   apr_time_t date;
+  svn_boolean_t date_is_mtime;
 
   /* Pool associated with this baton. */
   apr_pool_t *pool;
@@ -629,13 +653,32 @@
   else if (strcmp (name, SVN_PROP_EXECUTABLE) == 0)
     fb->executable_val = svn_string_dup (value, fb->pool);
 
+  /* if we have a specific text-time for this file, it overrides
+   * the commit-timestamp */
+  else if (strcmp (name, SVN_PROP_TEXT_TIME) == 0)
+    {
+      fb->date_is_mtime=TRUE;
+      SVN_ERR (svn_time_from_cstring (&fb->date, value->data, fb->pool));
+    }
+
+  /* save owner, group and unix-mode */
+  else if (strcmp (name, SVN_PROP_OWNER) == 0)
+    fb->owner = svn_string_dup (value, fb->pool);
+  else if (strcmp (name, SVN_PROP_GROUP) == 0)
+    fb->group = svn_string_dup (value, fb->pool);
+  else if (strcmp (name, SVN_PROP_UNIX_MODE) == 0)
+    fb->mode = svn_string_dup (value, fb->pool);
+
   /* Try to fill out the baton's keywords-structure too. */
   else if (strcmp (name, SVN_PROP_ENTRY_COMMITTED_REV) == 0)
     fb->revision = apr_pstrdup (fb->pool, value->data);
 
   else if (strcmp (name, SVN_PROP_ENTRY_COMMITTED_DATE) == 0)
+  {
+    /* do not overwrite timestamp */
+    if (!fb->date_is_mtime)
       SVN_ERR (svn_time_from_cstring (&fb->date, value->data, fb->pool));
-
+  }
   else if (strcmp (name, SVN_PROP_ENTRY_LAST_AUTHOR) == 0)
     fb->author = apr_pstrdup (fb->pool, value->data);
 
@@ -729,6 +772,13 @@
   if (fb->date && (! fb->special))
     SVN_ERR (svn_io_set_file_affected_time (fb->date, fb->path, pool));
 
+  if (!fb->special)
+    SVN_ERR (svn_io_file_set_file_owner_group_mode (fb->path,
+                                                    fb->owner,
+                                                    fb->group,
+                                                    fb->mode,
+                                                    pool) );
+
   if (fb->edit_baton->notify_func)
     (*fb->edit_baton->notify_func) (fb->edit_baton->notify_baton,
                                     fb->path,
=== subversion/libsvn_client/repos_diff.c
==================================================================
--- subversion/libsvn_client/repos_diff.c  (revision 94)
+++ subversion/libsvn_client/repos_diff.c  (local)
@@ -32,6 +32,7 @@
 #include "svn_path.h"
 #include "svn_io.h"
 #include "svn_props.h"
+#include "svn_time.h"
 
 #include "client.h"
 
@@ -146,6 +147,9 @@
   /* A cache of any property changes (svn_prop_t) received for this file. */
   apr_array_header_t *propchanges;
 
+  /* a cache for the file's meta-information */
+  apr_finfo_t *file_info;
+
   /* The pool passed in by add_file or open_file.
      Also, the pool this file_baton is allocated in. */
   apr_pool_t *pool;
@@ -894,7 +898,20 @@
   return SVN_NO_ERROR;
 }
 
+static svn_error_t *
+populate_finfo (struct file_baton *fb,
+                  const char *name,
+                  apr_pool_t *pool)
+{
+  if (!fb->file_info)
+    {
+      fb->file_info=apr_palloc(pool, sizeof(*fb->file_info));
+      SVN_ERR (svn_io_stat (fb->file_info, name, APR_FINFO_NORM, pool));
+    }
 
+  return SVN_NO_ERROR;
+}
+
 /* An editor function.  */
 static svn_error_t *
 change_file_prop (void *file_baton,
@@ -907,8 +924,38 @@
 
   propchange = apr_array_push (b->propchanges);
   propchange->name = apr_pstrdup (b->pool, name);
-  propchange->value = value ? svn_string_dup (value, b->pool) : NULL;
-  
+
+  /* if the svn:text-time property is set, use the current file
+   * date instead of the value */
+  if (strcmp (name, SVN_PROP_TEXT_TIME) == 0)
+    {
+      SVN_ERR (populate_finfo(b, name, pool));
+      propchange->value=svn_string_create( 
+                                          svn_time_to_cstring (b->file_info->mtime, b->pool),
+                                          b->pool );
+    }
+  /* do likewise for owner, group, mode */
+  else if (strcmp (name, SVN_PROP_OWNER) == 0)
+    {
+      SVN_ERR (populate_finfo(b, name, pool));
+      propchange->value=svn_io_file_owner_string( b->file_info->user, b->pool);
+    }
+  else if (strcmp (name, SVN_PROP_GROUP) == 0)
+    {
+      SVN_ERR (populate_finfo(b, name, pool));
+      propchange->value=svn_io_file_group_string( b->file_info->group, b->pool);
+    }
+  else if (strcmp (name, SVN_PROP_UNIX_MODE) == 0)
+    {
+      SVN_ERR (populate_finfo(b, name, pool));
+      propchange->value=svn_io_file_mode_string( b->file_info->protection, pool);
+    }
+  else
+    {
+      propchange->value = value ? svn_string_dup (value, b->pool) : NULL;
+    }
+
+
   return SVN_NO_ERROR;
 }
 
=== subversion/libsvn_subr/io.c
==================================================================
--- subversion/libsvn_subr/io.c  (revision 94)
+++ subversion/libsvn_subr/io.c  (local)
@@ -43,6 +43,7 @@
 #include <apr_pools.h>
 #include <apr_file_io.h>
 #include <apr_file_info.h>
+#include <apr_user.h>
 #include <apr_general.h>
 #include <apr_strings.h>
 #include <apr_portable.h>
@@ -2714,7 +2715,182 @@
   if (q)
     *same = 1;
   else
-    *same = 0;
+	  *same = 0;
 
   return SVN_NO_ERROR;
 }
+
+
+svn_string_t *
+svn_io_file_owner_string (apr_uid_t owner,
+                          apr_pool_t *pool)
+{
+  svn_string_t *out;
+  char *username;
+
+  if (apr_uid_name_get (&username, owner, pool) != APR_SUCCESS)
+    username="";
+  out=svn_string_createf(pool, "%d %s", owner, username);
+
+  return out;
+}
+
+
+
+svn_string_t *
+svn_io_file_group_string (apr_gid_t group,
+                          apr_pool_t *pool)
+{
+  svn_string_t *out;
+  char *groupname;
+
+  if (apr_gid_name_get (&groupname, group, pool) != APR_SUCCESS )
+    groupname="";
+  out=svn_string_createf(pool, "%d %s", group, groupname);
+
+  return out;
+}
+
+svn_string_t *
+svn_io_file_mode_string(apr_fileperms_t perms,
+                        apr_pool_t *pool)
+{
+  return svn_string_createf(pool, "0%o", apr_unix_perms2mode(perms));
+}
+
+
+svn_error_t *
+svn_io_file_owner_id (apr_uid_t *uid,
+                      svn_string_t *owner,
+                      apr_pool_t *pool)
+{
+  apr_gid_t gid;
+  apr_array_header_t *list;
+
+  if (!owner || !owner->data) goto invalid;
+
+  list=svn_cstring_split (owner->data, " \t\r\n\f", TRUE, pool);
+  if (list->nelts>=2)
+    {
+      /* Use the name, if available. Else use the numeric id. */
+      if (apr_uid_get(uid, &gid, APR_ARRAY_IDX(list, 1, char*), pool) 
+          != APR_SUCCESS)
+        {
+          /* should use strtol or some such for error detection */
+          if ( apr_isdigit(* APR_ARRAY_IDX(list, 0, char*) ) )
+              *uid=svn__atoui64( APR_ARRAY_IDX(list, 0, char*) );
+          else
+            goto invalid;
+        }
+    }
+
+  return SVN_NO_ERROR;
+
+invalid:
+  return svn_error_create (SVN_ERR_ENTRY_ATTRIBUTE_INVALID, NULL,
+                           "value of " SVN_PROP_OWNER " is invalid");
+}
+
+
+svn_error_t *
+svn_io_file_group_id (apr_gid_t *gid,
+                      svn_string_t *group,
+                      apr_pool_t *pool)
+{
+  apr_array_header_t *list;
+
+  if (!group || !group->data)
+    goto invalid;
+
+  list=svn_cstring_split (group->data, " \t\r\n\f", TRUE, pool);
+  if (list->nelts>=2)
+    {
+      /* Use the name, if available. Else use the numeric id. */
+      if (apr_gid_get(gid, APR_ARRAY_IDX(list, 1, char*), pool) != 
+          APR_SUCCESS)
+        {
+          /* should use strtol or some such for error detection */
+          if ( apr_isdigit(* APR_ARRAY_IDX(list, 0, char*) ) )
+            *gid=svn__atoui64( APR_ARRAY_IDX(list, 0, char*) );
+          else
+            goto invalid;
+        }
+    }
+
+  return SVN_NO_ERROR;
+
+invalid:
+  return svn_error_create (SVN_ERR_ENTRY_ATTRIBUTE_INVALID, NULL,
+                           "value of " SVN_PROP_GROUP " is invalid");
+}
+
+
+
+svn_error_t *
+svn_io_file_set_file_owner_group_mode (const char *path,
+                                       const svn_string_t *owner,
+                                       const svn_string_t *group,
+                                       const svn_string_t *mode,
+                                       apr_pool_t *pool)
+{
+  apr_gid_t gid;
+  apr_uid_t uid;
+  apr_finfo_t finfo;
+  apr_fileperms_t perms;
+
+  /* this function should move to apr */
+#ifdef _WIN32
+#else
+
+  if (owner || group)
+    {
+      if (owner && owner->data)
+        if (svn_io_file_owner_id(&uid, (svn_string_t*)owner, pool) != SVN_NO_ERROR)
+          uid=-1;
+
+      if (group && group)
+        if (svn_io_file_group_id(&gid, (svn_string_t*)group, pool) != SVN_NO_ERROR)
+          gid=-1;
+
+      if (uid != -1 && gid != -1)
+        {
+          /* only if at least one value defined */
+          if (uid == -1 || gid == -1)
+            {
+              /* chown changes owner and group.
+               * if there's only one set, we have to query the original value.
+               * */
+              SVN_ERR( svn_io_stat(&finfo, path, APR_FINFO_NORM, pool) );
+              if (gid == -1) uid=finfo.group;
+              if (uid == -1) uid=finfo.user;
+            }
+
+          /* can only be done be uid 0, or by user with special priviledges.
+           * easiest thing is to try, and ignore an error 
+           * */
+          chown(path, uid, gid);
+        }
+    }
+
+  if (mode && mode->data && apr_isdigit(mode->data[0]))
+    {
+      apr_status_t status;
+      /* use strtoul, which auto-detects the mode (octal, decimal, etc.) 
+       * Normally the value is written in octal
+       *
+       * For now don't allow sticky bits.
+       * That should probably be configured with some option. */
+      perms=apr_unix_mode2perms(
+		      strtoul(mode->data, NULL, 0) & 0777
+		      );
+      status= apr_file_perms_set(path, perms);
+      if (status != APR_SUCCESS)
+        return svn_error_wrap_apr (status,
+                                   "Can't set file permissions on file '%s'", 
+                                   path);
+    }
+#endif
+
+  return SVN_NO_ERROR;
+}
+
=== subversion/libsvn_wc/adm_crawler.c
==================================================================
--- subversion/libsvn_wc/adm_crawler.c  (revision 94)
+++ subversion/libsvn_wc/adm_crawler.c  (local)
@@ -36,6 +36,7 @@
 #include "svn_base64.h"
 #include "svn_delta.h"
 #include "svn_path.h"
+#include "svn_time.h"
 
 #include "wc.h"
 #include "adm_files.h"
@@ -69,6 +70,7 @@
   const char *bname;
   apr_uint32_t modify_flags = 0;
   svn_boolean_t special;
+  const svn_string_t *owner, *group, *mode;
 
   text_base_path = svn_wc__text_base_path (file_path, FALSE, pool);
   tmp_text_base_path = svn_wc__text_base_path (file_path, TRUE, pool);
@@ -107,18 +109,41 @@
   SVN_ERR (svn_wc_entry (&entry, file_path, adm_access, FALSE, pool));
   assert(entry != NULL);
 
-  /* Possibly set timestamp to last-commit-time. */
+  /* Possibly set timestamp to last-commit-time or, if defined,
+   * the last modification-time. */
   if (use_commit_times && (! special))
     {
-      SVN_ERR (svn_io_set_file_affected_time (entry->cmt_date,
+      const svn_string_t *mtime;
+
+      SVN_ERR (svn_wc_prop_get (&mtime, SVN_PROP_TEXT_TIME, 
+                                file_path, adm_access, pool));
+
+      if (mtime)
+        SVN_ERR (svn_time_from_cstring (&tstamp, mtime->data, pool));
+      else
+      tstamp = entry->cmt_date;
+
+
+      SVN_ERR (svn_io_set_file_affected_time (tstamp,
                                               file_path, pool));
-      tstamp = entry->cmt_date;
     }
   else
     {
       SVN_ERR (svn_io_file_affected_time (&tstamp, file_path, pool));
     }
-  
+
+  SVN_ERR (svn_wc_prop_get(&owner, SVN_PROP_OWNER,
+                           file_path, adm_access, pool));
+  SVN_ERR (svn_wc_prop_get(&group, SVN_PROP_GROUP,
+                           file_path, adm_access, pool));
+  SVN_ERR (svn_wc_prop_get(&mode, SVN_PROP_UNIX_MODE,
+                           file_path, adm_access, pool));
+  SVN_ERR (svn_io_file_set_file_owner_group_mode (file_path,
+                                                  owner,
+                                                  group,
+                                                  mode,
+                                                  pool) );
+
   /* Modify our entry's text-timestamp to match the working file. */
   modify_flags |= SVN_WC__ENTRY_MODIFY_TEXT_TIME;
   newentry.text_time = tstamp;
=== subversion/libsvn_wc/adm_ops.c
==================================================================
--- subversion/libsvn_wc/adm_ops.c  (revision 94)
+++ subversion/libsvn_wc/adm_ops.c  (local)
@@ -40,6 +40,7 @@
 #include "svn_io.h"
 #include "svn_md5.h"
 #include "svn_xml.h"
+#include "svn_time.h"
 
 #include "wc.h"
 #include "log.h"
@@ -1310,9 +1311,35 @@
              than the 'now' time that already exists. */
           if (use_commit_times && (! special))
             {
-              SVN_ERR (svn_io_set_file_affected_time (entry->cmt_date,
+              const svn_string_t *mtime;
+              const svn_string_t *owner, *group, *mode;
+
+              SVN_ERR (svn_wc_prop_get (&mtime, SVN_PROP_TEXT_TIME, 
+                                        fullpath, adm_access, pool));
+
+              tstamp = entry->cmt_date;
+              if (mtime)
+                svn_time_from_cstring ( &tstamp, mtime->data, pool);
+
+              SVN_ERR (svn_io_set_file_affected_time (tstamp,
                                                       fullpath, pool));
               tstamp = entry->cmt_date;
+
+
+              /* if any of owner, group, or unix-mode are set,
+               * use this information
+               * */
+              SVN_ERR (svn_wc_prop_get (&owner, SVN_PROP_OWNER,
+                                        fullpath, adm_access, pool));
+              SVN_ERR (svn_wc_prop_get (&group, SVN_PROP_GROUP,
+                                        fullpath, adm_access, pool));
+              SVN_ERR (svn_wc_prop_get (&mode, SVN_PROP_UNIX_MODE,
+                                        fullpath, adm_access, pool));
+              SVN_ERR (svn_io_file_set_file_owner_group_mode (fullpath,
+                                                              owner,
+                                                              group,
+                                                              mode,
+                                                              pool) );
             }
           else
             {
=== subversion/libsvn_wc/log.c
==================================================================
--- subversion/libsvn_wc/log.c  (revision 94)
+++ subversion/libsvn_wc/log.c  (local)
@@ -470,6 +470,132 @@
 }
 
 
+/* Set file NAME in log's CWD to the specified owner */
+static svn_error_t *
+log_do_file_owner (struct log_runner *loggy,
+                       const char *name,                       
+                       const char **atts)
+{
+  svn_node_kind_t kind;
+  const char *full_path
+    = svn_path_join (svn_wc_adm_access_path (loggy->adm_access), name,
+                     loggy->pool);
+
+  const char *owner
+    = svn_xml_get_attr_value (SVN_WC__LOG_ATTR_OWNER, atts);
+  svn_boolean_t is_special;
+  svn_string_t *value;
+  
+  if (! owner)
+    return svn_error_createf (pick_error_code (loggy), NULL,
+                              _("Missing 'owner' attribute in '%s'"),
+                              svn_path_local_style
+                              (svn_wc_adm_access_path (loggy->adm_access),
+                               loggy->pool));
+
+  /* Do not set the owner on special files.
+   * In case we're doing devices sometimes this needs to be revisited. */
+  SVN_ERR (svn_io_check_special_path (full_path, &kind, &is_special,
+                                      loggy->pool));
+  
+  if (! is_special)
+    {
+      value=svn_string_create(owner, loggy->pool);
+      SVN_ERR (svn_io_file_set_file_owner_group_mode (full_path,
+                                                      value,
+                                                      NULL,
+                                                      NULL,
+                                                      loggy->pool) );
+    }
+
+  return SVN_NO_ERROR;
+}
+
+
+/* Set file NAME in log's CWD to the specified group */
+static svn_error_t *
+log_do_file_group (struct log_runner *loggy,
+                       const char *name,                       
+                       const char **atts)
+{
+  svn_node_kind_t kind;
+  const char *full_path
+    = svn_path_join (svn_wc_adm_access_path (loggy->adm_access), name,
+                     loggy->pool);
+
+  const char *group
+    = svn_xml_get_attr_value (SVN_WC__LOG_ATTR_GROUP, atts);
+  svn_boolean_t is_special;
+  svn_string_t *value;
+  
+  if (! group)
+    return svn_error_createf (pick_error_code (loggy), NULL,
+                              _("Missing 'group' attribute in '%s'"),
+                              svn_path_local_style
+                              (svn_wc_adm_access_path (loggy->adm_access),
+                               loggy->pool));
+
+  /* Do not set the group on special files.
+   * In case we're doing devices sometimes this needs to be revisited. */
+  SVN_ERR (svn_io_check_special_path (full_path, &kind, &is_special,
+                                      loggy->pool));
+  
+  if (! is_special)
+    {
+      value=svn_string_create(group, loggy->pool);
+      SVN_ERR (svn_io_file_set_file_owner_group_mode (full_path,
+                                                      NULL,
+                                                      value,
+                                                      NULL,
+                                                      loggy->pool) );
+    }
+
+  return SVN_NO_ERROR;
+}
+
+
+/* Set file NAME in log's CWD to the specified unix_mode */
+static svn_error_t *
+log_do_file_unix_mode (struct log_runner *loggy,
+                       const char *name,                       
+                       const char **atts)
+{
+  svn_node_kind_t kind;
+  const char *full_path
+    = svn_path_join (svn_wc_adm_access_path (loggy->adm_access), name,
+                     loggy->pool);
+
+  const char *unix_mode
+    = svn_xml_get_attr_value (SVN_WC__LOG_ATTR_UNIX_MODE, atts);
+  svn_boolean_t is_special;
+  svn_string_t *value;
+  
+  if (! unix_mode)
+    return svn_error_createf (pick_error_code (loggy), NULL,
+                              _("Missing 'unix_mode' attribute in '%s'"),
+                              svn_path_local_style
+                              (svn_wc_adm_access_path (loggy->adm_access),
+                               loggy->pool));
+
+  /* Do not set the unix_mode on special files.
+   * In case we're doing devices sometimes this needs to be revisited. */
+  SVN_ERR (svn_io_check_special_path (full_path, &kind, &is_special,
+                                      loggy->pool));
+  
+  if (! is_special)
+    {
+      value=svn_string_create(unix_mode, loggy->pool);
+      SVN_ERR (svn_io_file_set_file_owner_group_mode (full_path,
+                                                      NULL,
+                                                      NULL,
+                                                      value,
+                                                      loggy->pool) );
+    }
+
+  return SVN_NO_ERROR;
+}
+
+
 /* Remove file NAME in log's CWD. */
 static svn_error_t *
 log_do_rm (struct log_runner *loggy, const char *name)
@@ -1244,6 +1370,15 @@
   else if (strcmp (eltname, SVN_WC__LOG_SET_TIMESTAMP) == 0) {
     err = log_do_file_timestamp (loggy, name, atts);
   }
+  else if (strcmp (eltname, SVN_WC__LOG_SET_OWNER) == 0) {
+    err = log_do_file_owner (loggy, name, atts);
+  }
+  else if (strcmp (eltname, SVN_WC__LOG_SET_GROUP) == 0) {
+    err = log_do_file_group (loggy, name, atts);
+  }
+  else if (strcmp (eltname, SVN_WC__LOG_SET_UNIX_MODE) == 0) {
+    err = log_do_file_unix_mode (loggy, name, atts);
+  }
   else
     {
       signal_error
=== subversion/libsvn_wc/log.h
==================================================================
--- subversion/libsvn_wc/log.h  (revision 94)
+++ subversion/libsvn_wc/log.h  (local)
@@ -79,6 +79,10 @@
 /* Set SVN_WC__LOG_ATTR_NAME to have timestamp SVN_WC__LOG_ATTR_TIMESTAMP. */
 #define SVN_WC__LOG_SET_TIMESTAMP       "set-timestamp"
 
+/* Defines the owner, group, and unix-mode */
+#define SVN_WC__LOG_SET_OWNER           "set-owner"
+#define SVN_WC__LOG_SET_GROUP           "set-group"
+#define SVN_WC__LOG_SET_UNIX_MODE       "set-unix-mode"
 
 /* Handle closure after a commit completes successfully:  
  *
@@ -125,6 +129,9 @@
 #define SVN_WC__LOG_ATTR_TEXT_REJFILE   "text-rejfile"
 #define SVN_WC__LOG_ATTR_PROP_REJFILE   "prop-rejfile"
 #define SVN_WC__LOG_ATTR_TIMESTAMP      "timestamp"
+#define SVN_WC__LOG_ATTR_OWNER          "owner"
+#define SVN_WC__LOG_ATTR_GROUP          "group"
+#define SVN_WC__LOG_ATTR_UNIX_MODE      "unix-mode"
 /* The rest are for SVN_WC__LOG_MERGE.  Extend as necessary. */
 #define SVN_WC__LOG_ATTR_ARG_1          "arg1"
 #define SVN_WC__LOG_ATTR_ARG_2          "arg2"
=== subversion/libsvn_wc/update_editor.c
==================================================================
--- subversion/libsvn_wc/update_editor.c  (revision 94)
+++ subversion/libsvn_wc/update_editor.c  (local)
@@ -525,7 +525,13 @@
      that comes through as an 'entry prop', and will be used to set
      the working file's timestamp if it's added.  */
   const char *last_changed_date;
+  svn_boolean_t last_changed_is_for_entry;
 
+  /* The files' owner, group, and unix-mode. */
+  const char *owner;
+  const char *group;
+  const char *unix_mode;
+
   /* Bump information for the directory this file lives in */
   struct bump_dir_info *bump_info;
 
@@ -1695,9 +1701,29 @@
 
   /* Special case: if the file is added during a checkout, cache the
      last-changed-date propval for future use. */
-  if (eb->use_commit_times
-      && (strcmp (name, SVN_PROP_ENTRY_COMMITTED_DATE) == 0))
-    fb->last_changed_date = apr_pstrdup (fb->pool, value->data);
+  if (eb->use_commit_times && value)
+    {
+      if ( (strcmp (name, SVN_PROP_TEXT_TIME) == 0) )
+        {
+          fb->last_changed_date = apr_pstrdup (fb->pool, value->data);
+          fb->last_changed_is_for_entry = 1;
+        }
+      else if ( (strcmp (name, SVN_PROP_OWNER) == 0) )
+        {
+          fb->owner = apr_pstrdup (fb->pool, value->data);
+        }
+      else if ( (strcmp (name, SVN_PROP_GROUP) == 0) )
+        {
+          fb->group = apr_pstrdup (fb->pool, value->data);
+        }
+      else if ( (strcmp (name, SVN_PROP_UNIX_MODE) == 0) )
+        {
+          fb->unix_mode = apr_pstrdup (fb->pool, value->data);
+        }
+      else if ( (strcmp (name, SVN_PROP_ENTRY_COMMITTED_DATE) == 0) &&
+           !fb->last_changed_is_for_entry)
+        fb->last_changed_date = apr_pstrdup (fb->pool, value->data);
+    }
 
   return SVN_NO_ERROR;
 }
@@ -1794,6 +1820,9 @@
               svn_revnum_t copyfrom_rev,
               const char *diff3_cmd,
               const char *timestamp_string,
+	      const char *owner, 
+	      const char *group,
+	      const char *unix_mode,
               apr_pool_t *pool)
 {
   apr_file_t *log_fp = NULL;
@@ -2270,7 +2299,41 @@
                                NULL);
     }
 
+  if (owner)
+    svn_xml_make_open_tag (&log_accum,
+                           pool,
+                           svn_xml_self_closing,
+                           SVN_WC__LOG_SET_OWNER,
+                           SVN_WC__LOG_ATTR_NAME,
+                           base_name,
+                           SVN_WC__LOG_ATTR_OWNER,
+                           owner,
+                           NULL);
 
+  if (group)
+    svn_xml_make_open_tag (&log_accum,
+                           pool,
+                           svn_xml_self_closing,
+                           SVN_WC__LOG_SET_GROUP,
+                           SVN_WC__LOG_ATTR_NAME,
+                           base_name,
+                           SVN_WC__LOG_ATTR_GROUP,
+                           group,
+                           NULL);
+
+  if (unix_mode)
+    svn_xml_make_open_tag (&log_accum,
+                           pool,
+                           svn_xml_self_closing,
+                           SVN_WC__LOG_SET_UNIX_MODE,
+                           SVN_WC__LOG_ATTR_NAME,
+                           base_name,
+                           SVN_WC__LOG_ATTR_UNIX_MODE,
+                           unix_mode,
+                           NULL);
+
+
+
   /* Write our accumulation of log entries into a log file */
   SVN_ERR_W (svn_io_file_write_full (log_fp, log_accum->data, 
                                     log_accum->len, NULL, pool),
@@ -2366,6 +2429,9 @@
                          SVN_INVALID_REVNUM,
                          eb->diff3_cmd,
                          fb->last_changed_date,
+                         fb->owner,
+                         fb->group,
+                         fb->unix_mode,
                          pool));
 
   /* We have one less referrer to the directory's bump information. */
@@ -2857,6 +2923,9 @@
                          copyfrom_rev,
                          NULL,
                          NULL,
+                         NULL,
+                         NULL,
+                         NULL,
                          pool));
 
   SVN_ERR (svn_wc__run_log (adm_access, NULL, pool));
