head	1.2;
access;
symbols
	libshout-2_0:1.2
	libshout-2_0b3:1.2
	libshout-2_0b2:1.2
	libshout_2_0b1:1.2
	libogg2-zerocopy:1.1.1.1.0.2
	start:1.1.1.1
	xiph:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.03.15.02.10.18;	author msmith;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.10.02.28.49;	author jack;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.10.02.28.49;	author jack;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Brendan was getting pissed off about inconsistent indentation styles.
Convert all tabs to 4 spaces. All code must now use 4 space indents.
@
text
@#include <stdio.h>

#include <avl/avl.h>
#include "httpp.h"


int main(int argc, char **argv)
{
    char buff[8192];
    int readed;
    http_parser_t parser;
    avl_node *node;
    http_var_t *var;

    httpp_initialize(&parser, NULL);

    readed = fread(buff, 1, 8192, stdin);
    if (httpp_parse(&parser, buff, readed)) {
        printf("Parse succeeded...\n\n");
        printf("Request was ");
        switch (parser.req_type) {
        case httpp_req_none:
            printf(" none\n");
            break;
        case httpp_req_unknown:
            printf(" unknown\n");
            break;
        case httpp_req_get:
            printf(" get\n");
            break;
        case httpp_req_post:
            printf(" post\n");
            break;
        case httpp_req_head:
            printf(" head\n");
            break;
        }
        printf("Version was 1.%d\n", parser.version);
        
        node = avl_get_first(parser.vars);
        while (node) {
            var = (http_var_t *)node->key;
            
            if (var)
                printf("Iterating variable(s): %s = %s\n", var->name, var->value);
            
            node = avl_get_next(node);
        }
    } else {
        printf("Parse failed...\n");
    }

    printf("Destroying parser...\n");
    httpp_destroy(&parser);

    return 0;
}


@


1.1
log
@Initial revision
@
text
@d9 5
a13 5
	char buff[8192];
	int readed;
	http_parser_t parser;
	avl_node *node;
	http_var_t *var;
d15 1
a15 1
	httpp_initialize(&parser, NULL);
d17 35
a51 35
	readed = fread(buff, 1, 8192, stdin);
	if (httpp_parse(&parser, buff, readed)) {
		printf("Parse succeeded...\n\n");
		printf("Request was ");
		switch (parser.req_type) {
		case httpp_req_none:
			printf(" none\n");
			break;
		case httpp_req_unknown:
			printf(" unknown\n");
			break;
		case httpp_req_get:
			printf(" get\n");
			break;
		case httpp_req_post:
			printf(" post\n");
			break;
		case httpp_req_head:
			printf(" head\n");
			break;
		}
		printf("Version was 1.%d\n", parser.version);
		
		node = avl_get_first(parser.vars);
		while (node) {
			var = (http_var_t *)node->key;
			
			if (var)
				printf("Iterating variable(s): %s = %s\n", var->name, var->value);
			
			node = avl_get_next(node);
		}
	} else {
		printf("Parse failed...\n");
	}
d53 2
a54 2
	printf("Destroying parser...\n");
	httpp_destroy(&parser);
d56 1
a56 1
	return 0;
@


1.1.1.1
log
@move to cvs
@
text
@@
