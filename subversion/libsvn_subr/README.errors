OK, here's how to use exceptions in Subversion (latest draft).


1.  Exceptions are stored in svn_error_t structures:

typedef struct svn_error_t
{
  ap_status_t err;             /* native OS errno */
  svn_boolean_t fatal;         /* does the creator think this a fatal error? */
  char *message;               /* details from producer of error */
  struct svn_error_t *child;   /* ptr to next error below this one */

  int canonical_errno;         /* "canonicalized" errno from APR */ 
  char *description;           /* generic description from ap_strerror() */

  ap_pool_t *pool;             /* place to generate message strings from */

} svn_error_t;    



2.  If you are the *original* creator of an error, you would do
    something like this:

        return (svn_create_error (errno,
                                  SVN_NON_FATAL,
                                  "User not permitted to write file."
                                  NULL,
                                  my_pool));

    This routine allocates the error structure from the pool and fills
    in extra fields (like the canonicalized errno and description.)

    NOTICE the NULL field... indicating that this error has no child,
    i.e. it is the bottom-most error.  Don't forget to do this!


3.  If you *receive* an error, you have three choices:

    a) Handle the error yourself.  Use either your own code, or just
    call the primitive svn_handle_error(err).  (This routine unwinds
    the stack and prints out messages.)

    b) Throw the error upwards, unmodified:

        error = some_routine (foo);
        SVN_RETURN_IF_ERROR(error);

       This macro is defined as...

         #define SVN_RETURN_IF_ERROR(err) if (err) return (err)

        
    c) Throw the error upwards, wrapping it in a new error structure:

        error = some_routine (foo);
        if (error)
          {
           svn_error_t *wrapper = svn_create_error (my_errno,
                                                    SVN_NON_FATAL,
                                                    "Authorization failed.",
                                                    error,
                                                    error->pool);
           return wrapper;
          }


        Of course, there's a convenience routine which creates a
        wrapper error with the same fields as the child -- *except* it
        includes your own new message:

        error = some_routine (foo);
        if (error)
          {
           return (svn_quick_wrap_error (error, "Authorization failed.");
          }
 
        And of course, the whole last chunk is macroed too:

        error = some_routine (foo);
        SVN_RETURN_WRAPPERED_ERROR(error, "Authorization failed.");
