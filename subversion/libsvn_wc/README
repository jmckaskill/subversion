     Oh Most High and Fragrant Emacs, please be in -*- text -*- mode!

This is the library described in the section "The working copy
management library" of svn-design.texi.

It performs local operations in the working copy, tweaking
administrative files and versioned data, generally in response to a
received delta.  It communicates with the server through libsvn_cl.


The Problem We're Solving.
==========================

The working copy is arranged as a directory tree, which, at checkout,
mirrors a tree rooted at some node in the repository.  Over time, the
working copy accumulates uncommitted changes, some of which may affect
its tree layout.  By commit time, the working copy's layout could be
arbitrarily different from the repository tree on which it was based.

Furthermore, updates/commits do not always involve the entire tree, so
it is possible for the working copy to go a very long time without
being a perfect mirror of some tree in the repository.


One Way We're Not Solving It.
=============================

Updates and commits are about merging two trees that share a common
ancestor, but have diverged since that ancestor.  In real life, one of
the trees comes from the working copy, the other from the repository.
But when thinking about how to merge two such trees, we can ignore the
question of which is the working copy and which is the repository,
because the principles involved are symmetrical.

Why do we say symmetrical?

It's tempting to think of a change as being either "from" the working
copy or "in" the repository.  But the true source of a change is some
committer -- each change represents some developer's intention toward
a file or a tree, and a conflict is what happens when two intentions
are incompatible (or their compatibility cannot be automatically
determined).

It doesn't matter in what order the intentions were discovered --
which has already made it into the repository versus which exists only
in someone's working copy.  Incompatibility is incompatibility,
independent of timing.

In fact, a working copy can be viewed as a "branch" off the
repository, and the changes committed in the repository *since* then
represent another, divergent branch.  Thus, every update or commit is
a general branch-merge problem:

   - An update is an attempt to merge the repository's branch into the
     working copy's branch, and the attempt may fail wholly or
     partially depending on the number of conflicts.

   - A commit is an attempt to merge the working copy's branch into
     the repository.  The exact same algorithm is used as with
     updates, the only difference being that a commit must succeed
     completely or not at all.  That last condition is merely a
     useability decision: the repository tree is shared by many
     people, so folding both sides of a conflict into it to aid
     resolution would actually make it less useable, not more.  On the
     other hand, representing both sides of a conflict in a working
     copy is often helpful to the person who owns that copy.

So below we consider the general problem of how to merge two trees
that have a common ancestor.  The concrete tree layout discussed will
be that of the working copy, because this library needs to know
exactly how to massage a working copy from one state to another.


Structure of the Working Copy
=============================

     [Note: this obsoletes parts of client.texi.  We'll sync them up
     after implementation.] 

Working copy meta-information is stored in SVN/ subdirectories,
analogous to CVS/ sudirs:

   SVN/wc_fmt                   /* Contains wc adm format version. */
       repository               /* Where this stuff came from. */
       versions                 /* Version numbers for this directory */
       properties               /* Properties for this directory */
       tree-edits               /* Records changes to tree structure */
       prop-edits               /* Records changes to properties */
       lock                     /* Optional, tells others this dir is busy */
       doing/                   /* What this dir is doing right now */
          action                    /* Tells the action in progress */
          files                     /* Files involved in the action */
          started                   /* Action started iff exists */
          finished                  /* Action finished iff exists */
       tmp                      /* Local tmp space is preferable to /tmp */
       text-base/               /* Pristine repos versions of the files... */
            foo.c
            qux/                    /* Subdirs are empty, though */
            bar.c
            baz.c
       prop-base/               /* Pristine repos hashdumps of these files
            foo.c
            bar.c                   /* Stores bar.c's file properties */
            baz.c
       dprop-base/              /* Tentative dirent entry property storage */
            foo.c
            bar.c                   /* Would store bar.c's dirent props */

`wc_vn'

   Says what version of the working copy adm format this is (so future
   clients can be backwards compatible easily).

`repository'

   Where this dir came from (syntax TBD).

`versions':

   This file holds the version number of this directory and its
   children -- that is to say, the version number for the root of the
   repository tree from which this directory/file is derived.  

   The first line represents the current directory:

      . VersionNumber ThisDirName

   and succeeding lines record files not at that version:

      OtherVersionNumber FileName

   (names escaped appropriately, of course).  The directory's own
   VersionNumber is implicit for every child of the directory, so only
   the exceptions need to be recorded.  For example

      . 15 blah       /* Current dir is at 15, and all its files too... */
      17 foo.c        /* ... except foo.c, which is at 17, and... */
      20 bar.c        /* ... bar.c, which is at 20, and...
      12 baz.c        /* ... bar.c, whose 12 might be result of "update -r" */

   The versions of child directories are not recorded, because they
   would have their own `SVN/versions'.  

   The `versions' file discusses only things that exist in the
   repository.  For example, if the user does "svn rename foo.c
   qux.c", the versions file will still claim that foo.c is at version
   17 (the rename gets recorded in the `tree-changes' file, described
   later).  Only after the rename is committed does the line for foo.c
   change to:

      21 qux.c

   (the version number might be something other than 21, of course).
   
`properties'

   Properties for this directory, in standard hashdump format.

`tree-edits'

   Records adds, renames, and deletes involving this directory.

      Operation NameHere OrigVersion OrigNameAsAbsolutePath

`prop-edits'

   Records changes to properties on this directory and files in it.

      Target Op PropName [PropValue]

`read-lock'

   Present iff some client is reading this SVN/ subdir.
   Write locks block on this.

`write-lock'

   Present iff some client is making changes in this SVN/ subdir.
   Both read and write locks block on this.

`doing'

   This directory records the start and end of every action, for
   interrupt-safe operations.  The `action' files says what exactly is
   happening now (for example, not only that this is a checkout, but
   that the text-base is being written).  Before the wc library starts
   doing an action, it always announces what it's about to do in this
   directory; when it's done, it then creates a `finished' file, then
   cleans up the other files, including the `started' file, and only
   *then* removes the `finished' file.

   A lock always exists on the adm subdir during the entire time of
   activity in doing/.

   More details to come, naturally. :-)

`tmp'

   Use this instead of /tmp, for debuggability, recovery, easy
   avoidance of filename collisions.

`text-base/'

   Each file in text-base/ is a pristine repository version of that
   file, corresponding to the version indicated in `versions'.  These
   files are used for sending diffs back to the server, etc.

   Child directories of the current directory appear here, but are
   empty -- this is enough to make their existence known to the
   current directory; all other information about the child directory
   is of course stored in its own SVN/ subdir.

`prop-base/'

   Pristine repos properties for those files, in hashdump format.
   todo: may also store dirent props here, lots of good formats for
   mixing those two, would pick one when we implement the dirent
   props.  Or may store them some other way; think this will be best
   answered after having the rest of the library working.




------------------------
todo: some loose ends

   1. filename escaping in SVN/versions
   2. 


------------------------
todo: make a concrete example using Jim's starting tree:

   /dir1/file1
         file2
         dir2/file3
              file4
         dir3/file5




How the client applies an update delta.
---------------------------------------

Updating is more than just bringing changes down from the repository;
it's also folding those changes into the working copy.  Getting the
right changes is the easy part -- folding them in is hard.

Before we examine how Subversion handles this, let's look at what CVS
does:

   1. Unmodified portions of the working copy are simply brought
      up-to-date.  The server sends a forward diff, the client applies
      it.

   2. Locally modified portions are "merged", where possible.  That
      is, the changes from the repository are incorporated into the
      local changes in an intelligent way (if the diff application
      succeeds, then no conflict, else go to 3...)

   3. Where merging is not possible, a conflict is flagged, and *both*
      sides of the conflict are folded into the local file in such a
      way that it's easy for the developer to figure out what
      happened.  (And the old locally-modified file is saved under a
      temp name, just in case.)

It would be nice for Subversion to do things this way too;
unfortunately, that's not possible in every case.

CVS has a wonderfully simplifying limitation: it doesn't version
directories, so never has tree-structure conflicts.  Given that only
textual conflicts are possible, there is usually a natural way to
express both sides of a conflict -- just include the opposing texts
inside the file, delimited with conflict markers.  (Or for binary
files, make both versions available under temporary names.)

While Subversion can behave the same way for textual conflicts, the
situation is more complex for trees.  There is sometimes no way for a
working copy to reflect both sides of a tree conflict without being
more confusing than helpful.  How does one put "conflict markers" into
a directory, especially when what was a directory might now be a file,
or vice-versa?

Therefore, while Subversion does everything it can to fold conflicts
intelligently (doing at least as well as CVS does), in extreme cases
it is acceptable for the Subversion client to punt, saying in effect
"Your working copy is too out of whack; please move it aside, check
out a fresh one, redo your changes in the fresh copy, and commit from
that."  (This response may also apply to subtrees of the working copy,
of course).

Usually it offers more detail than that, too.  In addition to the
overall out-of-whackness message, it can say "Directory foo was
renamed to bar, conflicting with your new file bar; file blah was
deleted, conflicting with your local change to file blah, ..." and so
on.  The important thing is that these are informational only -- they
tell the user what's wrong, but they don't try to fix it
automatically.

All this is purely a matter of *client-side* intelligence.  Nothing in
the repository logic or protocol affects the client's ability to fold
conflicts.  So as we get smarter, and/or as there is demand for more
informative conflicting updates, the client's behavior can improve and
punting can become a rare event.  We should start out with a _simple_
conflict-folding algorithm initially, though.


