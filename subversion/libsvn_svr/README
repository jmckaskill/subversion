
This is the Subversion Server library.

This library depends on the Subversion filesystem library (libsvn_fs),
and provides an interface to any program that wishes to behave as a
Subversion server.

With this library, your program is able to:

     * make filesystem calls into any Subversion repository

     * define general server policy behavior and load server-side
       plugins by writing a custom `svn.conf' file


The public API is defined in `svn_svr.h'.


---------------------------------

How to write an application that implements a "Subversion Server".

In order to make filesystem calls, you need to create a
`svn_svr_policies_t' structure, (or `policy', for short).  This
structure represents the global state of the server.


Method #1:  Using a `svn.conf' file.

#include "svn_svr.h"

void access_subversion_repository (ap_pool_t *pool)
{
  svn_user_t *my_user = svn_create_user ("joe", "DAV", "red-bean", "joe"); 
  svn_svr_policies_t *my_policy = svn_svr_init (svn_parse ("svn.conf"));

  /* Use my_policy for all wrappered filesystem calls */
  svn_svr_read (&my_svn_node_t, policy, "tigris", my_user, 5, "/trunk/foo");
}


    1. #include <svn_svr.h> and <svn_parse.h>.  Initialize an
        apr_pool_t to use.

    2. Create a svn_user_t structure.  Your app is *soley* responsible
       for making sure the user is authenticated; the Subversion
       Filesystem just assumes so.  (Optional: fill in
       svn_user_t->svn_username with the name you want to use for
       doing filesystem operations, otherwise
       svn_user_t->auth_username will be used.)

    3. Create (or use a preexisting) `svn.conf' file that contains
       general server config options.  

    4. Parse the configfile with svn_parse(), and pass the resulting
       hashtable to svn_svr_init().  You'll get back a svn_policies_t
       structure, which you must then pass to all future server
       routines.

    5. Call any number of wrappered filesystem calls, passing in the
       user structure and the policy structure.  



Method #2:  Manual construction

If you don't want to parse a config file, you can build a policy
structure manually.

The policy structure is fairly simple and open.  It contains:

    * a hash which maps repository pathnames -> repository aliases

    * a hash which maps security commands -> command arguments

    * a hash which maps plugin names -> pointers to loaded plugins

The first two hashes can be built by simply creating bytestrings
(svn_string_t) and storing them.  You'll need to look at the
`svn.conf' sample file to see what sort of strings to store.

The last hash is more complex and shouldn't be directly tweaked by
developers.  Instead, call svn_svr_load_plugin().  This routine loads
a shared library of your choice and calls the plugin's init() routine,
which in turn causes the plugin to register itself in the policy's
last hashtable.




---------------------------------

How to write a server-side plugin.

...
