;;          (this file best viewed in -*- lisp -*- mode)

;; Here is a sample `svn.conf'.  

;; This file lives outside of any repository (e.g. /etc/svn.conf), and
;; contains general server-side policies that are solely within the
;; jurisdiction of the Subversion server administrator -- *not* users.
;;
;; This file is loaded automatically whenever libsvn_svr.so starts up.
;;
;; --------------------------------------------------------------------

;;; Feature 1:  Repository aliases

;; It's a drag to remember a full pathname to a repository.  Let's
;; allow aliases.  In fact, let's set a client-side convention of
;; *always* using repository aliases, so that server admins can move
;; repositories around on disk without anyone knowing!

(alias-repository "/usr/local/svn/tigris/" "tigris")
(alias-repository "/home/sussman/svn-repos/" "svnben")


;;; ----------------------------------------------

;;; Feature 2:  Loadable server-side ``plug-ins''

;;   If a client requests a particular method, then load an
;;   appropriate plug-in to handle it.

(autoload 'annotate "/usr/local/lib/subversion/libsvn_annotate.so")
(autoload 'grep "/usr/local/lib/subversion/libsvn_grep.so")
(autoload 'execute-guile-script "/usr/local/lib/subversion/libsvn_guile.so")

;;   Of course, we can also just load a module unconditionally at
;;   start time.  For example, If the lock manager finds that two
;;   proposed skeltas conflict, it can check the offending file's
;;   property list and determine if it's a `passwd' or `ChangeLog'
;;   file, and initiate an intelligent server-side merge later on.

(load "/usr/local/lib/subversion/libsvn_smartmerge.so")


;;; ----------------------------------------------

;;; Feature 3:  High-Level Access Control

;; The Subversion filesystem already enforces its own ACLs.  However,
;; the server administrator should still have broad, overriding power
;; over repositories.  Rather than modify particular ACLs in a
;; filesystem, the server can enforce general access policies *before*
;; passing calls to the filesystem.

;; Here are some examples:

;; The server can send annoying MOTDs whenever a user first accesses a
;; repository, much like FTP servers do.

(motd "tigris" "Welcome to the Tigris SVN repository!")

;; Temporarily take an entire repository "off-line" (for backup,
;; perhaps) without shutting down access to other repositories.

(offline "tigris")

;; Temporarily block access from a particular user, authentication
;; method, or domain.  This is just dumb regexp matching on the
;; "username" field that the network layer hands to the server
;; library.

(block "anonymous/*/*" "tigris")  ;; anonymous user can't access tigris repos
(block "*/*/microsoft*" "svnben") ;; microsoft folks can't access this repos
(block "*/smtp/*" "*")            ;; no smtp access is allowed on any repos

;; We can add as many "interceding" access rules as we'd like in the
;; future, but I think we should follow one main guideline: all of
;; these rules *restrict* access in some specific way.  I don't think
;; a server policy should ever *add* privilege to a repository.

