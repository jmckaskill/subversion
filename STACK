If you're looking for a task to take on, please see the TASKS file.

This file merely lists immediate, short-term (next few days) stuff on
people's stacks.  It may make reference to phone conversations and
private emails, so a given item might not make much sense unless one
is familiar with its out-of-band context.  We keep this file under
version control mainly for convenience -- feel free to add your own
short-term tasks to it, if that's helpful.

------------------------------------------------------------------------

Ben & Karl todo:

   - clean up the interface in libsvn_client.  make it more canonical.
     (This may happen automatically as the Win32 and Gnome clients are
      developed after-hours!)

Ben todo:

   - From Bill Tutt:
     > > * ${SVN_PROG} delete-force ${TEST_DIR_1}\A\D\H\omega
     > > 
     > > Registers the delete in $(TEST_DIR_1)/SVN/entries with a filename of
     > > "A\D\H\omega" and an ancestor of: "anni/A\D\H\omega"
     > > Doesn't touch ANYTHING in $(TEST_DIR_1)/A/D/H/SVN/entries
     >
     > Okay; working on, thanks for noticing this!  (Time to get that path
     > library fleshed out. :-) ).
     
     That wasn't the problem. A\D\H\omega was indeed deleted when I passed in
     the -force option.
     The problem was that the "omega" entry still existed in
     A\D\H\SVN\entries after the delete was finished.
     (Well, that and a deleted marker showed up in
     $(TEST_DIR_1)/SVN/entries.)
     I haven't run into any actual problems because of the silly paths we're
     currently generating.

   - From Bill Tutt:
     Well, the scenario I'm talking about is the "add, delete"
     sequence for a file without an intervening commit.
     It sounds like your suggesting keeping the else, and moving the
     bugfix into someplace in the delete handling logic.
       i.e.:
       * When deleting a file in the WC state:
         If the file has already been marked as an add, hard delete
         the meta-data for the entry, since the user never wanted
         to commit the data in the first place.

    I think that makes sense, I'll leave fixing up the delete stuff in
    someone else's more capable hands.

   - make a new mini-crawler (lots of shared code with adm_crawler.c)
     which reports "version differences" to an editor.  this will be
     used to communicate the working copy's state to the repository
     *before* receiving an update.

Mike Pilato wc todo:

   - From Bill Tutt:
     This is just more an FYI, as it isn't preventing me from doing
     any work atm, but the paths returned from svn_wc_statuses are
     looking like: "C:\SVN\subversion\subversion\client\tests\t1\/iota"

Karl wc todo:

   - Propagate changes down into libsvn_client.  Currently, the client
     usually takes a `targets' list and iterates over it, invoking
     some libsvn_client routine each time.  There are cases where the
     libsvn_client routine should get the target list directly and do
     the iteration internally, or even pass the list on down into
     libsvn_wc.
   - make an is_textfile test, so at least we can create .alt files
     instead of .rej for those that `patch' can't handle.
   - write the log/lock recovery function.
   - with Ben, review locking protocol in wc adm directories for sanity.
   - check apr_open calls, do they assume failure implies null handle?
   - fix working copy identification/allergy code
   - make sure type-changing replacements work right
   - do the generic entry/adm-path grabber abstraction, as talked
     about with Ben, change everyone around to use it (chore, whoa).

Ben and Karl (longer term):

   - xml dtd, for both xml deltas and wc formats

   - for milestone 3: TREE DELTAS.  Quake before them.  This problem
     has many aspects to it, *including* {the need for commands to
     take lists of paths, canconicalizing these lists, testing paths
     if they exist and/or what their entries say about them, etc.}
     Just a tip of the iceberg.

Greg:

   - mod_dav_svn:
      - finish repository hooks (waiting on FS a bit)
        need: MKCOL, DELETE, GET, PUT
	defer copy/move

      - liveprop hooks:
	core: getcontentlength, creationdate, getetag,
	      getlastmodified, resourcetype
	deltav: target, activity-collection-set, version-name

      - vsn hooks: ???  REPORT and MKACTIVITY first
        REPORT: need the SVN:status-report
        need: CHECKOUT
	need: MERGE (activity)
	validate proper support for VERSION-CONTROL. this would be the 
	  missing piece for DeltaV "Core" support.

   - mod_dav: no apparent changes until vsn comes in
      - need: MKACTIVITY, MERGE
      - verify Vasta's work against our needs: CHECKOUT, REPORT, LABEL
      - defer LABEL support
      - probably need BASELINE-CONTROL

   - libsvn_ra_dav:
      - update editor
      - commit editor

   - APR: move apr_copy_file() from SVN. and apr_append_file, etc.

   - security checks (e.g. system() usage in wc/get_editor)

Filesystem:

  (Branko and Karl have made this list here to keep straight the order in
  which they're doing stuff in the fs.)

  We've got svn_fs_begin_txn(), svn_fs_close_txn(), svn_fs_open_txn(),
  svn_fs_txn_name(), svn_fs_list_transactions(). Next, let's do:

    1.  svn_fs_abort_txn()

  These don't do anything useful by themselves, of course, but they're
  prerequisites for:

    2. Begin, open a txn
    3. Make a change to some node in that txn
    4. Get txn's name
    5. close the txn
    6. re-open the same txn, by name
    7. check that our change is still there!

  I'm not sure yet what specific functions are required to implement
  steps 2-7; we'll first establish the concrete list of functions,
  then implement them.

  (O.K., I'll take a guess, at the DAG layer:

      -4. svn_fs__dag_clone_root
      -3. svn_fs__dag_make_file
      -2. svn_fs__dag_txn_node
      -1. svn_fs__dag_close
       0. svn_fs__dag_delete  (that's for svn_fs_abort_txn)

   Hmm ... Oh, yes:

      -5. Decide what exactly a dag_node_t is.

   and of course whatever's missing below.  -xbc)

  Once that's working, we can do the Big One: svn_fs_commit_txn(). :-)

  -Karl
