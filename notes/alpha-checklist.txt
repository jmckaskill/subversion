                             -*- outline -*-

If you are looking at this file in Emacs, it will be displayed in
Outline Mode:
  
   C-c C-t       compress entire buffer into headings only
   C-c C-a       decompress entire buffer
   C-c C-d       compress subtree
   C-c C-s       decompress subtree

------------------------------------------------------------------------

* M3 todo list

  M3 is self-hosting with a command line client.
        
  We need every command supported by the client tested (edge-cases and
  all) by the test-suite. Those commands include: add, checkout,
  commit, copy, delete, diff, import, merge, propget, propset, status,
  update, and help.

** Network layer needs to support user-props (gstein).

  ESTIMATE: 1 programmer week for most of us to get props over DAV
            working, less time if gstein or joe orton does it.

  STATUS: Ben is working on this as we speak.

*** autodetection of text/binary types / keyword sub / newline translation

   ANSWER: This will be solved by three separate properties: 
           - mime-type. We will have a heuristic that determines as best it
           can what the mime-type of a file is (of course it will be
           user-configurable).

                [ We should look in the standard locations for mime
                  data on the platforms where it's available;
                  /etc/mime.magic on various Unices, the registry on
                  Win32, etc.                                      --xbc ]

           - Keyword Substitution (BOOL)
           - Newline Translation (BOOL)
           Note that we will always err on the safe side (assume that a file
           is binary and wants no Keyword Substitution or Newline
           Translation if we are not certain about the contents of a file. 

                [ I think it would be better to make these values (a
                  list of) keywords instead of plain switches.

                   - For keyword substitution, you could enable only a
                     subset of the available keywords -- e.g., turn of
                     the infamous [$]Log[$].

                   - Newline translation might have the following
                     values:

                     - "none": No translation; default for binary
                       files

                     - "native": Use whatever the client platform's
                        own line separator is; this would be the
                        default for plain text files

                     - "unix", "dos", "mac": force newlines to \n,
                       \r\n or \n\r, respectively; for instance,
                       MSVC's .dsp and .dsw files would need "dos"
                       translation.

                     Also see dev thread
                     Subject: Alphe-checklist comments             --xbc ]


  ESTIMATE: .5 to 1 programmer week.  Not difficult to code at all,
            just a matter of getting properties interpreted right.

  STATUS: Karl is waiting on Ben's props-over-DAV work, then will do
          (though volunteers welcome!)

*** cross-process read/write lock function for DB_RUN_RECOVERY. (gstein)

  ESTIMATE: 1 programmer week.  Might be less, betting conservatively.

*** hook system -- to fire off shell scripts.  (kfogel defines, gstein imps)

   (Need commit emails for M3, specifically.)

   Answer: independent library (libsvn_repos), which fs callers must
   call into.  All cooperative callers of libsvn_fs (mod_dav_svn,
   ra_local) will call pre/post hooks.  The interfaces in the hook
   layer will very similar to those in svn_fs.h.

   ACTION:  discuss and design specifics.

   ANSWER: gstein proposed that in the case of pre and post-commit
           hooks, we fire off a subprocess and pass it the transaction
           ID.
           
           Hooks are all going to be provided in the libsvn_repos
           library.  Configuration files are not going to *have* to be
           in the repository. They will sit on the server *near* the
           repository, and users *can* put them in the repository.

  ESTIMATE: 2 programmer weeks.

  STATUS: Mike and Karl working on right now, see
          subversion/libsvn_repos/hooks.txt.

** change #6:  invert text-delta interface (gstein)

   Answer: driver will provide editor with a struct that contains a
   "menu" of ways to produce a textdelta... i.e. a pair of filenames,
   and/or a pair of svn_stream_t's, and/or an svn_txdelta_stream.  Let
   the editor select what it wants to use.

   ESTIMATE: ?  Greg, was something blocking on this for M3?
   Otherwise, let's do it during post-Alpha.

** simple Apache-only authentication & authorization (gstein, kfogel)

  Ben asks:  doesn't this already exst?  Can't we just throw existing
  Apache security directives into the <Location> tag and build an
  htaccess file?

  ESTIMATE: ?  Need to start discussion on the list about this.

* ALPHA items

  Alpha is when we're ready to release 1.0, except that we've got lots
  of bugs. :-)

** Filesystem improvements

*** dir_delta use 'copyfrom' args    /* cmpilato, in progres */

*** Deltification and undeltification performance improvements.

    See issue #414.

** 'svn cp' and friends  (cmpilato and sussman)

If we can get 'svn cp' working on the client, then mv/branch/tag all
follow naturally.

How will we present branches and tags to the user?  Show them as
subdirs, or hide them under a cvs-like interface?

      Answer:  we won't hide the implementation... BUT: we will not
      call them "branches" and "tags".  We'll only talk about "copies"
      instead and try to educate the public this way.

      Answer:  'svn cp' will take 2 args, each can be a local path
      *or* a URL.  This means it may be a checkout or commit in
      disguise.

      Answer:  'svn branch' is a special case of 'svn cp' that munges
      your wc to move to this new location.

      Answer:  'svn tag' is special case of 'svn cp' that interprets
      args slightly differently.


** misc subcommands

   svn log, export, diff, rdiff, blame, merge, revert,
       rollback, unadd, undel.  (Chicago office)

   We are purposely ignoring:  history, edit, watch, editors.

  Notes:  

   - 'merge' will probably need to use delta_dirs()


** general pool usage code-review (gstein and fitz)

   Fitz and gstein will do a general pool review including documenting
   pool usage in HACKING. in svn_fs.h, the close functions for certain
   objects will go away. Where possible, the pool field will be
   removed from various structures and take a pool from the caller
   (may involve changing arguments, etc).

** internalized diff/patch library:  (on hold)

** user documentation (no one responded to call for volunteers)

** UTF-8 preparations (jimb?)

** change ra_local commit-style (sussman & gstein will discuss)



* POST-1.0

** cvs2svn (gstein?  Thom Wood?  Someone else)

  This does not have to be written using SWIG, although that would be
  nice.  Writing it in C against the native SVN library interfaces
  would be fine too.

  ESTIMATE: 4 programmer weeks, because it needs to be tested out the
            wazoo.

** a "real" internal ACL system

   ACTION: punt on acl's for 1.0. provide authorization via apache
   ANSWER: Authorization for the following pieces:
           Node:
                add historical property
                read historical property
                list historical property
                delete historical property
                add non-historical property
                read non-historical property
                list non-historical property
                delete non-historical property
           File:
                read
                write
                change-regexp (Muhahahahahahaha!)
           Directory:
                add      \
                delete    |---- Change
                change   /
                traverse
        
        ACL := ENTRY
        
        ENTRY := USER|GROUP ":" ACTION
        
        ACTION := add_hist_prop|read_hist_prop|list hist_prop
                  |delete hist_prop|add non-hist_prop|read non-hist_prop
                  |list non-hist_prop|delete non-hist_prop
                  |read|write|change_regexp
                  |add|del|list|traverse
        
        Now that you've read through all that, this is where we say that the
        above is all post-1.0 chattering. For now we will use authorization
        schemes provided by Apache. ACLs are post-1.0. Repeat after me: ACLs...


** svn obliterate

   In other words, lock the repository, and remove every version of a
   file that has ever existed.  Major history rewriting, and a
   potential to break working copies.

** genetic merging

   Oh changesets, where are ye?

** GUI clients

** i18n

   ANSWER: Post 1.0, but Jim will provide UTF-8 checking for paths in the
           filesystem for 1.0 to avoid problems in the future. Also, Fitz
           will (time permitting) look into a gettext-like implementation
           that are license compatible.

                [ Just a reminder: the gettext implementation from
                  glibc is LGPL. That licence should be compatible,
                  shouldn't it? In fact, I can get my hands on a
                  stand-alone gettext implementation, based on
                  glibc-2.1 (I think), that's currently being used on
                  Linux, HP-UX and Win32.                          --xbc ]

  
** read-only repos mirrors

** modules --- (still discussing) 



 


