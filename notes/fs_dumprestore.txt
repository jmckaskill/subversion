
A proposal for an svn filesystem dump/restore format.

Two problems we want to solve
=============================

 1.  When we change our node-id schema, we need to migrate all of our
     data (by dumping and restoring).

 2.  Serves as a backup format.  Could be read by other software tools
     someday.


Design Goals
============

 A.  Written as two new public functions in svn_fs.h.  To be invoked
     by new 'svnadmin' subcommands.

 B.  Format uses only timeless fs concepts.

     The dump format needs to reference concepts that we *know* are
     general enough to never change.  These concepts must exist
     independently of any internal node-id schema, or any DB storage
     backend.  In other words, we're talking about the basic ideas in
     our original "design spec" from May 2000.


Format Semantics
================

Here are the timeless semantics of our fs design -- the things that
would be stored in our dump format.

  - A filesystem is an array of trees.
    Each tree is called a "revision" and has unversioned properties attached.

  - A revision has a tree of "nodes" hanging off of it.
    Actually, the nodes in the filesystem form a DAG.  A revision
    always points to an initial node that represents the 'root' of some tree.
 
  - The majority of a tree's nodes are hard-links (references) to
    nodes that were created in earlier trees.

  - A node contains 

        - versioned text
        - versioned properties
        - predecessor history:  "which node am I a variant of?"
        - copy history:  "which node am I a copy of?"

    The history values can be non-existent (meaning the node is
    completely new), or can have a value of {revision, path}.


------------------------------------------------------------------------
Refinement of proposal #2:  (after discussion with gstein)
=========================

Start with all RFC822-style headers at the top.  The final header will
be a 'Content-length:', followed by the content.  Thus our record
boundaries can be inferred.

The content section will have two implicit parts: a property hash, and
the fulltext.  The division between these two sections will be implied
by the "END" tag at the end of the prophash.  In the case of a
directory node or a revision, only the prophash will be present in the
content.

-----------------------------------------------------------------

SVN DUMPFILE VERSION 1 FORMAT

  A single revision record is followed by a variable number of node
  records that changed in the revision.  Fields in [braces] are optional.

Revision-number:  N
[Content-checksum:  blob]
Content-length: L

...N bytes of property data, terminated by END.  If no props, then
just the word END.

Node-path: /absolute/path/to/node/in/filesystem
Node-rev: N  (1)
Node-kind:  file | dir
[Node-action: add | delete | replace] (2)
[Copied-from: X, path ]
[Copy-source-checksum: blob] (3) 
[Content-checksum:  blob]
Content-length: Y

... Y bytes of content data, divided into a 'props' and 'text'
section.  The word "END" divides the two sections no matter what:  if
there are no props, then the content begins with "END";  if there is
no text, the content finishes with "END".



Notes:

(1) this value N better be the same N in the last revision record we
    saw, otherwise something is wrong.

(2) the absence of this field implies that we're *modifying* the path,
    that it must already exist in the previous revision.

(3) this is a checksum of the source of the copy.  a loader process
    can use this checksum to determine that the copyfrom path/rev
    already present in a filesystem is really the *correct* one to use.

-----------------------------------------------------------------
EXAMPLE

Here's an example of revision 1422, whereby I added a new directory
"baz", added a new file "bop" inside it, and modified the file "foo.c":


Revision-number: 1422
Content-length: 74

K 6
author
V 7
sussman
K 3
log
V 17
Added two files, changed a third.
END

Node-path: /bar/baz
Node-rev: 1422
Node-kind: dir
Node-action: added
Content-checksum:  oj3eu729
Content-length: 29

K 10
svn:ignore
V 4
TAGS
END

Node-path: /bar/baz/bop
Node-rev: 1422
Node-kind: file
Node-action: added
Content-checksum:  bzz35te7
Content-length: 124

K 12
svn:keywords
V 15
LastChangedDate
K 14
svn:executable
V 2
on
END
Here is the text of the newly added 'bop' file.
Whee.

Node-path: /bar/foo.c
Node-rev: 1422
Node-kind: file
Node-action: added
Content-checksum:  Ae73te7et
Content-length: 105

END
Here is the fulltext of my change to an existing /bar/foo.c.
Notice that this file has no properties.


