   -*- text -*-

Subversion meeting. April 5th, 2001.

Present: Jim Blandy
         Brian Fitzpatrick
         Karl Fogel
         Mike Pilato
         Greg Stein
         Ben Sussman
         Thom Wood


The road to feature-completeness
================================


I. Implementation Questions
---------------------------

A. How does svn_wc_cleanup() get used?  exposed as a user command?

    ANSWER:  yes.  as 'svn cleanup' .... but *not* as an auto-run
    feature before each subcommand.

    ACTION: Karl will do.

B. Filesystem improvements -- just a matter of doing them now:

   ANSWER: 1, 3, and 4 are related. Jim is going to think about them
           and write up a spec by the 15th of April. Mike and Karl are
           going to implement.

    1. need deltified storage of node-revisions in the filesystem
       (representation skels).  checksums too.

       ACTION: Jim will specify. Mike and Karl will implement

    2. svn_fs_dir_delta should use the "copyfrom" args if possible; it
       should know which pieces of an update are already possessed by
       the working copy.  (might be post-1.0)

       ACTION: Mike will do.

    3. file contents are being held entirely in RAM -- on *both*
       client and server sides.  Do real streams.

       ACTION: Jim will specify. Mike and Karl will implement

    4. Move file contents into own table

       ACTION: Jim will specify. Mike and Karl will implement

    5. Merge:  prevent node-rev-id strings from growing absurdly long.

       ACTION: Karl will do.


C. Copy nodes (or props).  We need better history tracking when making
   cheap copies in the fs, else we lose copy history information.

   ANSWER: We will record filesystem copies by setting a property on
           the copy which indicates the revision and path of the
           original. The property will be named svn:copied-from.

D. Auto-detection of text/binary file types.  Use it for keyword
   substitution, line-ending conversion, and merging.

   ANSWER: This will be solved by three separate properties: 
           - mime-type. We will have a heuristic that determines as best it
           can what the mime-type of a file is (of course it will be
           user-configurable).

                [ We should look in the standard locations for mime
                  data on the platforms where it's available;
                  /etc/mime.magic on various Unices, the registry on
                  Win32, etc.                                      --xbc ]

           - Keyword Substitution (BOOL)
           - Newline Translation (BOOL)
           Note that we will always err on the safe side (assume that a file
           is binary and wants no Keyword Substitution or Newline
           Translation if we are not certain about the contents of a file. 

                [ I think it would be better to make these values (a
                  list of) keywords instead of plain switches.

                   - For keyword substitution, you could enable only a
                     subset of the available keywords -- e.g., turn of
                     the infamous $Log: not supported by cvs2svn $.

                   - Newline translation might have the following
                     values:

                   - "none": No translation; default for binary files

                   - "native": Use whatever the client platform's own
                      line separator is; this would be the default for
                      plain text files

                   - "unix", "dos", "mac": force newlines to \n, \r\n
                     or \n\r, respectively; for instance, MSVC's .dsp
                     and .dsw files would need "dos" translation.

                  Also see dev thread
                  Subject: Alphe-checklist comments                --xbc ]


E. Locking issues with the filesystem: mod_dav_svn (as well as
   ra_local) need to observe DB_RUN_RECOVERY errors.

   ACTION: Greg will implement a cross-process reader/writer lock.

H. Change #6:  inverting the text-delta interface.  Should we do it?
 
   Answer: driver will provide editor with a struct that contains a
   "menu" of ways to produce a textdelta... i.e. a pair of filenames,
   and/or a pair of svn_stream_t's, and/or an svn_txdelta_stream.  Let
   the editor select what it wants to use.

   ACTION:  Greg will do this.

I. Greg and Ben think that ra_local should adapt to ra_dav's style of
   committing.

   ACTION: Ben and Greg will talk about this offline. 


II. Missing Features (that are needed to match CVS)
--------------------

A. All client commands need to accept multiple targets.

   ACTION: Fitz and Karl will handle this on the client side and Mike
           will do the server side stuff.

B. Authentication & authorization system.

   We need a security architecture that:
  
      * will take advantage of Apache
      * fits well with the Sourcecast 2.0 framework
      * will still be present even with nothing but ra_local
      * is doable in svn 1.0, providing security as good as cvs.
      * has a consistent user interface for *all* present and future
        authentication mechanisms.

   ACTION: punt on acl's for 1.0. provide authorization via apache
   ANSWER: Authorization for the following pieces:
           Node:
                add historical property
                read historical property
                list historical property
                delete historical property
                add non-historical property
                read non-historical property
                list non-historical property
                delete non-historical property
           File:
                read
                write
                change-regexp (Muhahahahahahaha!)
           Directory:
                add      \
                delete    |---- Change
                change   /
                traverse
        
        ACL := ENTRY
        
        ENTRY := USER|GROUP ":" ACTION
        
        ACTION := add_hist_prop|read_hist_prop|list hist_prop
                  |delete hist_prop|add non-hist_prop|read non-hist_prop
                  |list non-hist_prop|delete non-hist_prop
                  |read|write|change_regexp
                  |add|del|list|traverse
        
        Now that you've read through all that, this is where we say that the
        above is all post-1.0 chattering. For now we will use authorization
        schemes provided by Apache. ACLs are post-1.0. Repeat after me: ACLs...


C. Subcommands that still need to be written:

   svn log, export, diff, rdiff, blame (annotate).

   We are purposely ignoring:  history, edit, watch, editors.

   ACTION: Fitz/Ben/Karl/Mike will do this. So there.

D. How will we present branches and tags to the user?  Show them as
   subdirs, or hide them under a cvs-like interface?

      Answer:  we won't hide the implementation... BUT: we will not
      call them "branches" and "tags".  We'll only talk about "copies"
      instead and try to educate the public this way.

      Answer:  'svn cp' will take 2 args, each can be a local path
      *or* a URL.  This means it may be a checkout or commit in
      disguise.

      Answer:  'svn branch' is a special case of 'svn cp' that munges
      your wc to move to this new location.

      Answer:  'svn tag' is special case of 'svn cp' that interprets
      args slightly differently.

   ACTION: re-explain 4th answer.

   ACTION: Ben and Fitz will write.

E. Hook system. How will we implement?  How will we make them
   available to users?

   Answer:  independent library, which fs callers must call into.
   All cooperative callers of libsvn_fs (mod_dav_svn, ra_local) will
   call pre/post hooks.  The interfaces in the hook layer will be
   very similar to those in svn_fs.h.

   ACTION:  discuss and design specifics.

   ANSWER: gstein proposed that in the case of pre and post-commit
           hooks, we fire off a subprocess and pass it the transaction
           ID.
           
           Hooks are all going to be provided in the libsvn_repos
           library.  Configuration files are not going to *have* to be
           in the repository. They will sit on the server *near* the
           repository, and users *can* put them in the repository.
           

F. Need built-in patch/diff functionality, instead of relying on
   external tools.

   ACTION:  discuss priority.
   ANSWER: Ben will attempt to find the libraries and he will
           integrate them if licenses (and Ben's time) permit.

G. Define M3 to be self-hosting.

   ANSWER: M3 will be client Test suite and self-hosting. "Test suite"
           is defined as follows:
        
           When every command supported by the client is tested
           (edge-cases and all) by the test-suite. Those commands
           include: add, checkout, commit, copy, delete, diff, import,
           merge, propget, propset, status, update, and help.
        

H. Need lots of user docs, and updated technical/design spec too.

   ACTION: get volunteers working on docs.  discuss.
   ANSWER: Karl will resolve this.

III. Better than CVS, and part of 1.0  ("low hanging fruit")
-------------------------------------

A. Commands that make us *better* than CVS, need to be written:

     svn mv, svn cp 
     svn revert, svn rollback
     svn unadd, svn undel
     svn obliterate

   ACTION:  Fitz et al. will write.
   ANSWER: 'obliterate' is post-1.0. For 'merge' we will get CVS style
           merging working for 1.0. Genetic merging and changesets are
           not part of the 1.0 spec (see IV A.) Note that there will
           be no 'svn -j -j'... 'svn merge' will do that.


B. Necessary:  cvs2svn converter (borrowing cvs2cl's code, probably).

   ACTION:  who will write?
   ANSWER: Thom would like to do this. gstein is also interested in
   doing it.

IV.  Post 1.0 stuff
-------------------

   ACTION:  general theoretical discussion on all these topics.
  
A. Genetic merging: solution to the "repeated merge" problem?.
   Start tracking changeset metadata.

   ANSWER: We will try to get this in for 1.0, but only if time and
           sanity permit.

B. i18n/multilingual development.

   ANSWER: Post 1.0, but Jim will provide UTF-8 checking for paths in the
           filesystem for 1.0 to avoid problems in the future. Also, Fitz
           will (time permitting) look into a gettext-like implementation
           that are license compatible.

                [ Just a reminder: the gettext implementation from
                  glibc is LGPL. That licence should be compatible,
                  shouldn't it? In fact, I can get my hands on a
                  stand-alone gettext implementation, based on
                  glibc-2.1 (I think), that's currently being used on
                  Linux, HP-UX and Win32.                          --xbc ]
        
C. GUI clients.

   ANSWER: Deferred

D. Read-only mirrored repositories.

   ANSWER: Deferred

V. Things that came up in the meeting that weren't on the agenda. 
-------------------------------------

A. Fitz and gstein will do a general pool review including documenting
   pool usage in HACKING. in svn_fs.h, the close functions for certain
   objects will go away. Where possible, the pool field will be
   removed from various structures and take a pool from the caller
   (may involve changing arguments, etc).

B. Relevant to the following message:
       Subject: Directory versions in the wc
       Message-Id: <200104031845.OAA06867@egyptian-gods.MIT.EDU>

   Our solution is that if you type 'svn rm foo' and then you commit
   foo and your dir itself is not up to date then the commit succeeds
   and then the entry is left in the entries file indicating that the
   file is left at the new revision created by the commit and in that
   revision, the file is not present. Got it? Good. Karl will take
   care of this.

C. We are going to create a new library called libsvn_repos. We are
   going to put the reporter routines (as well as others in the
   future) from ra_local into there so that gstein can use these in
   mod_DAV_SVN.  fs/editor.c also needs to move into there. fs/delta.c
   needs to move into there too.



 



 

