   -*- text -*-

The road to feature-completeness
================================


I. Implementation Questions
---------------------------

A. How does svn_wc_cleanup() get used?  exposed as a user command?

    Answer:  yes.  as 'svn cleanup' .... but *not* as an auto-run
    feature before each subcommand.

    ACTION: Karl will do.

B. Filesystem improvements -- just a matter of doing them now:

    1. need deltified storage of node-revisions in the filesystem
       (representation skels).  checksums too.

       ACTION: who will do?

    2. svn_fs_dir_delta should use the "copyfrom" args if possible; it
       should know which pieces of an update are already possessed by
       the working copy.  (might be post-1.0)

       ACTION: Mike will do.

    3. file contents are being held entirely in RAM -- on *both*
       client and server sides.  Do real streams.

       ACTION: who will do?

    4. Move file contents into own table

       ACTION: who will do?

    5. Merge:  prevent node-rev-id strings from growing absurdly long.

       ACTION: Karl will do.


C. Copy nodes (or props).  We need better history tracking when making
   cheap copies in the fs, else we lose copy history information.

   ACTION: must discuss.

D. Auto-detection of text/binary file types.  Use it for keyword
   substitution, line-ending conversion, and merging.

   ACTION: discuss the heuristic

E. Locking issues with the filesystem: mod_dav_svn (as well as
   ra_local) need to observe DB_RUN_RECOVERY errors.

   ACTION: discuss now, Greg & Ben implement.

H. Change #6:  inverting the text-delta interface.  Should we do it?
 
   Answer: driver will provide editor with a struct that contains a
   "menu" of ways to produce a textdelta... i.e. a pair of filenames,
   and/or a pair of svn_stream_t's, and/or an svn_txdelta_stream.  Let
   the editor select what it wants to use.

   ACTION:  who will do?

I. Greg and Ben think that ra_local should adapt to ra_dav's style of
   committing.

   ACTION: discuss.


II. Missing Features (that are needed to match CVS)
--------------------

A. All client commands need to accept multiple targets.

   ACTION:  Fitz and Ben/Karl/Mike will do.

B. Authentication & authorization system.

   We need a security architecture that:
  
      * will take advantage of Apache
      * fits well with the Sourcecast 2.0 framework
      * will still be present even with nothing but ra_local
      * is doable in svn 1.0, providing security as good as cvs.
      * has a consistent user interface for *all* present and future
        authentication mechanisms.

   ACTION: discuss.

C. Subcommands that still need to be written:

   svn log, export, diff, rdiff, blame (annotate).

   We are purposely ignoring:  history, edit, watch, editors.

   ACTION: Fitz/Ben/Karl/Mike will do.

D. How will we present branches and tags to the user?  Show them as
   subdirs, or hide them under a cvs-like interface?

      Answer:  we won't hide the implementation... BUT: we will not
      call them "branches" and "tags".  We'll only talk about "copies"
      instead and try to educate the public this way.

      Answer:  'svn cp' will take 2 args, each can be a local path
      *or* a URL.  This means it may be a checkout or commit in
      disguise.

      Answer:  'svn branch' is a special case of 'svn cp' that munges
      your wc to move to this new location.

      Answer:  'svn tag' is special case of 'svn cp' that interprets
      args slightly differently.

   ACTION: re-explain 4th answer.

   ACTION: Ben and Fitz will write.

E. Hook system. How will we implement?  How will we make them
   available to users?

   Answer:  independent library, which fs callers must call into.
   All cooperative callers of libsvn_fs (mod_dav_svn, ra_local) will
   call pre/post hooks.  The interfaces in the hook layer will be
   very similar to those in svn_fs.h.

   ACTION:  discuss and design specifics.

F. Need built-in patch/diff functionality, instead of relying on
   external tools.

   ACTION:  discuss priority.

G. Define M3 to be self-hosting.

H. Need lots of user docs, and updated technical/design spec too.

   ACTION: get volunteers working on docs.  discuss.



III. Better than CVS, and part of 1.0  ("low hanging fruit")
-------------------------------------

A. Commands that make us *better* than CVS, need to be written:

     svn mv, svn cp 
     svn revert, svn rollback
     svn unadd, svn undel
     svn obliterate

   ACTION:  Fitz et al. will write.

B. Necessary:  cvs2svn converter (borrowing cvs2cl's code, probably).

   ACTION:  who will write?


IV.  Post 1.0 stuff
-------------------

ACTION:  general theoretical discussion on all these topics.
  
A. Genetic merging: solution to the "repeated merge" problem?.
   Start tracking changeset metadata.

B. i18n/multilingual development.

C. GUI clients.

D. Read-only mirrored repositories.




 



 

