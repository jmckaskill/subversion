Implementation for "Locking" feature

This document describes proposed implementation details for a new
locking system in Subversion.

I. Introduction

II. Client Implementation

   A. Overview

   B. The "svn:needs-lock" property

      1. Property as enforcement system

      2. Property as communication system

   C. Lock manipulation via client

      1. Lock Tokens

      2. New client subcommands
          
         a. Creating a lock

         b. Using a lock

            1. Using a lock to Commit

            2. Releasing a lock
 
         c. Breaking a lock

         d. Stealing a lock

         e. Discovering/examining locks

            1. seeing lock tokens in a working copy

            2. seeing locks in a repository.

            3.  svn info [wcpath | URL]

            4. 'svn update' behavior



III. Server Implementation

   A. Overview

   B. Tracking locks

      1. Define a lock-token:
 
            UUID
            owner
            creation-date
            expiration-date [optional]

      2. Define a lock-table that maps [fs-path --> lock-token]

          * where does the lock-table live?

         It can't be in libsvn_repos; not unless we force every
         program in the universe to stop using libsvn_fs write-calls,
         and use a slew of new libsvn_repos 'wrapper' functions
         instead.  Not likely.

         Note that while ra_local and svnserve share a commit editor
         in libsvn_repos, mod_dav_svn does not, and can not.
         mod_dav_svn is dealing with a stateless protocol, so it can't
         use something like a commit editor, which is a stateful
         thing.  At best, it keeps the repository 'open' for a whole
         connection and translates each incoming HTTP request
         (originally generated by a client-side commit editor) into
         some direct libsvn_fs write-call on a transaction tree.

         *** Therefore, the lock-table must live in the libsvn_fs
         implementation... it must be implemented for both in BDB and FSFS.


   C.  Lock Enforcement Implementation

      1.  New fs functions for locks:

              svn_fs_lock()       --> adds a row to lock-table
              svn_fs_unlock()     --> deletes a row from lock-table
              svn_fs_get_locks()  --> returns all lock-tokens

            These functions don't do anything special, other than
            allow one to create/release/examine locks.

      2.  Wrap two of the new functions:

              svn_repos_fs_lock()
              svn_repos_fs_unlock()

            Encourage "good citizens" to use these wrappers, since
            they'll invoke the new hook scripts.  As usual, the only
            thing which calls the fs functions directly (and
            circumvents hooks) would be a tool like svnadmin (see
            'svnadmin release' in UI document.)

      3.  libsvn_fs calls that try to change a file must now check the
          lock table before doing so:

              svn_fs_node_prop()
              svn_fs_apply_textdelta()
              svn_fs_apply_text()
              svn_fs_delete()

      4.  When svn_fs_delete() tries to delete a directory, we must
          make sure that no child anywhere "below" the director is
          locked.

            Doing an O(N) search of the directory's contents obviously
            destroys any O(1) "just unlink the node" behavior... but
            there's a compromise.  Like we do in mod_authz_svn, we can
            prefix-compare the directory with every path in the
            locks-table and look for matches. That's generally going
            to be a much smaller, faster operation, on average not
            nearly as bad as an O(N) tree search.

      5.  auto-expiration of locks

            The common code which reads rows from the locks table
            should be implemented in a special way: whenever a lock is
            read, lock expiration should be checked.  If a lock has
            expired, then the lock should be removed, and the caller
            (doing the read operation) should get nothing back.

            As discussed on the list -- the svn_fs_lock() command
            should take an optional argument for the 'expiration-date'
            field.  But this field should *never* be used by anything
            other than mod_dav_svn responding to generic DAV clients.
            We don't want to expose this feature to the svn client.


   D. Configurable Mechanisms

      1. New "pre-" hook scripts

        a. pre-lock

        b. pre-unlock

      2. New "post-" hook scripts

        a. post-lock

        b. post-unlock


   E. Lock manipulation with server tools

      1. 'svnlook listlocks'

      2. 'svnadmin release'

