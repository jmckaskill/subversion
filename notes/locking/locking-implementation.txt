Implementation for "Locking" feature

This document describes proposed implementation details for a new
locking system in Subversion.

I. Introduction

II. Client Implementation

   A. Overview

   B. The "svn:needs-lock" property

      1. Property as enforcement system

      2. Property as communication system

   C. Lock manipulation via client

      1. Lock Tokens

      2. New client subcommands
          
         a. Creating a lock

         b. Using a lock

            1. Using a lock to Commit

            2. Releasing a lock
 
         c. Breaking a lock

         d. Stealing a lock

         e. Discovering/examining locks

            1. seeing lock tokens in a working copy

            2. seeing locks in a repository.

            3.  svn info [wcpath | URL]

            4. 'svn update' behavior



III. Server Implementation

   A. Overview

   B. Tracking locks

      1. Define a lock-token:
 
            UUID
            owner
            creation-date
            expiration-date [optional]

      2. Define a lock-table that maps [fs-path --> lock-token]

         Beware the "deletion problem": if a certain path is locked,
         then no parent directory of that path can be deleted.

         The bad way to solve this problem is to do an O(N) recursive
         search of the directory being deleted, making sure no child
         is locked.

         The good way to solve this problem is to implement the 'lock
         table' as a tree.  When an object is locked, we create the
         locked path in the lock-tree.  Then, the mere existence of a
         directory in the lock-tree means it has at least one locked
         child, and cannot be deleted.  This is a much more acceptable
         O(logN) search.

   C.  OPTION:  how to implement locks in libsvn_fs

          This option implies that both BDB and FSFS would need to
          implement the 'lock tree' in their own way.  Any user of
          libsvn_fs would automatically get lock-enforcement.

      1.  New fs functions for locks:

              svn_fs_lock()       --> locks a file
              svn_fs_unlock()     --> unlocks a file
              svn_fs_get_locks()  --> returns all lock-tokens
              svn_fs_is_locked()  --> discover if a path is locked

            These functions don't do anything special, other than
            allow one to create/release/examine locks.  BDB and FSFS
            need to implement these functions independently.

      2.  Wrap two of the functions in libsvn_repos, to invoke hooks.

              svn_repos_fs_lock()
              svn_repos_fs_unlock()

            As usualy, encourage "good citizens" to use these
            wrappers, since they'll invoke the new hook scripts.  The
            only thing which calls the fs functions directly (and
            circumvents hooks) would be a tool like svnadmin (see
            'svnadmin unlock' in UI document.)

      3.  libsvn_fs calls that try to change a file must now check for
          locks before doing so:

              svn_fs_node_prop()
              svn_fs_apply_textdelta()
              svn_fs_apply_text()
              svn_fs_delete()

      4.  When svn_fs_delete() tries to delete a directory, we must
          make sure that no child (at any depth) within the directory
          is locked.  See III.B.2 for an explanation.

      5.  auto-expiration of locks

          The common code which reads locks should be implemented in a
          special way: whenever a lock is read, lock expiration should
          be checked.  If a lock has expired, then the lock should be
          removed, and the caller (doing the read operation) should
          get nothing back.

          As discussed on the list -- the svn_fs_lock() command should
          take an optional argument for the 'expiration-date' field.
          But this field should *never* be used by anything other than
          mod_dav_svn responding to generic DAV clients.  We don't
          want to expose this feature to the svn client.


   D.  OPTION:  how to implement locks in libsvn_repos

          This option implies that libsvn_repos implements a 'lock
          tree' shareable by all RA layers.  However, to get lock
          enforcement, any user of libsvn_fs must remember to make
          calls into the new libsvn_repos locking API.

      1.  New repos functions for locks:

              svn_repos_lock()       --> locks a file
              svn_repos_unlock()     --> unlocks a file
              svn_repos_get_locks()  --> returns all lock-tokens
              svn_repos_is_locked()  --> discover if a path is locked

            These functions don't do anything special, other than
            allow one to create/release/examine locks.

      2.  Make sure that svn_repos_lock() and svn_repos_unlock() are
          calling hooks.

          There may be certain callers of these functions that
          deliberately want to avoid invoking hooks, such as 'svnadmin
          unlock'.   So these functions should take arguments that
          allow the hooks to be skipped.

      3.  Any process that calls the following libsvn_fs functions
          must first invoke svn_repos_is_locked() to enforce locking:

              svn_fs_node_prop()
              svn_fs_apply_textdelta()
              svn_fs_apply_text()
              svn_fs_delete()

      4.  When svn_fs_delete() is used to delete a directory, the
          caller must first make sure that no child (at any depth)
          within the directory is locked.  See III.B.2 for an
          explanation.

      5.  auto-expiration of locks

          The common code which reads locks should be implemented in a
          special way: whenever a lock is read, lock expiration should
          be checked.  If a lock has expired, then the lock should be
          removed, and the caller (doing the read operation) should
          get nothing back.

          As discussed on the list -- the svn_repos_lock() command should
          take an optional argument for the 'expiration-date' field.
          But this field should *never* be used by anything other than
          mod_dav_svn responding to generic DAV clients.  We don't
          want to expose this feature to the svn client.



   D. Configurable Mechanisms

      1. New "pre-" hook scripts

        a. pre-lock

        b. pre-unlock

      2. New "post-" hook scripts

        a. post-lock

        b. post-unlock


   E. Lock manipulation with server tools

      1. 'svnlook listlocks'

      2. 'svnadmin unlock'

