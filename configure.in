dnl Process this file with autoconf to produce a configure script.

dnl Autoconfiscation for Subversion

dnl General Setup -----------------------

dnl First line is *required*;  sanity-checks that the our src dir exists.
AC_INIT(subversion/include/svn_types.h)
AC_CONFIG_AUX_DIR(ac-helpers)

abs_srcdir="`cd $srcdir && pwd`"
abs_builddir="`pwd`"

dnl $MKDIR is required for configuring apr and neon in a vpath build
MKDIR="$abs_srcdir/apr/build/mkdir.sh"

dnl APR defines a number of useful autoconf macros. grab them.
sinclude(apr/build/apr_common.m4)

dnl Grab our own macros
sinclude(ac-helpers/berkeley-db.m4)
sinclude(ac-helpers/svn-apache.m4)
sinclude(ac-helpers/svn-macros.m4)

dnl Grab the libtool macros
sinclude(ac-helpers/libtool.m4)

dnl Generate config.nice early (before the args are munged)
SVN_CONFIG_NICE(config.nice)

dnl AC_CONFIG_HEADER causes `autoheader' to produce svn_private_config.h.in for us.
dnl   (We can add custom defines by creating ./acconfig.h if we wish.)
AC_CONFIG_HEADER(svn_private_config.h)

dnl Todo: we're English-only now, but GNU Gettext eventually?
dnl Set of available languages.
dnl ALL_LINGUAS="de fr es ko nl no pl pt sl sv"
dnl                 I volunteer for this ^^ translation :-)  -xbc

dnl Sub-package configuration ---------------------

dnl Possibly reconfigure packages in subdirectories
AC_ARG_ENABLE(subdir-config,
  [  --disable-subdir-config  do not reconfigure packages in subdirectories ],
  [ ],
  enable_subdir_config=yes)

dnl Configure APR, and local Berkeley DB if any --------------------------

if test "$enable_subdir_config" = "yes"; then
  APR_SUBDIR_CONFIG(apr)
  if test -d $abs_srcdir/db ; then
      # Note: We have to configure and build a db subdirectory even if
      # some other berkeley db is configured via --with-berkeley-db
      DB_SUBDIR=db/dist
      DB_CONFIG_ARGS=
      APR_SUBDIR_CONFIG($DB_SUBDIR, $DB_CONFIG_ARGS)
  fi
  AC_SUBST(DB_SUBDIR)
fi


dnl Get libraries and thread flags from APR ---------------------

if test -f "$abs_builddir/apr/APRVARS"; then
  . "$abs_builddir/apr/APRVARS"
  CPPFLAGS="$CPPFLAGS $EXTRA_CPPFLAGS"
  CFLAGS="$CFLAGS $EXTRA_CFLAGS"
  LIBS="$LIBS $EXTRA_LIBS"
else
  AC_MSG_ERROR([Must configure APR before Subversion.])
fi

dnl Set include dir and module library lists for Makefiles -----------------

dnl Top level
SVN_INCLUDES='-I$(top_srcdir)/subversion/include -I$(top_builddir)'
AC_SUBST(SVN_INCLUDES)

dnl APR
SVN_APR_INCLUDES=-I'$(top_srcdir)/apr/include'
if test "$abs_srcdir" != "$abs_builddir"; then
  SVN_APR_INCLUDES='-I$(top_builddir)/apr/include '"$SVN_APR_INCLUDES"
fi
AC_SUBST(SVN_APR_INCLUDES)
SVN_APR_LIBS='$(abs_builddir)/apr/libapr.la '"$LIBTOOL_LIBS"
AC_SUBST(SVN_APR_LIBS)

dnl Expat
SVN_EXPAT_INCLUDES='-I$(top_srcdir)/expat-lite'
AC_SUBST(SVN_EXPAT_INCLUDES)

dnl Neon
SVN_NEON_INCLUDES=-'I$(top_srcdir)/neon/src'
AC_SUBST(SVN_NEON_INCLUDES)


dnl Check for programs ---------------------

dnl Look for a C compiler
AC_PROG_CC

dnl See if 'ln -s' works
AC_PROG_LN_S

dnl Check for libtool -- we'll definitely need it for all our shared libs!
echo "configuring libtool now"
AC_PROG_LIBTOOL

dnl Configure neon --------------------------

if test "$enable_subdir_config" = "yes"; then
  # The arguments passed to this configure script are passed down to
  # neon's configure script, but, since neon defaults to *not* building
  # shared libs, and we default to building shared libs, we have to 
  # explicitly pass down an --{enable,disable}-shared argument, to make
  # sure neon does the same as we do.
  if test "$enable_shared" = "yes"; then
     args="--enable-shared"
  else
     args="--disable-shared"
  fi
  APR_SUBDIR_CONFIG(neon, $args --with-expat="$abs_srcdir/expat-lite/libexpat.la")

  AC_MSG_CHECKING([for any extra libraries neon needs])
  # this is not perfect since it will pick up extra -L flags too,
  # but that shouldn't do any real damage.
  NEON_LIBS=`$SHELL $abs_builddir/neon/neon-config --libs | sed -e "s/-lneon//g"`
  AC_MSG_RESULT([$NEON_LIBS])
fi

dnl find Apache
SVN_FIND_APACHE

dnl ### should we ever bother with the system install?
INSTALL="\$(top_srcdir)/apr/build/install.sh -c"
AC_SUBST(INSTALL)

dnl use APR's mkdir to enable creating intervening directories
AC_SUBST(MKDIR)

dnl Check for libraries --------------------

dnl AC_CHECK_LIB() calls go here, if we ever need any

# Build the filesystem library (and repository administration tool)
# only if we have an appropriate version of Berkeley DB.
SVN_FS_WANT_DB_MAJOR=3
SVN_FS_WANT_DB_MINOR=3
SVN_FS_WANT_DB_PATCH=11
SVN_LIB_BERKELEY_DB($SVN_FS_WANT_DB_MAJOR, $SVN_FS_WANT_DB_MINOR,
                    $SVN_FS_WANT_DB_PATCH)

# Only add *_APACHE_RULE if we also have db, since mod_dav_svn depends on it.
INSTALL_RULES="install-lib install-bin install-include"
BUILD_RULES="lib bin test"
if test "$svn_lib_berkeley_db" = "yes"; then
  BUILD_RULES="lib fs-lib bin fs-bin $BUILD_APACHE_RULE test fs-test"
  INSTALL_RULES="install-lib install-fs-lib install-bin install-fs-bin $INSTALL_APACHE_RULE install-include"
  FS_TEST_DEPS="\$(FS_TEST_DEPS)"
  FS_TEST_PROGRAMS="\$(FS_TEST_PROGRAMS)"
fi
AC_SUBST(BUILD_RULES)
AC_SUBST(INSTALL_RULES)
AC_SUBST(FS_TEST_DEPS)
AC_SUBST(FS_TEST_PROGRAMS)
AC_SUBST(SVN_DB_INCLUDES)
AC_SUBST(SVN_DB_LIBS)

AC_DEFINE_UNQUOTED(SVN_FS_WANT_DB_MAJOR, $SVN_FS_WANT_DB_MAJOR,
                   [The desired major version for the Berkeley DB])
AC_DEFINE_UNQUOTED(SVN_FS_WANT_DB_MINOR, $SVN_FS_WANT_DB_MINOR,
                   [The desired minor version for the Berkeley DB])
AC_DEFINE_UNQUOTED(SVN_FS_WANT_DB_PATCH, $SVN_FS_WANT_DB_PATCH,
                   [The desired patch version for the Berkeley DB])

dnl Check for header files ----------------

dnl Standard C headers
AC_HEADER_STDC

dnl Check for typedefs, structures, and compiler characteristics ----------

dnl if compiler doesn't understand `const', then define it empty
AC_C_CONST

dnl if non-existent, define size_t to be `unsigned'
AC_TYPE_SIZE_T


dnl Check for library functions ----------

dnl libsvn_string uses memcmp()
AC_FUNC_MEMCMP

dnl svn_error's default warning handler uses vfprintf()
AC_FUNC_VPRINTF


dnl Process some configuration options ----------

AC_ARG_ENABLE(debug,
[  --enable-debug            Turn on debugging and compile time warnings],
[enable_debugging=yes])

AC_ARG_ENABLE(maintainer-mode,
[  --enable-maintainer-mode  Turn on debugging and very strict compile-time
                          warnings],
[
    enable_debugging=yes
    if test "$GCC" = "yes"; then
      dnl SVN_DEBUG enables specific features for developer builds
      dnl AP_DEBUG enables specific (Apache) features for developer builds
      CFLAGS="$CFLAGS -Wpointer-arith -Wwrite-strings -Wshadow -DSVN_DEBUG -DAP_DEBUG";
    fi
])

if test "$enable_debugging" = "yes"; then
  dnl At the moment, we don't want optimization, because we're
  dnl debugging.
  dnl ### actually, debugging should be fine with the default -O2
  changequote(,)
  CFLAGS="`echo $CFLAGS' ' | sed -e 's/-O[^ ]* //'`"
  changequote([,])
fi


dnl Define the version number
AC_DEFINE(SVN_VERSION, "M3",
        [Define to be the version of Subversion])

dnl Find a version of GNU patch
AC_MSG_CHECKING([for GNU patch])
SVN_CLIENT_PATCH="`${abs_srcdir}/ac-helpers/gnu-patch.sh`"
if test "$SVN_CLIENT_PATCH" = "";  then
  AC_MSG_ERROR([not found

Cannot find a GNU patch program in your PATH.
Please install GNU diff and patch from the GNU diffutils package,
version 2.7 or later.  (ftp://ftp.gnu.org/pub/gnu/diffutils)
])
fi
AC_MSG_RESULT([$SVN_CLIENT_PATCH])
AC_DEFINE_UNQUOTED(SVN_CLIENT_PATCH, "$SVN_CLIENT_PATCH", 
	[Define to be the full path to your GNU patch program])

dnl Find a (non-broken) version of GNU diff
AC_MSG_CHECKING([for non-broken GNU diff])
SVN_CLIENT_DIFF="`${abs_srcdir}/ac-helpers/gnu-diff.sh $SVN_CLIENT_PATCH`"
if test "$SVN_CLIENT_DIFF" = "";  then
  AC_MSG_ERROR([not found

Cannot find an unbroken GNU diff program in your PATH.
Please install GNU diff and patch from the GNU diffutils package,
version 2.7 or later. (ftp://ftp.gnu.org/pub/gnu/diffutils)

(Note that FreeBSD uses a *hacked* version of GNU diff that is unable
to handle certain types of text files.)
])
fi
AC_MSG_RESULT([$SVN_CLIENT_DIFF])
AC_DEFINE_UNQUOTED(SVN_CLIENT_DIFF, "$SVN_CLIENT_DIFF", 
	[Define to be the full path to your GNU diff program])

dnl Since this is used only on Unix-y systems, define the path separator as '/'
AC_DEFINE_UNQUOTED(SVN_PATH_LOCAL_SEPARATOR, '/',
        [Defined to be the path separator used on your local filesystem])

dnl Find a python binary, refer

AC_PATH_PROG(PYTHON2, python2, none)
if test "$PYTHON2" = "none"; then
	AC_PATH_PROG(PYTHON, python, fail-without-python)
else
	PYTHON=$PYTHON2
fi

dnl decide whether we want to link against the RA libraries
if test "$enable_shared" = "no"; then
  AC_DEFINE(SVN_LIBSVN_CLIENT_LINKS_RA_DAV, 1,
        [Defined if libsvn_client should link against libsvn_ra_dav])
  SVN_RA_LIB_DEPS="subversion/libsvn_ra_dav/libsvn_ra_dav.la"
  SVN_RA_LIB_LINK="-L\$(abs_builddir)/subversion/libsvn_ra_dav/.libs -lsvn_ra_dav \
	-L\$(abs_builddir)/neon/src/.libs -lneon $NEON_LIBS"

  if test "$svn_lib_berkeley_db" = "yes"; then
    AC_DEFINE(SVN_LIBSVN_CLIENT_LINKS_RA_LOCAL, 1,
        [Defined if libsvn_client should link against libsvn_ra_local])
    SVN_RA_LIB_DEPS="$SVN_RA_LIB_DEPS subversion/libsvn_ra_local/libsvn_ra_local.la subversion/libsvn_repos/libsvn_repos.la subversion/libsvn_fs/libsvn_fs.la"
    SVN_RA_LIB_LINK="$SVN_RA_LIB_LINK -L\$(abs_builddir)/subversion/libsvn_ra_local/.libs -lsvn_ra_local -L\$(abs_builddir)/subversion/libsvn_repos/.libs -lsvn_repos -L\$(abs_builddir)/subversion/libsvn_fs/.libs -lsvn_fs \$(SVN_DB_LIBS)"
  fi

fi
AC_SUBST(SVN_RA_LIB_DEPS)
AC_SUBST(SVN_RA_LIB_LINK)


dnl Pass some config data ----------------------------

AC_SUBST(abs_builddir)
AC_SUBST(abs_srcdir)

dnl
dnl BSD/OS (BSDi) needs to use a different include syntax in the Makefiles
dnl
case "$host" in
*bsdi*)
    # Check whether they've installed GNU make
    if make --version > /dev/null 2>&1; then 
	INCLUDE_OUTPUTS="include \$(top_srcdir)/build-outputs.mk"
    else
	# BSDi make
	INCLUDE_OUTPUTS=".include \"\$(top_srcdir)/build-outputs.mk\""
    fi
    ;;
*)
    INCLUDE_OUTPUTS="include \$(top_srcdir)/build-outputs.mk"
    ;;
esac
AC_SUBST(INCLUDE_OUTPUTS)

dnl Final step:  create the Makefile ----------------------------

AC_OUTPUT([Makefile])


dnl Create all of the build directories

if test "$abs_srcdir" != "$abs_builddir"; then
    make mkdir-init
fi


dnl  Print warning messages about what we did and didn't configure at the 
dnl  end, where people will actually see them.
case "$svn_lib_berkeley_db" in
  "no" )
    db_version="$SVN_FS_WANT_DB_MAJOR.$SVN_FS_WANT_DB_MINOR.$SVN_FS_WANT_DB_PATCH"
    AC_MSG_WARN([we have configured for a client-only build


The Subversion filesystem library, part of the server, requires
Berkeley DB version $db_version or newer, which you don't seem to have
installed.  We have created makefiles which will build the Subversion
client code only, and skip the server.  You can find latest version of
Berkeley DB at http://www.sleepycat.com/.  You can find the latest
version of Berkeley DB here: http://www.sleepycat.com/download.html

As an option, you may build Berkeley DB directly within the Subversion
source tree. Download and extract the Berkeley distribution, then
rename db-$db_version/ to db/ in the top level of the Subversion
source tree.
])
;;
esac

