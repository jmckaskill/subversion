               ======================================
                      INSTALLING SUBVERSION
                          A Quick Guide
               ======================================

$LastChangedDate$

   ********************************************************************
   ***                                                              ***
   ***  Note: this is PRE-ALPHA code.  Don't use it on real data,   ***
   ***  except for Subversion itself, and that only because hordes  ***
   ***  of selfless volunteers are standing by ready to help you    ***
   ***  if you get yourself in a pickle.                            ***
   ***                                                              ***
   ********************************************************************

I.    BUILD REQUIREMENTS

      Subversion depends on a number of third party tools and libraries.
      If you are bootstrapping from a tarball or an RPM then you will
      already have everything you require to get a Subversion client. So
      long as you don't plan to build a new client from the latest source
      or to build a Subversion server, you can go directly to section
      II.A.

      Otherwise, you need to read the following so that you can determine
      what other tools and libraries will be required so that Subversion
      can be built with the set of features you want.

      The './configure' script will tell you if you are missing the
      correct version of any of the required libraries or tools, so if
      you are in a real hurry to get building, you can skip straight to
      section II. If you want to gather the pieces you will need before
      starting out, however, you should read the following.

      Note: Because previous builds of Subversion may have installed older
      versions of these libraries, you may want to run some of the cleanup
      commands described in section II.B before installing the following.

      1.  Apache Portable Runtime

      Whenever you want to build any part of Subversion, you need the
      Apache Portable Runtime (APR) and the APR Utility (APRUTIL)
      libraries. At the time of this writing, there were no official
      release versions of APR/APRUTIL available.

      If you want Subversion to build the APR libraries from source code
      as part of the Subversion build process, you can put their source
      code into the "./apr" and "./apr-util" directories. The Subversion
      tarball comes with copies of the libraries' source code stored in
      these subdirectories which you could copy or link to. To be safe,
      however, you should check out the latest version from the Apache CVS
      repository, since the latest Subversion may well rely on the latest
      changes to APR and APRUTIL.

      You can get the latest version of APR and APRUTIL with the following
      two commands. If you run them from the directory where you've
      checked out Subversion, then the APR source code will be in "./apr"
      and "./apr-util", where Subversion wants it:

          $ cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic login
          (password: 'anoncvs')

          $ cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic co apr
          $ cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic co apr-util

      If you already have the APR libraries compiled and do not wish to
      regenerate it from source code, then Subversion needs to be
      able to find it.

      There are a couple of options for Subversion to find where the APR
      libraries are. By default, it will look for and use the apr-config
      and apu-config scripts. These scripts provide all the relevant
      information for the APR and APRUTIL installations.

      If you want to specify the location of the APR library, you can use
      the "--with-apr=" option of "./configure". It should be able to find
      the apr-config script in the standard location under that directory
      (e.g. ${prefix}/bin).
      
      Similar, you can specify the location of APRUTIL using the
      "--with-apr-util=" option to "./configure". It will look for the
      apu-config script relative to that directory.

      For example, if you wanted to use the APR libraries you had built
      with the Apache HTTP 2.0 server, you could run:

          $ ./configure --with-apr=/usr/local/apache2 \
	       --with-apr-util=/usr/local/apache2  ...


      2.  autoconf 2.50 or newer

      This is required only if you plan to build from the latest source
      (See section II.B). Generally only developers would be doing this,
      but at this stage in Subversion's development chances are you'll
      want to do this as well.


      3.  libtool 1.4 or newer

      This is required only if you plan to build from the latest source
      (See section II.B), which you probably want to do. See above.


      4.  bison or yacc

      This is required only if you plan to build from the latest source
      (See section II.B), which you probably want to do. See above.

      The reason one of these programs is required is that it will
      generate the code which parses complex date formats, so that
      Subversion can work with dates like "yesterday" and "last month"
      and "four hours ago". Note that most modern Unices come with one
      or the other of these programs, and only one is required.


      5.  Neon library 0.18.2

      The Neon library allows a Subversion client to interact with remote
      repositories over the Internet. Although in theory you could have
      the client interact only with local repositories, currently the
      build system requires Neon to be present. Hopefully, this will be
      fixed in the future.

      The Neon library source code can be installed in "./neon" if you
      want Subversion to build it. The source code is included with the
      latest Subversion tarball, and it can also be obtained from:

          http://www.webdav.org/neon/neon-0.18.2.tar.gz

      Unpack the archive using tar/gunzip and rename the resulting
      directory from "./neon-0.18.2/" to "./neon/".

      Without source code, a previously compiled library can be picked up
      from the standard locations. If you want to specify a nonstandard
      location, you need to use the LDFLAGS environmental variable when
      you run "./configure". You may also have to specify where the
      neon-config script (which identifies various features of the Neon
      library) is kept by giving the "--with-neon=" option to
      "./configure". Note that the script should be kept in a "bin"
      subdirectory beneath whereever "--with-neon" is pointed.


      6.  Berkeley DB 4.0.14

      Berkeley DB is needed to build a Subversion server, or to access
      a repository on local disk.  If you are only interested in
      building a Subversion client that speaks to a remote (networked)
      repository, you don't need it.

      You'll need Berkeley DB 4.0.14 installed on your system.  You can
      get it from http://www.sleepycat.com/.

      If you already have another version of Berkeley DB installed and
      don't want to downgrade, you can unpack the Berkeley 4.0.14
      distribution into a subdir named `db' in the top-level of the
      Subversion source tree.  Then Subversion will ignore the system
      DB and use the one it found in its own source tree.
      Alternatively, you can add this flag

          --with-berkeley-db=/usr/local/BerkeleyDB.4.0

      to your `configure' switches, and the build process will use the
      named Berkeley.  You may need to use a different path, of
      course.


      7.  Apache Web Server 2.0.31 or newer

      The Apache HTTP server is required if you wish to offer your
      Subversion repository over the Internet. Building Subversion, the
      Apache server, and the modules that Apache needs to communicate
      with Subversion are complicated enough that there is a whole
      section at the end of this document that describes how it is
      done. See section III for details.


      8.  Python 2.0

      If you want to run "make check" or build from the latest source
      as described in section II.B, install Python 2.0 or higher on
      your system. The majority of the test suite is written in
      Python, as is part of Subversion's build system.  Get it from
      http://www.python.org/.



II.   INSTALLATION OF SUBVERSION

  A.  BOOTSTRAPPING FROM A TARBALL OR RPM

      In order to get the very latest Subversion source code, you need
      to check it out of a Subversion repository, and therefore you
      first need a Subversion client.


      1.  BOOSTRAPPING FROM TARBALL

      Download the most recent distribution tarball from:

          http://subversion.tigris.org/servlets/ProjectDownloadList

      Unpack it, and use the standard GNU procedure to compile:

          $ ./configure --enable-maintainer-mode --disable-shared
          $ make

      (The first switch to ./configure turns on debugging, and the
       second switch builds a statically-linked client binary.)

      After compiling, you will have a large 'svn' binary sitting in
      the tree.  Use it to check out a real Subversion working copy:

          $ subversion-X.Y/subversion/clients/cmdline/svn checkout \
            http://svn.collab.net/repos/svn/trunk -d svn

          A  svn/dist.sh
          A  svn/buildcheck.sh
          A  svn/HACKING
          ...


      2.  BOOTSTRAPPING FROM RPM

      If you are using Linux (or any OS that can use RPM) then another
      possibility is to download the binary RPM from the
      http://summersoft.fay.ar.us/pub/linux/RPMS/i386 or
      http://summersoft.fay.ar.us/pub/linux/RPMS/ppc directory.

      Currently only Linux on the i386 and ppc platforms are supported
      using this method.  You might also require additional RPMS
      (which can be found in the above mentioned directory) to use the
      subversion RPM depending on what packages you already have installed:

          subversion*.i386.rpm
          apr*.i386.rpm (Version 0.2002.01.19 or greater)
          db*.i386.rpm  (Version 4.0.14 or greater)
          expat         (Comes with RedHat)
          neon          (Version 0.18.2 or greater)

      After downloading, install it (as root user):

          # rpm -ivh subversion*.386.rpm (add other packages as necessary)

      After installing, you can then use the svn command to check out the
      latest source code:

          $ /usr/bin/svn checkout http://svn.collab.net/repos/svn/trunk -d svn
          A  svn/dist.sh
          A  svn/buildcheck.sh
          A  svn/HACKING
          ...

      Note: For an easy way to generate a new version of the RPM
      source and binary package from the latest source code you
      just checked out, see the packages/rpm/README file for a
      one-line build procedure.


  B.  BUILDING THE LATEST SOURCE

      You can discard the directory created by the tarball; you're
      about to build the latest, greatest Subversion client.

      First off, if you have any Subversion libraries lying around
      from previous 'make installs', clean them up first!

          # rm -f /usr/local/lib/libsvn*
          # rm -f /usr/local/lib/libapr*
          # rm -f /usr/local/lib/libexpat*
          # rm -f /usr/local/lib/libneon*

      Start the process by running "autogen.sh":

          $ sh ./autogen.sh

      This script will make sure you have all the necessary components
      available to build Subversion.  If any are missing, you will be
      told where to get them from.  (See the 'Build Requirements' in
      section I.)

      After all components are in place, follow the usual procedure:

          $ ./configure --enable-maintainer-mode --disable-shared
          $ make
          $ make check    (optional)
          # make install

      The flags to `configure' are highly recommended for developers,
      as they build a statically-linked binary.  If you don't use
      those flags, then you must reverse the order of the "make check"
      and "make install" steps, because the shared libraries must be
      installed before "make check" will work.

      Additionally, with shared library builds, the destination
      library directory must be listed in either /etc/ld.so.conf or
      $LD_LIBRARY_PATH (for linux systems), so that Subversion will be
      able to dynamically load repository access plugins.  If you try
      to do a checkout and see an error like:

      svn_error: #21068 : <Bad URL passed to RA layer>
         Unrecognized URL scheme: http://svn.collab.net/repos/svn/trunk

      It probably means that the dynamic loader/linker can't find all
      of the libsvn_* libraries.

      Note that if you commonly build with the -jN option to make, the
      make step above may fail, because we don't ensure that third
      party libraries in our source tree will finish building before
      subversion itself.  If you want to use -jN, use the following
      instead:

          $ ./configure --enable-maintainer-mode --disable-shared
          $ make -jN external-all
          $ make -jN local-all
          $ make check
          # make install


III.  BUILDING A SUBVERSION SERVER

  A.  SETUP APACHE

      (Following the BOOTSTRAPPING FROM RPM procedures above will install and
      build the latest Subversion server for Linux RedHat 7.1, 7.2, and PPC
      Linux systems *IF* the apache-devel-2.0.31 or greater package is already
      installed when the SUBVERSION RPM is built.)


      1.  OBTAINING AND INSTALLING APACHE 2.0

      Checkout the "httpd-2.0" cvs module from apache.org.  If you have
      questions about the Apache 2.0 build, please consult the HTTPD
      install documentation: http://httpd.apache.org/docs-2.0/install.html
      Place this module wherever you wish; it's an independent project.

          $ cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic login
          (password 'anoncvs')

          $ cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic co httpd-2.0

      Checkout the "apr" and "apr-util" modules into the srclib/ directory:

          $ cd httpd-2.0/srclib
          $ cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic co apr
          $ cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic co apr-util

      At the top of the httpd-2.0 tree:

          $ ./buildconf
          $ ./configure --enable-dav --enable-so --prefix=/usr/local/apache2

      The first arg says to build mod_dav.
      The second arg says to enable shared module support which is needed
      for a typical compile of mod_dav_svn (see below).
      The third arg is where you will ultimately install apache.

      Note: if you build Subversion with --enable-maintainer-mode,
      then do the same for Apache. mod_dav_svn uses Apache's
      maintainer-mode stuff from its headers, so you want to ensure
      that Apache is built with the same assumption. Just add
      --enable-maintainer-mode to the configure line above.

      Note: if you have multiple db versions installed on your system,
      Apache might link to a different one than Subversion, causing
      failures when accessing the repository through Apache.  To prevent
      this from happening, you have to tell Apache which db version to
      use and where to find db.  Add --with-dbm=db4 and
      --with-berkeley-db=/usr/local/BerkeleyDB.4.0 to the configure
      line.  Make sure this is the same db as the one Subversion uses.
      This note assumes you have installed Berkeley DB 4.0.14
      at its default locations.  For more info about the db requirement,
      see section I.6.

      All instructions below assume you configured Apache to install
      under /usr/local/apache2/; substitute appropriately if you
      chose some other location.

      Compile and install apache:

          $ make depend && make && make install

      Go back into your subversion working copy and run ./autogen.sh if
      you need to.  Then run:

          $ ./configure --with-apxs=/usr/local/apache2/bin/apxs

      This argument tells subversion to build mod_dav_svn, and where to
      find the required information to do so.

      Note: do *not* configure subversion with "--disable-shared"!
      mod_dav_svn *must* be built as a shared library, and it will
      look for other libsvn_*.so libraries on your system.

      Note: it *is* possible to build mod_dav_svn as a static library
      and link it directly into Apache. Possible, but painful. Stick
      with the shared library for now; if you can't, then ask.

          $ rm /usr/local/lib/libsvn*

      If you have old subversion libraries sitting on your system,
      libtool will link them instead of the `fresh' ones in your tree.
      Remove them before building subversion.

          $ make clean && make && make install

      After the make install, the Subversion shared libraries are in
      /usr/local/lib/.  libmod_dav_svn.so should be installed in
      /usr/local/apache2/modules/.


      2.  CONFIGURING APACHE FOR SUBVERSION

      Add this to the *bottom* of /usr/local/apache2/conf/httpd.conf:

      <Location /svn/repos>
          DAV svn
          SVNPath /absolute/path/to/repository
      </Location>

      This will give anyone unrestricted access to the repository.  If
      you want limited access, read or write, you add these lines to
      the Location block:

          AuthType Basic
          AuthName "Subversion repository"
          AuthUserFile /my/svn/user/passwd/file

      And:

          a) For a read/write restricted repository:

             Require valid-user

          b) For a write restricted repository:

             <LimitExcept GET PROPFIND OPTIONS REPORT>
                 Require valid-user
             </LimitExcept>

          c) For seperate restricted read and write access:

             AuthGroupFile /my/svn/group/file

             <LimitExcept GET PROPFIND OPTIONS REPORT>
                 Require group svn_committers
             </LimitExcept>

             <Limit GET PROPFIND OPTIONS REPORT>
                 Require group svn_committers
                 Require group svn_readers
             </Limit>

      These are only a few simple examples.  For a complete tutorial
      on Apache access contol, please consider taking a look at the
      tutorials found under the "Security" on the following page:
      http://httpd.apache.org/docs-2.0/misc/tutorials.html

      In order for 'svn cp' to work (which is actually implemented as a
      DAV COPY command), mod_dav needs to be able to be able to determine
      the hostname of the server.  A standard way of doing this is to use
      Apache's ServerName directive to set the server's hostname.  Edit
      your /usr/local/apache2/conf/httpd.conf to include:

      ServerName svn.myserver.org

      If you are using virtual hosting through Apache's NameVirtualHost
      directive, you may need to use the ServerAlias directive to specify
      additional names that your server is known by.

      NOTE: If you are unfamiliar with an Apache directive, or not exactly
      sure about what it does, don't hesitate to look it up in the
      documentation: http://httpd.apache.org/docs-2.0/mod/directives.html.

      NOTE: Make sure that the user 'nobody' (or whatever UID the
      httpd process runs as) has permission to read and write the
      Berkeley DB files!  This is a very common problem.


      3.  RUNNING AND TESTING

      Fire up apache 2.0:

          $ /usr/local/apache2/bin/apachectl stop
          $ /usr/local/apache2/bin/apachectl start

      Check /usr/local/apache2/logs/error_log to make sure it started
      up okay.

      Try doing a network checkout from the repository:

          $ svn co http://localhost/svn/repos -d wc

      The most common reason this might fail is permission problems
      reading the repository db files.  If the checkout fails, chmod
      777 and try again.

      You can see all of mod_dav_svn's complaints in the Apache
      error logfile, /usr/local/apache2/logs/error_log.  For more
      information about tracing problems, see "Debugging the server"
      in the HACKING file.

