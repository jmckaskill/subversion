@node Server
@chapter Server

@c Ben is hacking on this.

The @dfn{Subversion server} isn't a simple, monolithic daemon process
like sshd or ftpd; rather, it's a set of well-defined interface layers
that is meant to be flexible and open to future innovations.

However, please remember that after all is said and done, it's
@emph{Apache} that is the actual Subversion server process; all of the
lower layers are simply shared libraries running in Apache's address
space!

In a nutshell:

@enumerate
@item
    Apache receives a Subversion-specific HTTP method request.
@item
    An appropriate Apache module handles the request, and makes calls
    into the "main" Subversion library.
@item
    The "main" library interacts with a particular implementation of the
    versioned filesystem, and returns a response.
@item
    The Apache module converts this response back into an HTTP response
    to be sent to the client.
@end enumerate


To build our concepts cleanly, we'll explore the server-side of
Subversion from the bottom up.  (For full diagram, @xref{Architecture}.)

@example

 +------+-------------+--+---------+-------+ <===== Server interface
 |                                         |                        
 |            Main SVN Library             |                        
 |                                         |                        
 +-----------------------------------------+ <===== Filesystem interface
 |                                         |                            
 |          Subversion Filesystem          |                            
 |                                         |                            
 +-+--------------+--------+---------+-----+                            
   | Berkeley DBM |        |   SQL   |                                  
   +--------------+        +---------+      

@end example

@menu
* Back-ends::                 Putting the information on disk.
* Filesystem::                The low-level Subversion Filesystem.
* Locking::                   How read/write locks work in the Filesystem.
* Main Library::              The highest-level server interface.
* Apache::                    The actual server process.
@end menu

@c ----------------------------------------------------------------

@node Back-ends
@section Back-ends



@c ----------------------------------------------------------------

@node Filesystem
@section Filesystem

Here is a rough draft of the Subversion Filesystem API.

@c  Ben sez:  @table specificially creates a 2-column table.
@c  Ben sez:    first argument is how to format the first column.
@c  Ben sez:    for multiple columns, use @multitable.

@table @code

@item latest ()
 returns the latest global version of the repository

@item read (version, path)
 if path is a file, return full text (which includes property stream);
 if path is a directory, return list of directory entries.

@item read_node_prop (version, path, propname)
@itemx write_node_prop (version, path, propname)
 read/write a particular property of a file or directory

@item read_version_prop (version, propname)
@itemx write_version_prop (version, propname)
 read/write a particular property of a version-history (such as a log)

@item delta (from_version, from_path, to_version, to_path)
 produce a delta object which converts one subtree to another

@item submit (delta)
 ask filesystem's lock manager for approval of delta; returns token (or
failure)

@item write (delta, token)
 actually write the delta into the filesystem 

@item abandon (token)
 tell lock manager that the delta will @emph{not} be written (despite
 previous approval)

@end table

@c ----------------------------------------------------------------

@node Locking
@section Locking


@c ----------------------------------------------------------------

@node Main Library
@section Main Library






