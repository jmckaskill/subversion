@node Protocol
@chapter Protocol

@c  Jim, I guess you realize that most of this is a little too
@c  specifically wrong now.  (Maybe the ideas can still be generalized in
@c  terms of HTTP extensions.)  I've made a xref link to this chapter
@c  from the Architectural overview, out of the subsection that mentions
@c  the workings of the "network layer".  I guess this is the place
@c  where we really need to define our new HTTP methods, and make them
@c  match up to the API in "main" Subversion library.  -Ben

@menu
* Transport::                   
* Common Protocol Conventions::  
* Feature Negotiation::         
* Selecting a Repository::      
@end menu

@node Transport
@section Transport

A Subversion client and server can communicate via any reliable octet
stream.  We haven't settled on the details yet, but we intend to support
both direct TCP connections, with and without authentication, as well as
other methods traditional in the CVS community, like SSH and RSH.


@node Common Protocol Conventions
@section Common Protocol Conventions

This section describes some general conventions and assumptions used in
the description of the protocol.

@menu
* Character Sets::              
* Whitespace::                  
* Octet Strings::               
* Requests and replies::        
@end menu

@node Character Sets
@subsection Character Sets

Protocol requests and replies use the ISO-8859 Latin-1 character set,
using the usual one-character-per-octet encoding, except where the
protocol description explicitly states otherwise.

@node Whitespace
@subsection Whitespace

When the protocol states that @dfn{whitespace} is sent, it means that
the sender must send one or more Latin-1 spaces (octet 32) or tabs
(octet 9).  Where the protocol states that whitespace is permitted, it
means that the sender may send zero or more such characters.

@node Octet Strings
@subsection Octet Strings

Where the protocol states that the client or server sends an @dfn{octet
string}, it means an arbitrary series of octets of a particular length
--- possibly zero.  The sender represents octet strings in one of two
ways:
@itemize @bullet
@item
quoted: a double quote (@samp{"}) character, followed by the octet
series, in which every instance of the octets 34 or 92 (Latin-1 double
quote, @samp{"}, or backslash, @samp{\}) has an octet 92 (backslash)
inserted before it, followed by a terminating double quote character.

@item
length-prefixed: a series of decimal digits, giving the string's length
as a decimal number, followed by whitespace, followed by the octet string
itself, unedited.

@end itemize
Both of these representations can carry arbitrary octet strings ---
including strings containing newlines, control characters, and the like
--- without ambiguity.

The sender is free to choose either representation in any context where
an octet string is called for.  The consumer must be prepared to recieve
and understand either.


@node Bare Strings
@subsection Bare Strings

A @dfn{bare string} is any non-empty sequence of Latin-1 characters
other than space (octet 32), tab (octet 9), or newline (octet 10), that
does not begin with a digit (octets 48-57) or a double quote (octet 34).


@node Requests and replies
@subsection Requests and replies

This document describes each protocol request using the form:

@deffn Request play-me @var{piece} on @var{instrument}
Ask the server to play the client the musical piece @var{piece}, on the
instrument @var{instrument}.  The arguments @var{piece} and
@var{instrument} are both octet strings.
@end deffn

This means that, to send a @code{play-me} request, the client should
send, in order:
@itemize @bullet
@item
the bare string @samp{play-me}, followed by whitespace,
@item
the argument @var{piece}, followed by more whitespace,
@item
the bare string @samp{on}, followed by more whitespace, 
@item
the argument @var{instrument},
@item
and finally a newline (in Latin-1, octet 10).
@end itemize
Whitespace is permitted before the request name (in this case,
@samp{play-me}), and before the final newline.

The syntax of each argument should be explained in the description of
the request.  In the example above, @var{piece} and @var{instrument}
must be sent using one of the representations described above for octet
strings.

If an argument list contains an argument followed by ellipsis
(@samp{@dots{}}), then the request may contain zero or more instances of
the argument, separated by whitespace.

Replies have the same form, except that they're marked as replies:
@deffn Reply play @var{piece} @var{instrument}
Play @var{piece} on @var{instrument}.
@end deffn

All bare strings appearing directly in a request or reply description
are case-insensitive.  Both the client and the server must recognize
them in any mix of upper- and lower-case letters.


@node Feature Negotiation
@section Feature Negotiation

When a connection is first established, the client and server exchange
lists of the replies and requests they understand.  This helps a
participant which speaks a newer version of the protocol to recognize a
peer that understands only an older version, and either accomodate the
older peer, or refuse to communicate with it in some orderly way.

@deffn Request valid-replies @var{reply}@dots{}
Indicate that the client is prepared to understand all of the given
replies.  Each @var{reply} is a bare string, naming a reply.  The server
should never send the client a reply not listed here, other than the
@code{valid-requests} reply used by the feature negotiation itself.

The list of permissible replies sent must include at least the
following:
@table @code
@item error
@item warning
@end table


The server must send a @code{valid-requests} reply in response to this request.
@end deffn

@deffn Reply valid-requests @var{request}@dots{}
Indicate that the server is prepared to understand all of the given
requests.  Each @var{request} is a bare string, naming a request.  The
client should never send the server a request not listed here, other
than the @code{valid-replies} request used by the feature negotiation
itself.

The list of permissible requests sent must include at least the
following:
@table @code
@item auth-schemes 
@item repository
@end table

@end deffn

Since every Subversion connection must begin with the client sending a
@code{replies} request, and the server replying with @code{requests}, in
the case of this request/reply pair alone, it is permitted for the
server to send the @code{requests} reply before the client actually
sends the request.  This avoids a round trip when starting up the
protocol.

@deffn Request auth-schemes @var{scheme} @dots{}
Indicate that the client is prepared to use any of the authentication
schemes listed.  If the client knows that it needs to use a particular
authentication scheme, it may list that scheme alone.

Each @var{scheme} is a bare string.  Valid authentication schemes are
described in @ref{Authentication Schemes}.
@end deffn


@node Selecting a Repository
@section Selecting a Repository

A single host may provide access to several Subversion repositories.
Each Subversion connection has a @dfn{current repository}.  Requests and
replies that refer to particular versions, nodes, or other repository
data apply to the current repository.  When a connection is first
established, the current repository is unset.

Each repository has its own set of users, and its own authentication
policies.  After choosing a repository, the client and server must
perform the appropriate authentication handshakes for that repository.

The client can use the @code{repository} request to select a repository.

@deffn Request repository @var{name}
Select the repository named @var{name}.  @var{name} is an octet string; 
its interpretation is server-specific.

The server replies to this request with either a @code{repository-ok}
reply or an @code{error} reply.
@end deffn

@deffn Reply repository-ok @var{auth-scheme}
This reply indicates that the repository indicated by the @var{name} in
the client's @code{repository} request exists, and tells the server 
@end deffn

@node Authentication Schemes
@section Authentication Schemes

When the client selects a repository, 
