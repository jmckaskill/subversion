@node Client Cookbook
@chapter Client Cookbook

How to make a lovely gumbo with your Subversion client, in 11 easy steps.

This chapter goes into more of the gritty details of client commands.
For a first conversational overview of the the client's CVS-like
``copy-modify-merge'' model of development, @xref{Basics}.

@menu
* Checkout::                    
* Basic Work Cycle::            
* History::                     
* Branches and Tags::           
* Properties::                  
* Modules::                     
* Other Commands::              
@end menu

@c ------------------------------------------------------------------

@node Checkout
@section Checkout

Most of the time, you will start using a Subversion repository by doing
a @dfn{checkout} of your project. "Checking out" will provide you with a
local copy of the HEAD of the Subversion repository that you checked out.

@example
$ svn co http://svn.collab.net/repos/svn/trunk
A  trunk/subversion.dsw
A  trunk/svn_check.dsp
A  trunk/COMMITTERS
A  trunk/configure.in
A  trunk/IDEAS
...
Checked out revision 2499.
@end example

Although the above example checks out the trunk directory, you can just
as easily checkout any deep subdirectory of a repository by specifying
the subdirectory in the checkout URL:

@example
$ svn co http://svn.collab.net/repos/svn/trunk/doc/handbook
A  handbook/svn-handbook.texi
A  handbook/getting_started.texi
A  handbook/outline.txt
A  handbook/license.texi
A  handbook/repos_admin.texi
A  handbook/client.texi
Checked out revision 2499.
$
@end example

Since Subversion uses copy-modify-merge instead of lock-modify-unlock,
you're now ready to start making changes to the files that you've
checked out, known collectively as your @dfn{Working copy}. You can even
delete the entire working copy and forget about it entirely--there's no
need to notify the Subversion server unless you're ready to @dfn{check
in} changes, a new file, or even a directory.

See @command{svn help checkout} for command line options to checkout.


@node Basic Work Cycle
@section Basic Work Cycle

Subversion has numerous features, options, bells and whistles, but on a
day-to-day basis, odds are that you will only use a few of them. In this
chapter we'll run through the most basic things that you might find
yourself doing with Subversion in the course of a day's work.

@subheading Update

When working on a project with a team, you'll want to update to get any
changes from other developers on the project.

@example
$ svn up
U  ./foo.c
U  ./bar.c
Updated to revision 2.
$
@end example

In this case someone else checked in modifications to both foo.c and
bar.c since your last update, and Subversion has updated your working
copy to include those changes.

@subheading Status

Now you're ready to get to work and make changes in your working
copy. It's usually most convenient to commit at logical breaks in your
work--a new feature added or a bug fixed. After making some changes in
your working copy, see what files you've modified by running @command{svn status}

@example
$ svn status
M      ./bar.c
$
@end example

This means that bar.c is the only file that you've modified in your
working copy. You can find out exactly what those changes are by running
@command{svn diff} with no arguments, which prints out the changes (In unified diff format)

@subheading Diff

@example
$ svn diff
Index: ./bar.c
===================================================================
--- ./bar.c
+++ ./bar.c	Mon Jul 15 17:58:18 2002
@@ -1,7 +1,12 @@
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+
+#include <stdio.h>
 
 
 int main(void) @{
-  printf("Sixty-four slices of American Cheese...\n");
+  printf("Sixty-five slices of American Cheese...\n");
   return 0;
 @}
$ 
@end example

So now that you know what your changes are, and that they compile,
update once again to make sure that you're up to date, and check the
changes into the repository.

@subheading Commit

@example
$ svn update
At revision 2.  ## No changes from anyone else--great.
$ svn commit -m "Added include lines and corrected # of cheese slices."
Sending        bar.c
Transmitting file data .
Committed revision 3.
$
@end example

That covers the most basic work cycle for using Subversion. See
@command{svn help <commandname>} help on the update, status, diff, and
commit commands.

@node History
@section History

To find out information about the history of a file or directory, you
use the @command{svn log} command. @command{svn log} will tell you who
made changes to a file and at what revision, the time and date of that
revision, and the log message that accompanied the commit.

@example
$ svn log
------------------------------------------------------------------------
rev 3:  fitz | Mon, 15 Jul 2002 18:03:46 -0500 | 1 line

Added include lines and corrected # of cheese slices.
------------------------------------------------------------------------
rev 2:  someguy | Mon, 15 Jul 2002 17:47:57 -0500 | 1 line

Added main() methods.
------------------------------------------------------------------------
rev 1:  fitz | Mon, 15 Jul 2002 17:40:08 -0500 | 2 lines


Initial import
------------------------------------------------------------------------
@end example

Note that the log messages are printed in reverse chronological order,
and there are numerous options for controlling what output you get. See
@command{svn help log} for command line options to log.

@node Branches and Tags
@section Branches and Tags

Ben, this one's all yours. :)

@node Properties
@section Properties

A Property is a piece of meta data about a file, and using Subversion,
you can attach any bit of data to a file as a property. A property
consists of two parts--a @dfn{key} which identifies the value, and the
@dfn{value} itself. Some examples of properties are:

@example
key:   svn:ignore
value: Makefile
       *.o
       *~
       .*~
key:   svn:executable
value: on
@end example

The first property listed above is usually set on a directory to tell
Subversion which files (or regexps) to ignore when performing actions on
that directory. The second property tells the Subversion client to set
the executable bit on the corresponding file. You can also use
properties to keep arbitrary data for your own purposes.

@example
Ben, what are some good examples, keeping in mind that:
     "Names of user properties should be URI's, to avoid conflicts
     between organizations." from svn-manual.txt
@end example

@subheading Setting a Property's Value

To set a property on file (or directory), use @command{svn propset}.

@example
$ svn propset svn:ignore foo .
property `svn:ignore' set on '.'
$
@end example

Even though you've added a property to '.', you need to commit to send
your changes to the repository. Check your changes using @command{svn status}

@example
$ svn status
_M     .
$
@end example

The 'M' in the 2nd column indicates that you've modified the properties
for '.' @command{svn diff} will even show you what properties have changed:

@example
$ svn diff
Property changes on: .
___________________________________________________________________
Name: svn:ignore
   + foo

$
@end example


@subheading Getting a Property's Value

Once you've set a property, you can get the value by using @command{svn propget}

@example
$ svn propget svn:ignore .
foo
$
@end example

That's about all there is to it.

@subheading Listing Properties

To view the properties on a file or directory, use @command{svn
proplist}. This will list the keys for all the properties, but not the
values.

@example
$ svn proplist .
Properties on '.':
  svn:ignore
$
@end example

@subheading Editing a Property

Subversion provides a great convenience method for editing existing
properties called @command{svn propedit}. When you invoke it, Subversion
will open the value of the property in question in your favorite editor
(or at least the editor that you've defined as $EDITOR in your shell),
and you can edit the value just as you would edit any text file. This is
exceptionally convenient for properties that are a newline separated
array of values, such as 'svn:ignore'.

@command{svn propedit} only changes your working copy, so don't forget
to commit your changes.

@subheading Deleting Properties

Finally, there is @command{svn propdel} for deleting properties.

@example
$ svn propdel silly-mistake .
property `silly-mistake' deleted from '.'.
$
@end example

Like propset and propedit, @command{svn propdel} only changes your
working copy, so don't forget to commit your changes.


That pretty much covers the property commands. Use @command{svn help
<commandname>} help on the propset, propget, proplist, propedit, and
propdel commanads.

@node Modules
@section Modules

@node Other Commands
@section Other Commands

@subheading Add

@subheading Cleanup

@subheading Copy

@subheading Delete

@subheading Export

@subheading Help

@subheading Import

@subheading Info

@subheading Merge

@subheading Make Directory

@subheading Move

@subheading Revert

@subheading Resolve

@subheading Switch
