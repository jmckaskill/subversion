<appendix id="svn-ap-d">
<title>WebDAV and Autoversioning</title>

  <simplesect>

    <para>WebDAV is an extension to HTTP, and is growing more and more
      popular as a standard for file-sharing.  Today's operating
      systems are becoming extremely Web-aware, and many have now
      built-in support for mounting <quote>shares</quote> exported by
      WebDAV servers.</para>

    <para>If you use Apache/mod_dav_svn as your Subversion network
      server, then to some extent, you are also running a WebDAV
      server.  This appendix gives some background on the nature of
      this protocol, how Subversion uses it, and how well Subversion
      interoperates with other software that is WebDAV-aware.</para>

  </simplesect>

  <sect1 id="svn-app-d-sect-1">
    <title>Basic WebDAV Concepts</title> 

    <para>This section provides a very brief, very general overview to
      the ideas behind WebDAV.  It should lay the foundation for
      understanding WebDAV compatibility issues between clients and
      servers.</para>

    <sect2 id="svn-app-d-sect1.1">
      <title>Just Plain WebDAV</title>

      <para>RFC 2518 defines a set of concepts and accompanying
        extension methods to HTTP 1.1 that make the web into a more
        universal read/write medium.  The basic idea is that a
        WebDAV-compliant webserver can act like a generic fileserver;
        clients can mount WebDAV <quote>shares</quote> that behave
        much like NFS or SMB shares.</para>
      
      <para>However, it's important to note that RFC 2518 does
        <emphasis>not</emphasis> provide any sort of model for version
        control, despite the <quote>V</quote> in DAV.  Basic WebDAV
        clients and servers assume only one version of each file or
        directory exists, and can be repeatedly overwritten.
        <footnote><para>For this reason, some people jokingly refer to
        generic WebDAV clients as <quote>WebDA</quote>
        clients!</para></footnote></para>
  
      <para>Here are the new concepts and methods introduced in basic
        WebDAV:</para>

      <variablelist>

        <varlistentry>
          <term>New write methods</term>
          <listitem>
            <para>Beyond the standard HTTP <command>PUT</command>
            method (which creates or overwrites a web resource),
            WebDAV defines new <command>COPY</command> and
            <command>MOVE</command> methods for duplicating or
            rearranging resources.</para>
          </listitem>
        </varlistentry>
                
        <varlistentry>
          <term>Collections</term>
          <listitem>
            <para>This is simply the WebDAV term for a grouping of
              resources (URIs).  In most cases, it is analogous to a
              <quote>directory</quote>.  You can tell something is a
              collection if it ends with a trailing <quote>/</quote>.
              Whereas file resources can be written or created with a
              <command>PUT</command> method, collection resources are
              created with the new <command>MKCOL</command>
              method.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Properties</term>
          <listitem>
            <para>This is same idea present in
              Subversion&mdash;metadata attached to files and
              collections.  A client can list or retrieve properties
              attached to a resource with the new
              <command>PROPFIND</command> method, and can change them
              with the <command>PROPPATCH</command> method.  Some
              properties are wholly created and controlled by users
              (e.g. a property called <quote>color</quote>), and
              others are wholly created and controlled by the WebDAV
              server (e.g. a property that contains the last
              modification time of a file.)  The former kind are
              called <quote>dead</quote> properties, and the latter
              kind are called <quote>live</quote> properties.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term>Locking</term>
          <listitem>
            <para>A WebDAV server may decide to offer a locking
            feature to clients&mdash;this part of the specification is
            optional, although most WebDAV servers do offer the
            feature.  If present, then clients can use the new
            <command>LOCK</command> and <command>UNLOCK</command>
            methods to mediate access to a resource.  In most cases
            these methods are used to create exclusive write locks (as
            discussed in <xref linkend="svn-ch-2-sect-2.2"/>),
            although shared write locks are also possible.</para>
          </listitem>
        </varlistentry>

      </variablelist>

    </sect2>

    <sect2 id="svn-app-d-sect1.2">
      <title>DeltaV extensions</title>
  
      <para>Because RFC 2518 left out versioning concepts, another
        capable group was left with the responsiblity of writing RFC
        3256, which adds versioning to WebDAV.  WebDAV/DeltaV clients
        and servers are often called just <quote>DeltaV</quote>
        clients and servers, since DeltaV implies the existence of
        basic WebDAV.</para>

      <para>DeltaV introduces a whole slew of new acronyms, but don't
        be intimidated.  The ideas are fairly straightforward.  Here
        are the new concepts and methods introduced in DeltaV:</para>

      <variablelist>

      <varlistentry>
        <term>Per-resource versioning</term>
        <listitem>
            <para>
              Like CVS and other version-control systems, DeltaV
              assumes that each resource has a potentially infinite
              number of states.  A client begins by placing a resource
              under version control using the new
              <command>VERSION-CONTROL</command> method.  This creates
              a new Version Controlled Resource (VCR).  Every time you
              change the VCR (via <command>PUT</command>,
              <command>PROPPATCH</command>, etc.), a new state of the
              resource is created, called a Version Resource (VR).
              VCRs and VRs are still ordinary web resources, defined
              by URLs.  Specific VRs can have human-friendly names as
              well.
            </para>
          </listitem>
        </varlistentry>

      <varlistentry>
        <term>Server-side working-copy model</term>
        <listitem>
            <para>Some DeltaV servers support the ability to create a
            virtual <quote>workspace</quote> on the server, where all
            of your work is performed.  Clients use the
            <command>MKWORKSPACE</command> method to create a private
            area, then indicate they want to change specific VCRs by
            <quote>checking them out</quote> into the workspace,
            editing them, and <quote>checking them in</quote> again.
            In HTTP terms, the sequence of methods would be
            <command>CHECKOUT</command>, <command>PUT</command>,
            <command>CHECKIN</command>.  After each
            <command>CHECKIN</command>, a new VR is created, and
            edited VCR's contents now <quote>point to</quote> the
            latest VR.  Each VCR has also has a <quote>history</quote>
            resource xwhich tracks and orders its various VR
            states.</para>
          </listitem>
        </varlistentry>

      <varlistentry>
        <term>Client-side working-copy model</term>
        <listitem>
            <para>Some DeltaV servers also support the idea that the
            client may have a private working copy full of specific
            VRs.  (This is how CVS and Subversion work.)  When the
            client wants to commit changes to the server, it begins by
            creating a temporary server transaction (called an
            activity) with the <command>MKACTIVITY</command> method.
            The client then performs a <command>CHECKOUT</command> on
            each VR it wishes to change, which creates a number of
            temporary <quote>working resources</quote> in the
            activity, which can be modified using
            <command>PUT</command> methods.  Finally, the client
            performs a <command>CHECKIN</command> on each working
            resource, which creates a new VR within each VCR, and the
            entire activity is deleted.</para>
          </listitem>
        </varlistentry>

      <varlistentry>
        <term>Configurations</term>
        <listitem>
            <para>DeltaV allows you define flexible collections of
            VCRs called <quote>configurations</quote>, which don't
            necessarily respond to particular directories.  Each VCR's
            contents can be made to point to a specific VR using the
            <command>UPDATE</command> method.  Once the configuration
            is perfect, the client can create a
            <quote>snapshot</quote> of the whole configuration, called
            a <quote>baseline</quote>.  Clients use the
            <command>CHECKOUT</command> and <command>CHECKIN</command>
            methods to capture specific states of configurations, much
            like they use these methods to create specific VR states
            of VCRs.</para>
          </listitem>
        </varlistentry>

      <varlistentry>
        <term>Extensibility</term>
        <listitem>
            <para>DeltaV defines a new method,
            <command>REPORT</command>, which allows the client and
            server to perform customized data exchanges.  The client
            sends a <command>REPORT</command> request with a
            properly-labeled xml body full of custom data; assuming
            the server understands the specific report-type, it
            responds with an equally custom xml body.  This technique
            is very similar to XML-RPC.</para>
          </listitem>
        </varlistentry>

      <varlistentry>
        <term>Autoversioning</term>
        <listitem>
            <para>For many, this is the <quote>killer</quote> feature
            of DeltaV.  If the DeltaV server supports this feature,
            then basic WebDAV clients (i.e. those unaware of
            versioning) can still write to the server, and the server
            will silently perform versioning anyway.  In simplistic
            terms, a ignorant <command>PUT</command> from a basic
            WebDAV client might be translated by the server as a
            <command>CHECKOUT</command>, <command>PUT</command>,
            <command>CHECKIN</command>.</para>
          </listitem>
        </varlistentry>
        
      </variablelist>
      
    </sect2>

  </sect1>

  <sect1 id="svn-app-d-sect-2">
    <title>Subversion and DeltaV</title> 
    
    <para>So how <quote>compatible</quote> is Subversion with other
      DeltaV software?  In two words: not very.  At least not yet, not
      in Subversion 1.0.</para>
    
    <para>While libsvn_ra_dav sends DeltaV requests to the server, the
      Subversion client is <emphasis>not</emphasis> a general-purpose
      DeltaV client.  In fact, it expects some custom features from
      the server (especially through custom <command>REPORT</command>
      requests).  Further, mod_dav_svn is <emphasis>not</emphasis> a
      general-purpose DeltaV server.  It only implements a strict
      subset of the DeltaV specification.  A more general WebDAV or
      DeltaV client may very well be able to interoperate against it,
      but only if that client operates within the narrow confines of
      those features that the server has implemented.  The Subversion
      development team plans to address general WebDAV
      interoperability in a future release of Subversion.</para>

    <sect2 id="svn-app-d-sect2.1">
      <title>Mapping Subversion to DeltaV</title>
      
      <para>Here is a very <quote>high-level</quote> description of
        how various Subversion client operations use DeltaV.  In many
        cases, these explanations are gross oversimplifications.  They
        should <emphasis>not</emphasis> be taken as a substitute for
        reading Subversion's source code or talking with its
        developers.</para>
      
      <variablelist>
        
        <varlistentry>
          <term>svn checkout/list</term>
          <listitem>
            <para>
              Perform a <command>PROPFIND</command> of depth 1 on the
              collection to get a list of immediate children.  Perform
              a <command>GET</command> (and possibly a
              <command>PROPFIND</command>) on each child.  Recurse
              into collections and repeat.
            </para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term>svn commit</term>
          <listitem>
            <para>
              Create an activity with <command>MKACTIVITY</command>,
              and do a <command>CHECKOUT</command> of each changed
              item, followed by a <command>PUT</command> of new data.
              Finally, a <command>MERGE</command> request causes an
              implicit <command>CHECKIN</command> of all working
              resources.
            </para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term>svn update/switch/status/merge/diff</term>
          <listitem>
            <para>
              Send a custom <command>REPORT</command> request that
              describes the mixed-revision (and mixed-url) state of
              the working copy.  The server sends a custom response
              that describes which items need updating.  The client
              loops over the response, performing
              <command>GET</command> and <command>PROPFIND</command>
              requests as needed.  For updates and switches, install
              the new data in the working copy.  For diff and merge
              commands, compare the data to the working copy, possibly
              applying changes as local modifications.
            </para>
          </listitem>
        </varlistentry>

      </variablelist>
      
    </sect2>
    
    <sect2 id="svn-app-d-sect2.2">
      <title>Autoversioning Support</title>
      
      <para>At the time of writing, the truth is that there are very
        few DeltaV clients in the world; RFC 3256 is still relatively
        new.  However users do have access to <quote>generic</quote>
        clients, because almost every modern operating system now has
        a integrated basic WebDAV client.  With this in mind,
        Subversion developers realized that if Subversion 1.0 was to
        have <emphasis>any</emphasis> interoperability features,
        support for DeltaV autoversioning would be the best
        approach.</para>
      
      <para>To activate autoversioning in mod_dav_svn, use the
        <literal>SVNAutoversioning</literal> directive within the
        <filename>httpd.conf</filename> <literal>Location</literal>
        block, like so:</para>
      
              <screen>
&lt;Location /repos&gt;
  DAV svn
  SVNPath /absolute/path/to/repository
  SVNAutoversioning on
&lt;/Location&gt;
</screen>

      <para>Normally, if a generic WebDAV client attempted a
        <command>PUT</command> to a path within your repository
        location, mod_dav_svn would outright reject the request.  (It
        normally only allows such operations on <quote>working
        resources</quote> within DeltaV <quote>activities</quote>.)
        With <literal>SVNAutoversioning</literal> turned on, however,
        the server interprets the <command>PUT</command> request as an
        internal <command>MKACTIVITY</command>,
        <command>CHECKOUT</command>, <command>PUT</command>, and
        <command>CHECKIN</command>.  A generic log message is
        auto-generated, and a new filesystem revision is
        created.</para>

      <para>Because so many operating systems already have integrated
        WebDAV abilities, the use-case for this feature borders on
        fantastical: imagine an office of ordinary users running
        Microsoft Windows or Mac OS.  Each computer
        <quote>mounts</quote> the Subversion repository, which appears
        to be an ordinary network share.  They use the server as they
        always do:  open files from the server, edit them, and
        save them back to the server.  But in this fantasy, the server
        is automatically versioning everything.  Later on, a sysadmin
        can use a Subversion client to search and retrieve all older
        versions.</para>

      <para>Is this fantasy real?  Not quite.  The main snag is that
        Subversion 1.0 has no support whatsoever for the WebDAV
        <command>LOCK</command> or <command>UNLOCK</command> methods.
        <footnote><para>This is actually quite difficult to
        implement, since Subversion uses the copy-modify-merge model.
        Subversion may someday develop a reserved-checkout locking
        model that can live peaceably with copy-modify-merge, but it
        probably won't happen soon.</para></footnote>.  Most operating
        system DAV clients attempt to <command>LOCK</command> a
        resource opened directly from a DAV-mounted network share.
        For now, users may have to copy a file from the DAV share to
        local disk, edit the file, then copy it back again.  Not ideal
        autoversioning, but still doable.</para>

    </sect2>
    
  </sect1>
  
  <sect1 id="svn-app-d-sect-3">
    <title>Autoversioning Interoperability</title> 

      <para>In this section, we'll describe the various generic WebDAV
        clients out in the world (at the time of writing), and how
        well they operating against a mod_dav_svn server using the
        <literal>SVNAutoversioning</literal> directive.  RFC 2518 is a
        bit large, and perhaps a bit too flexible.  Every WebDAV
        client behaves slightly differently, and creates slightly
        different problems.</para>
        
        <!-- list of subsections goes here. -->

    <sect2 id="svn-app-d-sect-3.1">
      <title>Win32 WebFolders</title>

    </sect2>

    <sect2 id="svn-app-d-sect-3.2">
      <title>Mac OS X</title>

    </sect2>

    <sect2 id="svn-app-d-sect-3.3">
      <title>Unix: Nautilus 2</title>

      <para>Nautilus is the official file manager/browser for the
        GNOME desktop.  Its main home page is at <systemitem
        class="url">http://www.gnome.org/projects/nautilus/</systemitem>.
        By simply typing a WebDAV URL into the Nautilus window,
        the DAV share appears like a local filesystem.</para>

      <para>In general, Nautilus 2 works reasonably well against an
        autoversioning mod_dav_svn, with the following caveats:</para>

      <itemizedlist>

        <listitem>
          <para>As one would expect, a file cannot be opened for
            editing directly from the share, because the
            <command>LOCK</command> request fails.  The file comes up
            as read-only.  The <quote>copy locally, edit, copy
            back</quote> trick does work, however.  Unfortunately,
            Nautilus overwrites the old file by issuing a
            <command>DELETE</command> first, which creates an extra
            revision.</para>
        </listitem>

        <listitem>
          <para>When creating a new file in the share, Nautilus first
            does a <command>PUT</command> of an empty file, then
            overwrites it with a second <command>PUT</command>.  This
            creates two Subversion filesystem revisions, rather than
            one.</para>
        </listitem>

        <listitem>
          <para>When deleting a collection, it issues an HTTP
          <command>DELETE</command> on each individual child instead
          of on the collection itself.  This creates a whole bunch of
          new revisions.</para>
        </listitem>



      </itemizedlist>


    </sect2>

    <sect2 id="svn-app-d-sect-3.4">
      <title>Linux davfs2</title>

      <para>Linux davfs2 is a filesystem module for the Linux kernel,
        whose development is located at <systemitem
        class="url">http://dav.sourceforge.net/</systemitem>.  Once
        installed, a WebDAV network share can be mounted with the
        usual Linux <command>mount</command> command.</para>

      <para>The word on the street is that this DAV client doesn't
        work at all with mod_dav_svn's autoversioning.  Every single
        attempt to write to the server is preceded by a
        <command>LOCK</command> request, which mod_dav_svn doesn't
        support.</para>

    </sect2>


  </sect1>

<!--
      <para>For example, on recent versions of Windows, one of the
        items that appears when you open <literal>My
        Computer</literal> is <literal>Web Folders</literal>.
        Opening that icon will show you list of registered WebDAV
        locations that you can browse further into, as well as an icon
        for adding a new Web Folder.  In fact, if you'd like to see
        how this works, open the <literal>Add Web Folder</literal>
        icon, and register the URL <systemitem
        class="url">http://svn.collab.net/repos/svn/trunk</systemitem>.
        When you've finished, you'll have an icon in your Web Folders
        window that, if opened, will connect you directly to the head
        of Subversion's own development tree.  Imagine
        that&mdash;bleeding edge Subversion code that you can copy and
        paste right off the server and onto your local drive!</para>

-->


</appendix>

<!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->
