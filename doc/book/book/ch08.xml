<!-- This is currently being roughed out.  Suggestions and comments
are more than welcome, but patches are probably a bit premature at
this point. -->
<chapter id="svn-ch-8">
  <title>Subversion Complete Reference</title>
  
  <simplesect>
    <para>This chapter is intended to be a complete reference to using
      Subversion. This includes the command line client
      (<command>svn</command>) and all its commands, repository
      administration programs (<command>svnadmin</command> and
      <command>svnlook</command>) and their respective commands,
      repository configuration files, commit hooks, client
      configuration files, and working copy administrative areas.
    </para>
  </simplesect>
  
  
  <!-- ================================================================= -->
  <!-- ======================== SECTION 1 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-8-sect-1">
    <title>The Subversion Command Line Client:
      <command>svn</command></title>
    
    <para>To use the command line client, you type
      <command>svn</command>, the subcommand you wish to use,
      <footnote><para>Yes, yes, you don't need a subcommand to use the
      <option>--version</option> switch, but we'll get to that in just
      a minute.</para> </footnote> and any switches or targets that
      you wish to operate on.  You should note that there is no
      specific order that the subcommand and the switches must appear
      in (the targets, however, are always last in the command line).
      For example, all of the following are valid ways to use
      <command>svn status</command>:</para>

    <screen>
$ svn -v status
$ svn status -v 
$ svn status -v myfile
    </screen>

    <para>You can find many more examples of how to use most client
      commands, in <xref linkend="svn-ch-3"/>, commands for managing
      properties in <xref linkend="svn-ch-6-sect-2"/></para>
    
    <sect2 id="svn-ch-8-sect-1.1">
      <title>Switches</title> 
      
      <para>While Subversion has different switches for its
        subcommands, all switches are global&mdash;that is, each
        switch is guaranteed to mean the same thing regardless of
        the subcommand you use it with.  For example,
        <option>--verbose</option> (<option>-v</option>) always
        means <quote>verbose output</quote>, regardless of the
        subcommand you use it with.</para>
      
<!-- ###TODO remove *any* command specific stuff and put it in that command. -->
      <variablelist>
        
        <varlistentry>
          <term><option>--dry-run</option></term>
          <listitem>
            <para>Go through all the motions of running a command,
              but make no actual changes&mdash;either on disk or in
              the repository. </para>
          </listitem>
        </varlistentry>
      
        <varlistentry>
          <term><option>--file</option>
            <replaceable>FILENAME</replaceable>
            (<option>-f</option>)</term>
          <listitem>
            <para>Use the contents of the file passed as an argument
              to this switch as a commit message for the subcommand
              that you're running.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--encoding</option><replaceable>ENC</replaceable></term>
          <listitem>
            <para>Tells Subversion that your commit message is
              encoded in the charset provided.  The default is UTF8,
              and you should specify the encoding if your commit
              message is in any other encoding.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--extensions</option><replaceable>"ARGS"</replaceable></term>
          <listitem>
            <para>Specifies an argument or arguments that Subversion
              should pass to GNU diff when providing diffs.  Note
              that if you wish to pass multiple arguments, you must
              enclose all of them in quotes.  For example,
              <command>svn diff -x "-b -E"</command>.  Note also
              that Subversion will display unified diffs by default,
              so if you want default diff output, you can pass the
              <option>--normal</option> switch to diff
              (e.g. <command>svn diff -x "--normal"</command>.
              </para>
          </listitem>
        </varlistentry>
      
        <varlistentry>
          <term><option>--force</option></term>
          <listitem>
            <para>Forces a particular command or operation to run.
              There are some operations that Subversion will prevent
              you from doing in normal usage, but you can pass the
              force switch to tell Subversion <quote>I know what I'm
              doing as well as the possible repercussions of doing
              it, so let me at 'em.</quote>. This switch is the
              programmatic equivalent of doing your own electrical
              work with the power on&mdash;if you don't know what
              you're doing, you're likely to get a shock.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--help</option> (<option>-h or -?</option>)</term>
          <listitem>
            <para>Shows the built in help text for a subcommand (if
              used with a subcommand), or the general client help if
              used alone.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--incremental</option></term>
          <listitem>
            <para>Prints output in a format suitable for
              concatenation.  For example, <command>svn
              log</command> normally prints out a dashed line at the
              beginning of a log message, after each subsequent log
              message, and following the final log message.  If you
              ran svn log on a range of two revisions, you would get
              this:</para>
<!-- ###TODO move this to svn log's section. -->
            <screen>
$ svn log -r 14:15
------------------------------------------------------------------------
rev 14: ...

------------------------------------------------------------------------
rev 15: ...

------------------------------------------------------------------------
            </screen>

            <para>However, if you wanted to gather 2 non-sequential
              log messages into a file, you might do something like
              this:</para>

            <screen>
$ svn log -r 14 > mylog
$ svn log -r 19 >> mylog
$ svn log -r 27 >> mylog
$ cat mylog
------------------------------------------------------------------------
rev 14: ...

------------------------------------------------------------------------
------------------------------------------------------------------------
rev 19: ...

------------------------------------------------------------------------
------------------------------------------------------------------------
rev 27: ...

------------------------------------------------------------------------
            </screen>

            <para>Note the double dashed lines that you get in your
            output. You can avoid this clutter by using the
            incremental switch:</para>


            <screen>
$ svn log --incremental -r 14 > mylog
$ svn log --incremental -r 19 >> mylog
$ svn log --incremental -r 27 >> mylog
$ cat mylog
------------------------------------------------------------------------
rev 14: ...

------------------------------------------------------------------------
rev 19: ...

------------------------------------------------------------------------
rev 27: ...
              </screen>

            <para>Note that the incremental switch does provides
              similar output control when using the
              <option>--xml</option> switch.</para>
            
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--message</option>
            <replaceable>MESSAGE</replaceable>
            (<option>-m</option>)</term>
          <listitem>
            <para>Indicates that you will specify a commit message
              on the command line, following this switch. For
              example:</para>
            
            <para><command>$ svn checkin -m "Initial
                import."</command></para>
          </listitem>
        </varlistentry>
      
        <varlistentry>
          <term><option>--no-auth-cache</option></term>
          <listitem>
            <para>Do not cache authentication information
              (e.g. username and password) in the Subversion
              administrative directories.</para>
          </listitem>
        </varlistentry>
      
        <varlistentry>
          <term><option>--no-diff-deleted</option></term>
        <listitem>
            <para>Prevents Subversion from printing differences for
              deleted files.  The default behavior when you remove a
              file is for <command>svn diff</command> to print the
              same differences that you would see if you had left
              the file but removed all the content.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--no-ignore</option></term>
          <listitem>
            <para>Shows files in the status listing that would
              normally be omitted since they match a pattern in the
              svn:ignore property.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--non-interactive</option></term>
          <listitem>
            <para>In the case of an authentication failure, or
            insufficient credentials, do not prompt for credentials
            (e.g. username or password).  This is useful if you're
            running Subversion inside of an automated script and
            it's more appropriate to have Subversion fail then to
            prompt for more information.</para>
          </listitem>
        </varlistentry>
      
        <varlistentry>
          <term><option>--non-recursive</option> (<option>-N</option>)</term>
          <listitem>
            <para>Stops a subcommand from recursing into
              subdirectories.  Note that some subcommands do not
              recurse by default, while others do.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
        <term><option>--password</option><replaceable>PASS</replaceable></term>
          <listitem>
            <para>Indicates that you are providing your password for
              authentication on the command line&mdash;otherwise, if
              it is needed, Subversion will prompt you for
              it.</para>
          </listitem>
        </varlistentry>
      
        <varlistentry>
          <term><option>--quiet</option> (<option>-q</option>)</term>
          <listitem>
            <para>Requests that the client print only essential
              information while performing an operation.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--recursive</option> (<option>-R</option>)</term>
          <listitem>
            <para>Makes a subcommand to recurse into subdirectories.
              Note that some subcommands recurse by default, while
              others don't.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--revision</option>
            <replaceable>REV</replaceable>
            (<option>-r</option>)</term>
          <listitem>
            <para>The revision flag indicates that you're going to
              supply a revision (or range of revisions) for a
              particular operation.  You can provide revision
              numbers, revision keywords, or dates (in curly
              braces), as arguments to the revision switch.  If you
              wish to provide a range of revisions, you can provide
              two revisions separated by a colon. For example:</para>

            <screen>
$ svn checkout -r 1729
$ svn checkout -r 1729:HEAD
$ svn checkout -r 1729:1744
$ svn checkout -r {12/04/02}:{2/17/02}
$ svn checkout -r 1729:{2/17/02}
            </screen>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--revprop</option></term>
          <listitem>
            <para>Operate on a revision property instead of a
              regular Subversion property.  This switch requires
              that you also pass a revision with the
              <option>--revision</option> (<option>-r</option>)
              switch.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--show-updates</option></term>
          <listitem>
            <para>Causes the client to make a roundtrip to the
              server to retrieve and display information about which
              files in your working copy are out-of-date.  This
              doesn't actually update any of your files&mdash;it
              just shows you which files will be updated if you run
              <command>svn update </command>.
            </para>
          </listitem>
        </varlistentry>
      
        <varlistentry>
          <term><option>--strict</option></term>
          <listitem>
            <para>Use strict semantics.  See <xref
                linkend="svn-ch-8"/><!-- ###TODO fix link --> for more
                details </para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--targets</option>
            <replaceable>FILENAME</replaceable></term>
          <listitem>
            <para>You can use the targets switch to tell Subversion to
              get the list of files that you wish to operate on from
              the filename you provide instead of listing all the
              files on the command line.
            </para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--username</option><replaceable>NAME</replaceable></term>
          <listitem>
            <para>Indicates that you are providing your username for
              authentication on the command line&mdash;otherwise, if
              it is needed, Subversion will prompt you for
              it.</para>
          </listitem>
        </varlistentry>
      
        <varlistentry>
          <term><option>--verbose</option></term>
          <listitem>
            <para>Requests that the client print out as much
              information as it can while running any subcommand.
              This may result in Subversion printing out additional
              fields, detailed information about every file, or
              additional information regarding its actions.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--version</option></term>
          <listitem>
            <para>Prints the client version info.  This information
              not only includes the version number of the client,
              but als a listing of all repository access modules
              that the client can use to access a Subversion
              repository.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><option>--xml</option></term>
          <listitem>
            <para>Prints <command>svn log</command> output in xml
              format.</para>
          </listitem>
        </varlistentry>
        
      </variablelist>

    </sect2>
    
      <sect2 id="svn-ch-8-sect-1.2">
        <title><command>svn subcommands</command></title>

        <warning>
          <para>This is all done in preformatted text until I hear
            back from O'Reilly how they want it formatted.  Please be
            patient and pardon the construction dust. -Fitz</para>
        </warning>

<screen>      

The basis for this is the results of svn help for each subcommand.
The goal is to coordinate it and add examples for every subcommmand.

###TODO Stopped at import
  
============================================================
svn add

svn add PATH [PATH [PATH ... ]]

Adds files and directories to your working copy and schedules them for
addition to the repository.  They will be uploaded and added to the
repository on your next commit.  If you add something and change your
mind before committing, you can unschedule the addition using
<command>svn revert</command>.


Alternate names: None
Changes: Working Copy
Needs Network: No
Switches:
--targets FILENAME
--non-recursive (-N)
--quiet (-q)

Examples

To add a file to your working copy:

$ svn add foo.c 
A         foo.c

When adding a directory, the default behavior of svn add is to recurse:

$ svn add testdir
A         testdir
A         testdir/a
A         testdir/b
A         testdir/c
A         testdir/d

You can add a directory without adding its contents:

$ svn add --non-recursive otherdir
A         otherdir

============================================================
svn cat

svn cat TARGET [TARGET [TARGET ... ]]

Outputs the contents of the specified files or URLs.  For listing the
contents of directories, see svn ls

Alternate names: None
Changes: Nothing
Needs Network: Yes
Switches:
--revision (-r) REV
--username USER
--password PASS

Examples

If you want to view readme.txt in your repository without checking it out:

$ svn cat http://svn.red-bean.com/repos/test/readme.txt
This is a README file.
You should read this.

============================================================

svn checkout

svn checkout URL [URL [URL ... ]] [PATH]

Checks out a working copy from a repository. If
<replaceable>PATH</replaceable> is omitted, the basename of the URL
will be used as the destination. If multiple URLs are given each will
be checked out into a sub-directory of PATH, with the name of the
sub-directory being the basename of the URL.

Alternate names: co
Changes: Creates a working copy.
Needs Network:
Switches:
--revision (-r) REV
--quiet (-q)
--non-recursive (-N)
--username USER
--password PASS
--no-auth-cache
--non-interactive

Examples

Check out a working copy into a directory called 'mine':

$ svn checkout file:///tmp/repos/test mine
A  mine/a
A  mine/b
Checked out revision 2.
$ ls
mine

Check out 2 different directories into two separate working copies:

$ svn checkout file:///tmp/repos/test  file:///tmp/repos/quiz
A  test/a
A  test/b
Checked out revision 2.
A  quiz/l
A  quiz/m
Checked out revision 2.
$ ls
quiz  test

Check out 2 different directories into two separate working copies,
but place both into a directory called 'working copies':

$ svn checkout file:///tmp/repos/test  file:///tmp/repos/quiz working-copies
A  working-copies/test/a
A  working-copies/test/b
Checked out revision 2.
A  working-copies/quiz/l
A  working-copies/quiz/m
Checked out revision 2.
$ ls
working-copies

============================================================

svn cleanup

svn cleanup [PATH [PATH ... ]]

Recursively clean up the working copy, removing locks resuming
unfinished operations.  If you ever get a <quote>working copy
locked</quote> error, run this command to remove stale locks and get
your working copy into a useable state again.

Alternate names: None
Changes: Working copy
Needs Network: No
Switches: None

Examples

Well, there's not much to the examples here as svn cleanup generates
no output.  If you pass no PATH, '.' is used.

$ svn cleanup

$ svn cleanup /path/to/working-copy

============================================================

svn commit

svn commit [PATH [PATH ... ]]

Be sure to use one of -m or -F to send a log message.

Alternate names: ci
Changes: working copy, repository
Needs Network: Yes
Switches:
--message (-m) TEXT
--file (-F) FILE
--quiet (-q)
--non-recursive (-N)
--targets FILENAME
--force
--username USER
--password PASS
--no-auth-cache
--non-interactive
--encoding ENC

Examples

Commit a simple modification to a file with the commit message on the cmdline:

$ svn commit -m "added howto section."
Sending        a
Transmitting file data .
Committed revision 3.

Commit a modification to a file with the commit message in a file:

$ svn commit -F msg foo.c
Sending        foo.c
Transmitting file data .
Committed revision 5.

Note that if you want to use a files that's under version control for
your commit message with -F, you need to pass the --force switch:

$ svn commit -F file_under_vc.txt foo.c
Sending        foo.c
Transmitting file data .
Committed revision 6.

Commit a deleted a file:

svn commit -m "removed file 'c'."
Deleting       c

Committed revision 7.



============================================================
svn copy

svn copy SRC DST

SRC and DST can each be either a working copy (WC) path or URL:
WC  -&gt; WC:   copy and schedule for addition (with history)
WC  -&gt; URL:  immediately commit a copy of WC to URL
URL -&gt; WC:   check out URL into WC, schedule for addition
URL -&gt; URL:  complete server-side copy;  used to branch &amp; tag


Alternate names: cp
Changes: Repository, and working copy if operating on files 
Needs Network: Yes
Switches:
--message (-m) TEXT
--file (-F) FILE
--revision (-r) REV
--quiet (-q)
--username USER
--password PASS
--no-auth-cache
--non-interactive
--encoding ENC

Examples

Copy an item within your working copy (Just schedules the
copy--nothing goes into the repository until you commit):

$ svn cp a b
$

Copy an item in your working copy to a URL in the repository (an
immediate commit, so you must supply a commit message):

$ svn cp a file:///tmp/repos/test/far-away -m "Remote copy."

Committed revision 8.

Copy an item from the repository to your working copy (Just schedules
the copy--nothing goes into the repository until you commit):

$ svn cp file:///tmp/repos/test/far-away near-here
A         near-here

And finally, copying between two URLs:

$ svn cp file:///tmp/repos/test/far-away file:///tmp/repos/test/over-there -m "remote copy."

Committed revision 9.

(Note: This is the easiest way to 'tag' a revision in your
repository--just svn copy that revision (usually HEAD) into your tags
directory).  

$ svn cp file:///tmp/repos/test/trunk file:///tmp/repos/test/tags/0.6.32-prerelease -m "tag tree"

Committed revision 12.

And don't worry if you forgot to tag--you can always specify an older revision and tag anytime:

$ svn cp -r 11 file:///tmp/repos/test/trunk file:///tmp/repos/test/tags/0.6.32-prerelease -m "Forgot to tag at rev 11"

Committed revision 13.

============================================================

svn delete 

svn delete [TARGET [TARGET ... ]]

If run on a working copy TARGET, the item is scheduled for deletion
upon the next commit.  Files, and directories that have not been
committed, are immediately removed from the working copy.  The command
will not remove TARGETs that are, or contain, unversioned or modified
items; use the --force option to override this behaviour.

If run on an URL, the item is deleted from the repository via an
immediate commit.

Alternate names: del, remove, rm
Changes: Working copy if operating on files, Repository if operating on URLs
Needs Network: Only if operating on URLs
Switches:
--force
--message (-m) TEXT
--file (-F) FILE
--quiet (-q)
--targets FILENAME
--username USER
--password PASS
--no-auth-cache
--non-interactive
--encoding ENC

Examples

Deleting a file from your working copy merely schedules it for
deletion. When you commit, the file is deleted in the repository.

$ svn delete myfile
D         d

$ svn ci -m "Deleted file 'myfile'."
Deleting       myfile
Transmitting file data .
Committed revision 14.

Deleting a URL, however, is immediate, so you have to supply a log message:

# svn delete -m "Deleting file 'yourfile'" file:///tmp/repos/test/yourfile

Committed revision 15.

Here's an example of how to force delete a file that has local mods:

$ svn delete over-there 
subversion/clients/cmdline/delete-cmd.c:47: (apr_err=195006)
svn: Attempting restricted operation for modified resource
svn: Use --force to override this restriction
subversion/libsvn_client/delete.c:90: (apr_err=195006)
svn: 'over-there' has local modifications

$ svn delete --force over-there 
D         over-there

============================================================

svn diff

svn diff [-r N[:M]] [TARGET [TARGET ... ]]
svn diff URL1[@N] URL2[@M]

1. Each TARGET can be either a working copy path or URL.  If no
   TARGET is specified, a value of '.' is assumed.

   If TARGET is a URL, then revs N and M must be given via -r.

   If TARGET is a working copy path, then -r switch means:
     -r N:M  : server compares TARGET@N and TARGET@M,
     -r N    : client compares TARGET@N against working copy
     (no -r) : client compares base and working copies of TARGET

2. If the alternate syntax is used, the server compares URL1 and URL2
   at revisions N and M respectively.  If either N or M are ommitted,
   a value of HEAD is assumed.


Alternate names: di
Changes: Nothing
Needs Network: For diffs against anything but BASE revision in your working copy
Switches:
--revision (-r) REV
--extensions (-x) "ARGS"
--non-recursive (-N)
--username USER
--password PASS
--no-auth-cache
--non-interactive
--no-diff-deleted

Examples


   If TARGET is a working copy path, then -r switch means:
     -r N:M  : server compares TARGET@N and TARGET@M,
     -r N    : client compares TARGET@N against working copy
     (no -r) : client compares base and working copies of TARGET


Compare BASE and your working copy (One of the most popular uses of
svn diff):

$ svn diff COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 4404)
+++ COMMITTERS	(working copy)

See how your working copy's modifications compare against an older revision:

$ svn diff -r 3900 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3900)
+++ COMMITTERS	(working copy)

Compare revision 3000 to revision 3500 using '@' syntax:

$ svn diff http://svn.collab.net/repos/svn/trunk/COMMITTERS@3000 http://svn.collab.net/repos/svn/trunk/COMMITTERS@3500
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)
...

Compare revision 3000 to revision 3500 using range notation (note that
you only pass the one URL in this case):

$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk/COMMITTERS
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)

If you have a working copy, you can do the diffs without typing in the long URLs:

$ svn diff -r 3000:3500 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)

Use -x to pass arguments directly to the external diff program

svn diff -x "-i -b" COMMITTERS 
Index: COMMITTERS
===================================================================
0a1,2
&gt; This is a test
&gt; 

============================================================

svn export

svn export [-r REV] URL [PATH]
svn export PATH1 PATH2

The first exports a clean directory tree from the repository specified by
URL, at revision REV if it is given, otherwise at HEAD, into 
PATH. If PATH is omitted, the last component of the URL is used
for the local directory name.

The second exports a clean directory tree from the working copy
specified by PATH1 into PATH2.  all local changes will be preserved,
but files not under revision control will not be copied.

Alternate names: None
Changes: local disk
Needs Network: Only if exporting from a URL
Switches:
--revision (-r) REV
--quiet (-q)
--username USER
--password PASS
--no-auth-cache
--non-interactive

Examples

Export from your working copy (doesn't print every file/dir):

$ svn export a-wc my-export
pantheon: /tmp&gt;

Export directly from the repository (prints every file/dir):

$ svn export file:///tmp/repos my-export
A  my-export/test
A  my-export/quiz
...
Exported revision 15.

============================================================

svn help

svn help [SUBCOMMAND [SUBCOMMAND ... ]]

This is your best friend when you're using Subversion and this book
isn't within reach!

Alternate names: ?, h
Changes: Nothing
Needs Network: No
Switches:
--version
--quiet (-q)

============================================================

svn import

svn import URL [PATH] [NEW_ENTRY_IN_REPOS]

Recursively commit a copy of PATH to URL.  If no 3rd arg, copy
top-level contents of PATH into URL directly.  Otherwise, create
NEW_ENTRY underneath URL and begin copy there.

Alternate names: None
Changes: Repository
Needs Network: Yes
Switches:
--message (-m) TEXT
--file (-F) FILE
--quiet (-q)
--non-recursive (-N)
--username USER
--password PASS
--no-auth-cache
--non-interactive
--encoding ENC

Examples

Import local directory 'myproj' into the root of your repository:

$ svn import -m "New import" http://svn.red-bean.com/repos/test myproj
Adding         myproj/sample.txt
...
Transmitting file data .........
Committed revision 16.

Import local directory 'myproj' into 'trunk/vendors' in your
repository.  Note that the directory 'trunk/vendors' must exist before
you import into it--svn import will not recursively create directories
for you:

$ svn import -m "New import" http://svn.red-bean.com/repos/test myproj trunk/vendors/myproj
Adding         myproj/sample.txt
...
Transmitting file data .........
Committed revision 19.

============================================================

svn info

svn info [PATH [PATH ... ]]

Print information about PATHs.

Alternate names: None
Changes: Nothing
Needs Network: No
Switches:
--targets FILENAME
--recursive (-R)

Examples

============================================================

svn list

svn list URL [URL ... ]

If URL is a file, just file entry will be displayed.


Alternate names: ls
Changes: Nothing
Needs Network: Yes
Switches:
--revision (-r) REV
--verbose (-v)
--recursive (-R)
--username USER
--password PASS
--no-auth-cache
--non-interactive

Examples

============================================================

svn log

svn log [URL] [PATH [PATH ... ]]

Print the log messages for local PATHs, or for PATHs under
URL, if URL is given.  If URL is given by itself, then print log
messages for everything under it.  With -v, also print all affected
paths with each log message.  With -q, don't print the log message
body itself (note that this is compatible with -v).

Each log message is printed just once, even if more than one of the
affected paths for that revision were explicitly requested.  Logs
cross copy history by default; use --strict to disable this.
For example:

svn log
svn log foo.c
svn log http://www.example.com/repo/project/foo.c
svn log http://www.example.com/repo/project foo.c bar.c

Alternate names: None
Changes: Nothing
Needs Network: Yes
Switches:
--revision (-r) REV
--quiet (-q)
--verbose (-v)
--targets FILENAME
--username USER
--password PASS
--no-auth-cache
--non-interactive
--strict
--incremental
--xml

Examples

============================================================

svn merge
svn merge URL1[@N] URL2[@M] [PATH]
svn merge -r N:M TARGET [PATH]

In the first form, URL1 and URL2 are URLs specified at revisions N and
M.  These are the two sources to be compared.  The revisons default to
HEAD if omitted.

In the second form TARGET can be an URL, or it can be a working copy
path in which case the corresponding URL is used.  This URL, at
revisions N and M, defines the two sources to be compared.

PATH is the working copy path that will receive the changes.  If
omitted, a default value of '.' is assumed.

Alternate names: None
Changes: Working copy
Needs Network: Only if working with URLs
Switches:
--revision (-r) REV
--non-recursive (-N)
--quiet (-q)
--force
--dry-run
--username USER
--password PASS
--no-auth-cache
--non-interactive

Examples

============================================================

svn mkdir

svn mkdir TARGET [TARGET [TARGET ... ]]

Create a directory with a name given by the final component of
TARGET.  If TARGET is a working copy path the directory is scheduled
for addition in the working copy.  If TARGET is an URL the directory
is created in the repository via an immediate commit.  In both cases
all the intermediate directories must already exist.

Alternate names: None
Changes: Working copy, repository if operating on a URL
Needs Network: Only if operating on a URL
Switches:
--message (-m) TEXT
--file (-F) FILE
--quiet (-q)
--username USER
--password PASS
--no-auth-cache
--non-interactive
--encoding ENC

Examples

============================================================

svn move
svn move SRC DST

NOTE:  this command is equivalent to a 'copy' and 'delete'.

SRC and DST can both be working copy (WC) paths or URLs:
  WC  -&gt; WC:   move and schedule for addition (with history)
  URL -&gt; URL:  complete server-side rename.


Alternate names: mv, rename, ren
Changes: Working copyyy, repository if operating on a URL
Needs Network: Only if operating on a URL
Switches:
--message (-m) TEXT
--file (-F) FILE
--revision (-r) REV
--quiet (-q)
--username USER
--password PASS
--no-auth-cache
--non-interactive
--force
--encoding ENC

Examples

============================================================

svn propdel

svn propdel PROPNAME [PATH [PATH ... ]]
svn propdel PROPNAME --revprop -r REV [URL]

The first  removes versioned props in working copy.

The second removes unversioned remote prop on repos revision.

Alternate names: pdel
Changes: working copy, repository only if operating on a URL
Needs Network: Only if operating on a URL
Switches:
--quiet (-q)
--recursive (-R)
--revision (-r) REV
--revprop

Examples

============================================================

svn propedit

svn propedit PROPNAME PATH [PATH [PATH ... ]]
svn propedit PROPNAME --revprop -r REV [URL]

The first edits versioned props in working copy.

The second edits unversioned remote prop on repos revision.

Alternate names: pedit, pe
Changes: working copy, repository only if operating on a URL
Needs Network: Only if operating on a URL
Switches:
--revision (-r) REV
--revprop
--encoding ENC

Examples

============================================================

svn propget

svn propget PROPNAME [PATH [PATH ... ]]
svn propget PROPNAME --revprop -r REV [URL]

The first prints versioned prop in working copy.

The second prints unversioned remote prop on repos revision.

Alternate names: pget, pg
Changes: working copy, repository only if operating on a URL
Needs Network: Only if operating on a URL
Switches:
--recursive (-R)
--revision (-r) REV
--revprop

Examples

============================================================

svn proplist

svn proplist [PATH [PATH ... ]]
svn proplist --revprop -r REV [URL]

The first lists versioned props in working copy.

The second lists unversioned remote props on repos revision.

Alternate names: plist, pl
Changes: working copy, repository only if operating on a URL
Needs Network: Only if operating on a URL
Switches:
--verbose (-v)
--recursive (-R)
--revision (-r) REV
--revprop

Examples

============================================================

svn propset

svn propset PROPNAME [PROPVAL | -F VALFILE] PATH [PATH [PATH ... ]]
svn propset PROPNAME --revprop -r REV [PROPVAL | -F VALFILE] [URL]

The first creates a versioned, local propchange in working copy.
The second creates an unversioned, remote propchange on repos revision.

Note: svn recognizes the following special versioned properties
but will store any arbitrary properties set:

  svn:ignore     - A newline separated list of file patterns to ignore.
  svn:keywords   - Keywords to be expanded.  Valid keywords are:
    URL, HeadURL             - The URL for the head version of the object.
    Author, LastChangedBy    - The last person to modify the file.
    Date, LastChangedDate    - The date/time the object was last modified.
    Rev, LastChangedRevision - The last revision the object changed.
    Id                       - A compressed summary of the previous
                                 4 keywords.
  svn:executable - If present, make the file executable. This
    property cannot be set on a directory.  A non-recursive attempt
    will fail, and a recursive attempt will set the property only
    on the file children of the directory.
  svn:eol-style  - One of 'native', 'LF', 'CR', 'CRLF'. 
  svn:mime-type  - The mimetype of the file.  Used to determine
    whether to merge the file, and how to serve it from Apache.
    A mimetype beginning with 'text/' (or an absent mimetype) is
    treated as text.  Anything else is treated as binary.
  svn:externals  - A newline separated list of module specifiers,
    each of which consists of a relative directory path, optional
    revision flags, and an URL.  For example
      foo             http://example.com/repos/zig
      foo/bar -r 1234 http://example.com/repos/zag


Alternate names: pset, ps
Changes: working copy, repository only if operating on a URL
Needs Network: Only if operating on a URL
Switches:
--file (-F) FILE
--quiet (-q)
--revision (-r) REV
--targets FILENAME
--recursive (-R)
--revprop
--encoding ENC

Examples

============================================================

svn revert

svn revert PATH [PATH [PATH ... ]]

Reverts any local changes to a file and resolves any conflicted
states.

Alternate names: None
Changes: working copy
Needs Network: No
Switches:
--targets FILENAME
--recursive (-R)
--quiet (-q)

Examples

============================================================

svn resolve

svn resolve PATH [PATH [PATH ... ]]

Note: this routine does not semantically resolve conflict markers; it
merely removes conflict-related artifact files and allows PATH to be
committed again.

Alternate names: None
Changes: Working copy
Needs Network: No
Switches:
--targets FILENAME
--recursive (-R)
--quiet (-q)

Examples

============================================================

svn status
svn status [PATH [PATH ... ]]

  With no args, print only locally modified items (no network access).
  With -u, add working revision and server out-of-date information.
  With -v, print full revision information on every item.

The first five columns in the output are each one character wide:
    First column: Says if item was added, deleted, or otherwise changed
      ' ' no modifications
      'A' Added
      'D' Deleted
      'M' Modified
      'C' Conflicted
      '?' item is not under revision control
      '!' item is missing and was removed via a non-svn command
      '~' versioned as a directory, but is a file, or vice versa
    Second column: Modifications of a file's or directory's properties
      ' ' no modifications
      'M' Modified
      'C' Conflicted
    Third column: Whether the working copy directory is locked
      ' ' not locked
      'L' locked
    Fourth column: Scheduled commit will contain addition-with-history
      ' ' no history scheduled with commit
      '+' history scheduled with commit
    Fifth column: Whether the item is switched relative to its parent
      ' ' normal
      'S' switched
    The out-of-date information appears in the eighth column
      '*' a newer revision exists on the server
      ' ' the working copy is up to date

Remaining fields are variable width and delimited by spaces:

The working revision is the next field if -u or -v is given, followed
by both the last committed revision and last committed author if -v is
given.  The working copy path is always the final field, so it can
include spaces.

  Examples output:
    svn status wc
     M     wc/bar.c
    A  +   wc/qax.c

    svn status -u wc
     M           965    wc/bar.c
           *     965    wc/foo.c
    A  +         965    wc/qax.c
    Head revision:   981

    svn status --show-updates --verbose wc
     M           965       938     kfogel   wc/bar.c
           *     965       922    sussman   wc/foo.c
    A  +         965       687        joe   wc/qax.c
                 965       687        joe   wc/zig.c
    Head revision:   981


Alternate names: stat, st
Changes: Nothing
Needs Network: Only if using --show-updates
Switches:
--show-updates (-u)
--verbose (-v)
--non-recursive (-N)
--quiet (-q)
--username USER
--password PASS
--no-auth-cache
--non-interactive
--no-ignore

Examples

============================================================

svn switch

svn switch URL [PATH]

Note:  this is the way to move a working copy to a new branch.

Alternate names: sw
Changes: working copy
Needs Network: Yes
Switches:
--revision (-r) REV
--non-recursive (-N)
--quiet (-q)
--username USER
--password PASS
--no-auth-cache
--non-interactive

Examples

============================================================

svn update

svn update [PATH [PATH ... ]]

If no revision given, bring working copy up-to-date with HEAD rev.
Else synchronize working copy to revision given by -r.

For each updated item a line will start with a character reporting the
action taken.  These characters have the following meaning:

  A  Added
  D  Deleted
  U  Updated
  C  Conflict
  G  Merged

A character in the first column signifies an update to the actual file,
while updates to the file's props are shown in the second column.

Alternate names: up
Changes: Working copy
Needs Network: Yes
Switches:
--revision (-r) REV
--non-recursive (-N)
--quiet (-q)
--username USER
--password PASS
--no-auth-cache
--non-interactive

Examples

============================================================
        </screen>        

    </sect2>
    
  </sect1>
  
  <!-- ================================================================= -->
  <!-- ======================== SECTION 2 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-8-sect-2">
    <title><command>svnadmin</command></title>
    
    <para>
      ###TODO Write this
    </para>

    <sect2 id="svn-ch-8-sect-2.1">
      <title>svn create</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-2.2">
      <title>svn createtxn</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-2.3">
      <title>svn dump</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-2.4">
      <title>svn help</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-2.5">
      <title>svn load</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-2.6">
      <title>svn lscr</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-2.7">
      <title>svn lstxns</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-2.8">
      <title>svn recover</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-2.9">
      <title>svn rmtxns</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-2.10">
      <title>svn setlog</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-2.11">
      <title></title>
      <para>###TODO Write this</para>
    </sect2>

  </sect1>
  
  <!-- ================================================================= -->
  <!-- ======================== SECTION 3 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-8-sect-3">
    <title><command>svnlook</command></title>
    
    <para>### TODO Talk about how svnlook works in general:
      std. command structure, revnums vs. tranny names, what the
      default action is, etc.</para>
    
    <sect2 id="svn-ch-8-sect-3.1">
      <title>svn author</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-3.2">
      <title>svn changed</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-3.3">
      <title>svn date</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-3.4">
      <title>svn diff</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-3.5">
      <title>svn dirs-changed</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-3.6">
      <title>svn ids</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-3.7">
      <title>svn info</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-3.8">
      <title>svn log</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-3.9">
      <title>svn tree</title>
      <para>###TODO Write this</para>
    </sect2>

    <sect2 id="svn-ch-8-sect-3.10">
      <title></title>
      <para>###TODO Write this</para>
    </sect2>

  </sect1>
  
  <!-- ================================================================= -->
  <!-- ======================== SECTION 4 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-8-sect-4">
    <title>Repository Configuration Files</title>
    
    <para>###TODO We should probably break out Apache stuff into its
      own section and talk about ra_local on its own. For ra_dav, go
      through all the relevant directives and what they do.  Once
      ra_svn matures a bit, we can add that.</para>

  </sect1>
  <!-- ================================================================= -->
  <!-- ======================== SECTION 5 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-8-sect-5">
    <title>Repository commit hooks</title>
    
    <para>
      ###TODO pre-commit, post-commit, start-co
    </para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 6 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-8-sect-6">
    <title>Client configuration (Inside the
      <filename>.subversion</filename> directory)</title>
    
    <para>###TODO Write this</para>
    
  </sect1>
  <!-- ================================================================= -->
  <!-- ======================== SECTION 7 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-8-sect-7">
    <title>The Working Copy Administrative Area (Inside the
      <filename>.svn</filename> directories)</title>

    <!-- ###TODO: Do we want to include this? -Fitz -->
    <para>
      ###TODO If we decide to go with this, add a short summary, a
      big warning to not touch anything, and then a quick blurb for
      each of the following: README, auth/, dir-prop-base,
      dir-props, dir-wcprops, empty-file, entries, format,
      prop-base/, props/, text-base/, tmp/, and wcprops/</para>

  </sect1>
  
</chapter>


