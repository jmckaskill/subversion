<chapter id="svn-ch-1">

  <title>Introduction</title>

  <simplesect>
    <para>Version control is the art of managing changes to
      information.  It has long been a critical tool for programmers,
      who typically spend their time making small changes to software
      and then undoing those changes the next day.  Imagine a team of
      these programmers working concurrently, and you can see why a
      good system is needed to manage the potential chaos.</para>
  </simplesect>


  <!-- ================================================================= -->
  <!-- ======================== SECTION 1 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-1">

    <title>What is Subversion?</title>
      
    <para>Subversion is a free/open-source version control system.
      That is, Subversion manages files and directories over time.  A
      tree of files is placed into a central
      <firstterm>repository</firstterm>.  The repository is much like
      an ordinary file server, except that it remembers every change
      ever made to your files and directories.  This allows you to
      recover older versions of your data, or examine the history of
      how your data changed.  In this regard, many people think of a
      version control system as a sort of <quote>time
      machine</quote>.</para>
    
    <!-- ### something about Subversion facilitating communication
    between developers?? -->

    <para>Some version control systems are also software configuration
      management (SCM) systems.  These systems are specifically
      tailored to manage trees of source code, and have many features
      that are specific to software development&mdash;such as natively
      understanding programming languages, or supplying tools for
      building software.  Subversion, however, is not one of these
      systems; it is a general system that can be used to manage
      <emphasis>any</emphasis> collection of files, including
      source code.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 2 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-2">

    <title>Subversion's History</title>

    <para>In early 2000, CollabNet, Inc. (<systemitem
      class="url">http://www.collab.net</systemitem>) began seeking
      developers to write a replacement for CVS.  CollabNet offers a
      collaboration software suite called SourceCast, of which one
      component is version control.  Although SourceCast used CVS as
      its initial version control system, CVS's limitations were
      obvious from the beginning, and CollabNet knew it would
      eventually have to find something better.  Unfortunately, CVS
      had become the <foreignphrase>de facto</foreignphrase> standard
      in the open source world largely because there
      <emphasis>wasn't</emphasis> anything better, at least not under
      a free license.  So CollabNet determined to write a new version
      control system from scratch, retaining the basic ideas of CVS,
      but without the bugs and misfeatures.</para>

    <para>In February 2000, they contacted Karl Fogel, the author of
      <citetitle>Open Source Development with CVS</citetitle>
      (Coriolis, 1999), and asked if he'd like to work on this new
      project.  Coincidentally, at the time Karl was already
      discussing a design for a new version control system with his
      friend Jim Blandy.  In 1995 the two had started Cyclic Software,
      a company providing CVS support contracts, and although they
      later sold the business, they still used CVS every day at their
      jobs.  Their frustration with CVS had led Jim to think carefully
      about better ways to manage versioned data, and he'd already
      come up with not only the name <quote>Subversion</quote>, but
      also with the basic design of the Subversion repository.  When
      CollabNet called, Karl immediately agreed to work on the
      project, and Jim got his employer, RedHat Software, to
      essentially donate him to the project for an indefinite period
      of time.  CollabNet hired Karl and Ben Collins-Sussman, and
      detailed design work began in May.  With the help of some
      well-placed prods from Brian Behlendorf and Jason Robbins of
      CollabNet, and Greg Stein (at the time an independent developer
      active in the WebDAV/DeltaV specification process), Subversion
      quickly attracted a community of active developers.  Many people
      had had frustrating experiences with CVS, and welcomed the
      chance to finally do something about it.</para>

    <para>The original design team settled on some simple goals.  They
      didn't want to break new ground in version control methodology,
      they just wanted to fix CVS.  They decided that Subversion would
      match CVS's features, and preserve the same development model,
      but not duplicate CVS's most obvious flaws.  And although it did
      not need to be a drop-in replacement for CVS, it should be
      similar enough that any CVS user could make the switch with
      little effort.</para>

    <para>After fourteen months of coding, Subversion became
      <quote>self-hosting</quote> on August 31, 2001.  That is,
      Subversion developers stopped using CVS to manage Subversion's
      own source code, and started using Subversion instead.</para>

    <para>While CollabNet started the project, and still funds a large
      chunk of the work (it pays the salaries of a few full-time
      Subversion developers), Subversion is run like most open-source
      projects, governed by a loose, transparent set of rules that
      encourage meritocracy.  CollabNet's copyright license is fully
      compliant with the Debian Free Software Guidelines.  In other
      words, anyone is free to download, modify, and redistribute
      Subversion as he pleases; no permission from CollabNet or anyone
      else is required.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 3 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-3">

    <title>Subversion's Features</title>

    <para>How does Subversion improve upon CVS's design?  Here's a
      short list to whet your appetite.  If you're not familiar with
      CVS, you may not understand all of these features.  Fear not:
      Chapter 2 will provide you with a gentle introduction to version
      control.</para>

    <variablelist>
      <varlistentry>
        <term>Directory versioning</term>
        <listitem>
          <para>CVS only tracks the history of individual files,
            but Subversion implements a
            <quote>virtual</quote> versioned filesystem that tracks
            changes to whole directory trees over time.  Files
            <emphasis>and</emphasis> directories are versioned.  As a
            result, there are real client-side <command>move</command>
            and <command>copy</command> commands that operate on files
            and directories.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Atomic commits</term>
        <listitem>
          <para>A commit either goes into the repository completely,
            or not at all.  This allows developers to construct and
            commit changes as logical chunks.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Versioned metadata</term>
        <listitem>
          <para>Each file and directory has an invisible set of
            <quote>properties</quote> attached.  You can invent and
            store any arbitrary key/value pairs you wish.  Properties
            are versioned over time, just like file contents.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Choice of network layers</term>
        <listitem>
          <para>Subversion has an abstracted notion of repository
            access, making it easy for people to implement new network
            mechanisms.  Subversion's <quote>advanced</quote> network
            server is a module for the Apache web server, which speaks
            a variant of HTTP called WebDAV/DeltaV.  This gives
            Subversion a big advantage in stability and
            interoperability, and provides various key features for
            free: authentication, authorization, wire compression, and
            repository browsing, for example.  A smaller, standalone
            Subversion server process is also available.  This server speaks
            a custom protocol which can be easily tunneled over ssh.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Consistent data handling</term>
        <listitem>
          <para>Subversion expresses file differences using a binary
            differencing algorithm, which works identically on both
            text (human-readable) and binary (human-unreadable) files.
            Both types of files are stored equally compressed in the
            repository, and differences are transmitted in both
            directions across the network.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Efficient branching and tagging</term>
        <listitem>
          <para>
            The cost of branching and tagging need not be proportional to the
            project size.  Subversion creates branches and tags by
            simply copying the project, using a mechanism similar to a
            hard-link.  Thus these operations take only a very small,
            constant amount of time.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Hackability</term>
        <listitem>
          <para>Subversion has no historical baggage; it is
            implemented as a collection of shared C libraries with
            well-defined APIs.  This makes Subversion extremely
            maintainable and usable by other applications and
            languages.</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 4 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-4">

    <title>Subversion's Architecture</title>

    <para>This diagram is what one might call a
      <quote>mile-high</quote> view of Subversion's design.</para>
    
    <figure id="svn-ch-1-dia1">
      <title>Subversion's Architecture</title>
      <graphic fileref="images/ch01dia1.png"/>
    </figure>

    <para>On one end, the Subversion server machine stores all of your
      versioned data in a central repository.  This database is
      accessed through a standard set of APIs by any number of network
      server programs.  At the moment, there are two such server
      programs available: one can use either the Apache HTTP server,
      or a standalone server called <command>svnserve</command>.  (See
      <xref linkend="svn-ch-6"/> for details.)</para>
    
    <para>On the client side, the user runs a Subversion client
      application.  This is typically a commandline client, but
      possibly a GUI client as well.  Subversion client applications
      share a common set of libraries that manage local views of
      projects (called <quote>working copies</quote>).  The client
      libraries are also responsible for synchronizing working copies
      with the repository; they do this by contacting the appropriate
      server processes over the internet.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 5 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-5">

    <title>Installing Subversion</title>

    <para>Subversion is built on a portability layer called APR (the
      Apache Portable Runtime library).  This means Subversion should
      work on any operating system that the Apache httpd server runs
      on: Windows, Linux, all flavors of BSD, Mac OS X, Netware, and
      others. </para>

    <para>The easiest way to get Subversion is to download a binary
      package built for your operating system.  Subversion's
      website (<systemitem
      class="url">http://subversion.tigris.org</systemitem>) often has
      binaries available for download, posted by volunteers.  The site
      usually contains graphical installer packages for users of
      Microsoft operating systems.  If you run a Unix-like operating
      system, you can use your system's native package-distribution
      system (rpm, deb, ports tree) to get Subversion.</para>

    <para>Alternately, you can build Subversion directly from source
      code.  From the website, you can download the latest source-code
      release.  After unpacking it, follow the instructions in the INSTALL
      file to build it.  Note that a released source package contains
      everything you need to build a command-line client capable of
      talking to a remote repository (in particular, the apr,
      apr-util, and neon libraries).  But Subversion has many other
      dependencies, such as Berkeley DB and possibly Apache httpd.
      If you want to do a <quote>full</quote> build, make sure you
      have all of the packages documented in the INSTALL file.  If you
      plan to work on Subversion itself, you can use your client
      program to grab the latest, bleeding-edge source code.  This is
      documented in <xref linkend="svn-ch-8-sect-6.2" />.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 6 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-6">

    <title>Subversion's Components</title>
    
    <para>
      Subversion, once installed, has a number of different pieces.
      Here's a quick overview of what you get.
    </para>

    <sect2 id="svn-ch-1-sect-6.1">

      <title>Client Components (for the User)</title>

      <variablelist>

        <varlistentry>
          <term>svn</term>
          <listitem>
            <para>The command-line client program.  This is the main
             tool used to manage data, and its use is covered in
             Chapters 2, 3, 4, and 6.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>svnversion</term>
          <listitem>
            <para>A program for reporting the mixed-revision state of a
            working copy.  (See <xref linkend="svn-ch-2" /> to understand
            mixed-revision working copies.)</para>
          </listitem>
        </varlistentry>

      </variablelist>

    </sect2>

    <sect2 id="svn-ch-1-sect-6.2">

      <title>Server Components (for the Administrator)</title>

      <para>These are all discussed in <xref linkend="svn-ch-5" />.</para>

      <variablelist>

        <varlistentry>
          <term>svnlook</term>
          <listitem>
            <para>A tool for inspecting a Subversion repository.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>svnadmin</term>
          <listitem>
            <para>A tool for creating, tweaking or repairing a Subversion
              repository.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>mod_dav_svn</term>
          <listitem>
            <para>A plug-in module for the Apache-2.X web server; used
            to make your repository available to others over a
            network.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>svnserve</term>
          <listitem>
            <para>A standalone server program, runnable as a daemon
              process or invokable by SSH; another way to make your
              repository available to others over a network.</para>
          </listitem>
        </varlistentry>

      </variablelist>

    </sect2>

    <para>Assuming you have Subversion installed correctly, you should
      be ready to start.  The next two chapters will walk you through
      the use of <command>svn</command>, Subversion's command-line client 
      program.</para>

  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
