<!-- This chapter is slated for mass rewriting.  If you're adding
     content or fixing things, please understand that your changes,
     while certainly influencing the resultant chapter, might
     themselves get lost in the mix. -->
<chapter id="svn-ch-6">
  <title>Advanced Topics</title>

  <simplesect id="svn-ch-6-sect-0">

    <para>If you've been reading this book chapter by chapter, from
      start to finish, you should by now have acquired enough
      knowledge to use the Subversion client to perform the most
      common version control operations.  You understand how to
      checkout a working copy from a Subversion repository.  You are
      comfortable with submitting and receiving changes using the
      <command>svn commit</command> and <command>svn update</command>
      functions.  You've probably even developed a reflex which causes
      you to run the <command>svn status</command> command almost
      unconsciously.  For all intents and purposes, you are ready to
      use Subversion in a typical environment.</para>

    <para>But the Subversion feature set doesn't stop at "common
      version control operations".</para>

    <para>This chapter highlights some of Subversion's features which
      aren't quite so regularly used.  In it, we will discuss
      Subversion's property (or <quote>metadata</quote>) support, and
      how to modify Subversion's default behaviors by tweaking its
      run-time configuration area.  We will describe how you can use
      externals definitions to instruct Subversion to pull data from
      multiple repositories.  We'll cover in detail some of the
      additional client- and server-side tools that are part of the
      Subversion distribution.</para>

    <para>Before reading this chapter, you should be familiar with the
      basic file and directory versioning capabilities of Subversion.
      If you haven't already read about those, or if you need a
      refresher, we crecommend that you check out <xref
      linkend="svn-ch-1" /> and <xref linkend="svn-ch-2" />.  Once
      you've mastered the basics and consumed this chapter, you'll be
      a Subversion power-user&mdash;or we'll refund your money!
      <footnote>
        <para>This offer applies only to those who, like most folks,
          pay nothing for Subversion.</para>
      </footnote>
    </para>

  </simplesect>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 1:  RUNTIME CONFIGURATION AREA                      *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-6-sect-1">
    <title>Run-time Configuration Area</title>
    
    <para>Subversion provides many optional behaviors that can be
      controlled by the user.  Many of these options are of the kind
      that a user would wish to apply to all Subversion operations.
      So, rather than forcing users to remember command-line arguments
      for specifying these options, and to use them for each and every
      operation they perform, Subversion uses configuration files,
      segregated into a Subversion configuration area.</para>

    <para>The Subversion <firstterm>configuration area</firstterm> is
      a two-tiered heirarchy of option names and their values.
      Usually, this boils down to a special directory which contains
      <firstterm>configuration files</firstterm> (the first tier),
      which are just text files in standard INI format (with
      <quote>sections</quote> providing the second tier).  These files
      can be easily edited using your favorite text editor (such as
      emacs or vi), and contain directives read by the client to
      determine which of several optional behaviors the user
      prefers.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-1.1">
      <title>Configuration Area Layout</title>

      <para>The first time that the <command>svn</command>
        command-line client is executed, it creates a per-user
        configuration area.  On Unix-like systems, this area appears
        as a directory named <filename>.subversion</filename> in the
        user's home directory.  On Win32 systems, Subversion creates a
        folder named <filename>Subversion</filename>, typically inside
        the <filename>Application Data</filename> area of the user's
        profile directory.  However, on this platform the exact
        location differs from system to system, and is dictated by the
        Windows registry.  We will refer to the per-user configuration
        area using its Unix name,
        <filename>.subversion</filename>.</para>

      <para>In addition to the per-user configuration area, Subversion
        also recognizes the existence of a system-wide configuration
        area.  The gives system administrators the ability to
        establish defaults for all users on a given machine.  Note
        that the system-wide configuration area does not alone dictate
        mandatory policy&mdash;the settings in the per-user
        configuration area override those in the system-wide one, and
        command-line arguments supplied to <command>svn</command>
        program have the final word on behavior.  On Unix-like
        platforms, the sytem-wide configuration area is expected to be
        the <filename>/etc/subversion</filename> directory; on Windows
        machines, it again looks for a <filename>Subversion</filename>
        directory inside the common Application Data location (again,
        as specified by the Windows Registry).  Unlike the per-user
        case, the <command>svn</command> program does not attempt to
        create the system-wide configuration area.</para>

      <para>The <filename>.subversion</filename> directory currently
        contains three files&mdash;two configuration files
        (<filename>config</filename> and
        <filename>servers</filename>), and a
        <filename>README</filename> file which describes the INI
        format.  At the time of their creation, the files contain
        default values for each of the supported Subversion options,
        mostly commented out and grouped with textual descriptions
        about how the values for the key affect Subversion's behavior.
        To change a certain behavior, you need only to load the
        appropriate configuration file into a text editor, and modify
        the desired option value.  If at any time you wish to have the
        default settings restore to one or more of the configuration
        files, you can simply delete the file, and run some innocuous
        <command>svn</command> command, such as <command>svn
        --version</command>, and the missing file will be recreated in
        its default state.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-1.2">
      <title>Configuration and the Windows Registry</title>

      <para>In addition to the usual INI-based configuration area,
        Subversion clients running on Windows platforms may also use
        the Windows registry to hold the configuration data.  The
        option names and their values are the same as in the INI
        files.  The <quote>file/section</quote> heirarchy is
        preserved as well, though addressed in a slightly different
        fashion&mdash;in this schema, files and sections are just
        levels in the registry key tree.</para>

      <para>Subversion looks for system-wide configuration values
        under the
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion</literal>
        key.  For example, the <literal>compression</literal> option,
        which is in the <literal>miscellany</literal> section of the
        <filename>config</filename> file, would be found at
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\compression</literal>.
        Per-user configuration values should be stored under
        <literal>HKEY_CURRENT_USER\Software\Tigris.org\Subversion</literal>.
      </para>

      <para>Registry-based configuration options are parsed
        <emphasis>before</emphasis> their file-based counterparts,
        so are overridden by values found in the configuration
        files.  In other words, configuration priority is granted in
        the following order on a Windows system:</para>
      
      <orderedlist>
        <listitem>
          <para>Command-line options</para>
        </listitem>
        <listitem>
          <para>The per-user INI files</para>
        </listitem>
        <listitem>
          <para>The pre-user Registry values</para>
        </listitem>
        <listitem>
          <para>The system-wide INI files</para>
        </listitem>
        <listitem>
          <para>The system-wide Registry values</para>
        </listitem>
      </orderedlist>

      <para>Also, the Windows Registry doesn't really support the
        notion of something being <quote>commented out</quote>.
        However, Subversion will ignore any option key whose name
        begins with a hash (<literal>#</literal>) character.  This
        allows you to effectively comment out a Subversion option
        without deleting the entire key from the Registry, obviously
        simplifying the process of restoring that option.</para>

      <para>The <command>svn</command> command-line client never
        attempts to write to the Windows Registry, and will not
        attempt to create a default configuration area there.  You can
        create the keys you need using the <command>REGEDIT</command>
        program.  Alternatively, you can create a
        <filename>.REG</filename> file, and then double-click on that
        file from the Explorer shell, which will cause the data to be
        merged into your registry.</para>

      <example id="svn-ch-6-sect-1.2-ex-1">
        <title>Sample registration entries (.REG) file.</title>

        <programlisting>
REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\DEFAULT]
"#http-proxy-host"=""
"#http-proxy-port"=""
"#http-proxy-username"=""
"#http-proxy-password"=""
"#http-proxy-timeout"="0"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auth]
"#store-password"="no"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\helpers]
"#editor-cmd"="notepad"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\miscellany]
"#global-ignores"="*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#*"
"#compression"="yes"
</programlisting>
      </example>

      <para>The previous example shows the contents of a
        <filename>.REG</filename> file which contains some of most
        commonly used configuration options and their default values.
        Note the presence of both system-wide (for network
        proxy-related options) and per-user settings (editor programs
        and passoword storage, among others).  Also note that all the
        options are effectively commented out.  You need only to
        remove the hash (<literal>#</literal>) character from the
        beginning of the option names, and set the values as you
        desire.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-1.3">
      <title>The Configuration Options</title>
      
      <para>In this section, we will discuss the currently supported
        run-time configuration options.</para>

      <sect3 id="svn-ch-6-sect-1.3.1">
        <title>Servers</title>

        <para>The <filename>servers</filename> file contains
          Subversion configuration options related to the network
          layers.  There are two special section names in this
          file&mdash;<literal>groups</literal> and
          <literal>default</literal>.  The <literal>groups</literal>
          section is cross-reference table of sort.  The keys in this
          section are the names of other sections in the file; their
          values are globs which are compared against the hostnames of
          the machine to which Subversion requests are sent.</para>

        <programlisting>
[groups]
beanie-babies = *.red-bean.com
collabnet = svn.collab.net

[beanie-babies]
&hellip;

[collabnet]
&hellip;
</programlisting>

        <para>When Subversion is used over a network, it attempts to
          match the name of the server it is trying to reach with a
          group name under the <literal>groups</literal> section.  If
          a match is made, Subversion then looks for a section in the
          <filename>servers</filename> file whose name is the matched
          group's name.  From that section it reads the actual network
          configuration settions.</para>

        <para>The <literal>default</literal> section contains the
          settings which are meant for all of the servers not matched
          by one of the globs under the <literal>groups</literal>
          section.  The available options under this section are
          exactly the same as those valid for the other server
          sections in the file (except, of course, the special
          <literal>groups</literal> section), and are as
          follows:</para>

        <variablelist>
          <varlistentry>
            <term><literal>http-proxy-host</literal></term>
            <listitem>
              <para>This specifies the hostname of the proxy computer
                through which your HTTP-based Subversion requests must
                pass.  It defaults to an empty value, which means that
                Subversion will not attempt to route HTTP requests
                through a proxy computer, and will instead attempt to
                contact the destination machine directly.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-port</literal></term>
            <listitem>
              <para>This specifies the port number on the proxy host
                to use.  It defaults to an empty value.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-username</literal></term>
            <listitem>
              <para>This specifies the username to supply to the proxy
                machine.  It defaults to an empty value.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-password</literal></term>
            <listitem>
              <para>This specifies the password to supply to the proxy
                machine.  It defaults to an empty value.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-timeout</literal></term>
            <listitem>
              <para>This specifies the amount of time, in seconds, to
                wait for a server response.  If you experience
                problems with a slow network connection causing
                Subversion operations to timeout, you should increase
                the value of this option.  The default value is
                <literal>0</literal>, which instructs the underlying
                HTTP library, Neon, to use its default timeout
                setting.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>neon-debug-mask</literal></term>
            <listitem>
              <para>This is an integer mask which the underlying HTTP
                library, Neon, uses for choosing what type of
                debugging output to yield.  The default value is
                <literal>0</literal>, which will silence all debugging
                output.</para>
            </listitem>
          </varlistentry>
          <!--
          <varlistentry>
            <term><literal>svn-tunnel-agent</literal></term>
            <listitem>
              <para>This specifies the external agent program through
                which to tunnel SVN protocol requests.</para>
            </listitem>
          </varlistentry>
          -->
        </variablelist>

      </sect3>
      <sect3 id="svn-ch-6-sect-1.3.2">
        <title>Config</title>

        <para>The <filename>config</filename> file contains the rest
          of the currently available Subversion run-time options,
          those not related to networking.  There are only a few
          options in use at this time, but they are again group into
          sections in expectation of future additions.</para>

        <para>The <literal>auth</literal> section contains settings
          related to Subversion's authentication and authorization
          against the repository.  It contains:</para>

        <variablelist>
          <varlistentry>
            <term><literal>store-password</literal></term>
            <listitem>
              <para>This instructs Subversion to cache, or not to
                cache, passwords that are supplied by the user in
                response to server authentication challenges.  The
                default value is <literal>yes</literal>.  Set this to
                <literal>no</literal> to disable this on-disk password
                caching.  You can override this option for a single
                instance of the <command>svn</command> command using
                the <option>--no-auth-cache</option> command-line
                parameter (for those subcommands that support it).</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The <literal>helpers</literal> section controls which
          external applications Subversion uses to accomplish its
          tasks.  Valid options in this section are:</para>

        <variablelist>
          <varlistentry>
            <term><literal>editor-cmd</literal></term>
            <listitem>
              <para>This specifies the program Subversion will use to
                query the user for a commit log.  This program is also
                used with the <command>svn propedit</command>
                command&mdash;a temporary file is populated with the
                current value of the property the user wishes to edit,
                and the edits take places right in the editor program
                (see <xref linkend="svn-ch-6-sect-2" />).  This
                option's default value is empty.  If the option is not
                set, Subversion will fall back to checking the
                environment variables <literal>SVN_EDITOR</literal>,
                <literal>VISUAL</literal>, and
                <literal>EDITOR</literal> (in that order) for an
                editor command.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff-cmd</literal></term>
            <listitem>
              <para>This specifies the absolute path of a differencing
                program, used when Subversion generates
                <quote>diff</quote> output (such as when using the
                <command>svn diff</command> command).  The default
                value is the path of the GNU diff utility, as
                determined by the Subversion source code build
                system.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-cmd</literal></term>
            <listitem>
              <para>This specifies the absolute path of a three-way
                differencing program.  Subversion uses this program
                merge changes made by the user with those received
                from the repository.  The default value is the path of
                the GNU diff3 utility, as determined by the Subversion
                source code build system.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-has-program-arg</literal></term>
            <listitem>
              <para>This flag should be set to <literal>true</literal>
              if the program specified by the
              <literal>diff3-cmd</literal> option accepts a
              <option>--diff-program</option> command-line parameter.
              Since the <literal>diff3-cmd</literal> option's default
              value is determined at compilation time, the default
              value for the <literal>diff3-has-program-arg</literal>
              is, too.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The <literal>miscellany</literal> section is where
          everything that doesn't belong elsewhere winds up.
          <footnote>
            <para>Anyone for potluck dinner?</para> 
          </footnote>
          In this section, you can find:</para>

        <variablelist>
          <varlistentry>
            <term><literal>global-ignores</literal></term>
            <listitem>
              <para>When running the <command>svn status</command>
                command, Subversion lists unversioned files and
                directories along with the versioned ones, annotating
                them with a <literal>?</literal> character (see <xref
                linkend="svn-ch-3-sect-4.3.1" />).  Sometimes, it can
                be annoying to see uninteresting, unversioned
                items&mdash;for example, object files that result from
                a program's compilation&mdash;in this display.  The
                <literal>global-ignores</literal> option is a list of
                whitespace-delimited globs which describe the names of
                files and directories that Subversion should not
                display unless they are versioned.  The default value
                is <literal>*.o *.lo *.la #*# .*.rej *.rej .*~ *~
                .#*</literal>.</para>

              <para>You can override this option for a single instance
                of the <command>svn status</command> command by using
                the <option>--no-ignores</option> command-line flag.
                For information on more fine-grained control of
                ignored items, see <xref linkend="svn-ch-6-sect-2.3.3"
                />.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>compression</literal></term>
            <listitem>
              <para>This specifies whether or not Subversion should
                attempt to compress network requests made to DAV-ready
                servers.  The default value is 'yes' (though
                compression will only occur if that capability is
                compiled into the network layer).  Set this to 'no' to
                disable compression, such as when debugging network
                transmissions.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>
    </sect2>
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 2:  PROPERTIES                                      *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-6-sect-2">
    <title>Properties</title>

    <para>We've already covered in detail how Subversion stores and
      retrieves various versions of files and directories in its
      repository.  Whole chapters have been devoted to this most
      foundational piece of functionality provided by the tool.  And
      if the versioning support stopped there, Subversion would still
      be complete from version control perspective.  But it
      doesn't stop there.</para>

    <para>In addition to versioning your directories and files,
      Subversion provides interfaces for adding, modifying, and
      removing versioned metadata on each of your versioned
      directories and files.  We refer to this metadata as
      <firstterm>properties</firstterm>, and they can be thought of as
      two-column tables that map property names to arbitrary values
      attached to each item in your working copy.  Generally speaking,
      the names and values of the properties can be whatever you want
      them to be, with the constraint that the names must be
      human-readable text.  And the best part about these properties
      is that they, too, are versioned, just like the textual contents
      of your files.  You can modify, commit, and revert property
      changes as easily as committing textual changes.  And you
      receive other people's property changes as you update your
      working copy.</para>

    <sidebar>
      <title>Other Properties in Subversion</title>

      <para>Properties show up elsewhere in Subversion, too.  Just as
        files and directories may have arbitrary property names and
        values attached to them, each revision as a whole may have
        arbitrary properties attached to it.  The same constraints
        apply&mdash;human-readable, text names and anything-you-want,
        binary values&mdash;except that revision properties are not
        versioned.  See <xref linkend="svn-ch-5-sect-1.2" /> for more
        information on these unversioned properties.</para>
    </sidebar>

    <para>In this section, we will examine the utility&mdash;both to
      users of Subversion, and to Subversion itself&mdash;of property
      support.  You'll learn about the property-related
      <command>svn</command> subcommands, and how property
      modifications affect your normal Subversion workflow.
      Hopefully, you'll be convinced that Subversion properties can
      enhance your version control experience.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-2.1">
      <title>Why Properties?</title>

      <para>Properties can be very useful additions to your working
        copy.  In fact, Subversion itself uses properties to house
        special information, and as a way to denote that certain
        special processing might be needed.  Likewise, you can use
        properties for your own purposes.  Of course, anything you can
        do with properties you could also do using regular versioned
        files, but consider the following example of Subversion
        property use.</para>

      <para>Say you wish to design a website that houses many digital
        photos, and displays them with captions and a datestamp.  Now,
        your set of photos is constantly changing, so you'd like to
        have as much of this site automated as possible.  These photos
        can be quite large, so as is common with sites of this nature,
        you want to provide smaller thumbnail images to your site
        visitors.  You can do this with traditional files.  That is,
        you can have your <filename>image123.jpg</filename> and an
        <filename>image123-thumbnail.jpg</filename> side-by-side in a
        directory.  Or if you want to keep the filenames the same, you
        might have your thumbnails in a different directory, like
        <filename>thumbnails/image123.jpg</filename>.  You can also
        store your captions and datestamps in a similar fashion, again
        separated from the original image file.  Soon, your tree of
        files is a mess, and grows in multiples with each new photo
        added to the site.</para>

     <para>Now consider the same setup using Subversion's file
        properties.  Imagine having a single image file,
        <filename>image123.jpg</filename>, and then properties set on
        that file named <literal>caption</literal>,
        <literal>datestamp</literal>, and even
        <literal>thumbnail</literal>.  Now your working copy directory
        looks much more manageable&mdash;in fact, it looks like there
        are nothing but image files in it.  But your automation
        scripts know better.  They know that they can use
        <command>svn</command> (or better yet, they can use the
        Subversion language bindings&mdash;see <xref
        linkend="svn-ch-7-sect-2.3" />) to dig out the extra
        information that your site needs to display without having to
        read an index file or play path manipulation games.</para>

      <para>How (and if) you use Subversion properties is up to you.
        As we mentioned, Subversion has it own uses for properties,
        which we'll discuss a little later in this chapter.  But
        first, let's discuss how to manipulate options using the
        <command>svn</command> program.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-2.2">
      <title>Manipulating Properties</title>

      <para>The <command>svn</command> command affords a few ways to
        add or modify file and directory properties.  For properties
        with short, human-readable values, perhaps the simplest way to
        add a new property is to specify the property name and value
        on the command-line of <command>propset</command>
        subcommand.</para>

      <screen>
$ svn propset copyright '(c) 2003 Red-Bean Software' calc/button.c
property `copyright' set on 'calc/button.c'
$
</screen>
       
      <para>But we've been touting the flexibility that Subversion
        offers for your property values.  And if you are planning to
        have a multi-line textual, or even binary, property value, you
        probably do not want to supply that value on the command-line.
        So the <command>propset</command> subcommand takes a
        <option>--file (-F)</option> option for specifying the name of
        a file which contains the new property value.</para>

      <screen>
$ svn propset license -F /path/to/LICENSE calc/button.c
property `license' set on 'calc/button.c'
$
</screen>

      <para>In addition to the <command>propset</command> command, the
        <command>svn</command> program supplies the
        <command>propedit</command> command.  This command uses the
        configured editor program (see <xref
        linkend="svn-ch-6-sect-1.3.2" />) to add or modify properties.
        When you run the command, <command>svn</command> invokes your
        editor program on a temporary file that contains the current
        value of the property (or which is empty, if you are adding a
        new property).  Then, you just modify that value in your
        editor program until it represents the new value you wish to
        store for the property, save the temporary file, and then exit
        the editor program.  If Subversion detects that you've
        actually changed the existing value of the property, it will
        accept that as the new property value.  If you exit your
        editor without making any changes, no property modification
        will occur.</para>

      <screen>
$ svn propedit copyright calc/button.c  ### exit the editor without changes
No changes to property `copyright' on `calc/button.c'
$
</screen>

      <para>We should note that, as with other <command>svn</command>
        subcommands, those related to properties can act on multiple
        paths at once.  This enables you to modify properties on whole
        sets of files with a single command.  For example, we could
        have done:</para>

      <screen>
$ svn propset copyright '(c) 2002 Red-Bean Software' calc/*
property `copyright' set on 'calc/Makefile'
property `copyright' set on 'calc/button.c'
property `copyright' set on 'calc/integer.c'
&hellip;
$
</screen>

      <para>All of this property adding and editing isn't really very
        useful if you can't easily get the stored property value.  So
        the <command>svn</command> program supplies two subcommands
        for displaying the names and values of properties stored on
        files and directories.  The <command>svn proplist</command>
        command will list the names of properties which exist on a
        path.  Once you know the names of the properties on the node,
        you can request their values individually using <command>svn
        propget</command>.  This command will, given a path (or set of
        paths) and a property name, print the value of the property to
        the standard output stream.</para>

      <para>You can add file or directory properties with the
        <command>svn propset</command> command.  provides a To set or
        get a property on a file or directory, use the <command>svn
        propset</command> and <command>svn propget</command> commands.
        To list all properties attached to an item, use <command>svn
        proplist</command>.  To delete a property, use <command>svn
        propdel</command>.</para>

      <screen>
$ svn proplist calc/button.c
Properties on 'calc/button.c':
  copyright
  license
$ svn propget copyright calc/button.c
(c) 2003 Red-Bean Software
</screen>

      <para>There's even a variation of the
        <command>proplist</command> command which will list both the
        name and value of all of the properties.  Simply supply the
        <option>--verbose (-v)</option> option.</para>

      <screen>
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : ================================================================
Copyright (c) 2003 Red-Bean Software.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions 
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions, and the recipe for Fitz's famous
red-beans-and-rice.
&hellip;
</screen>

      <para>The last property-related subcommand is
        <command>propdel</command>.  Since Subversion allows you to
        store properties with empty values, you can't remove a
        property altogether using <command>propedit</command> or
        <command>propset</command>.  For example, this command will
        <emphasis>not</emphasis> work:</para>

      <screen>
$ svn propset license '' calc/button.c
property `license' set on 'calc/button.c'
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : 
$
</screen>

      <para>You need to use the <command>propdel</command> command to
        delete properties altogether.  The syntax is similar to the
        other property commands:</para>

      <screen>
$ svn propdel license calc/button.c
property `foo' deleted from ''.
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
$
</screen>

      <para>Now that you are now familiar with all of the
        property-related <command>svn</command> subcommands, let's see
        how property modifications affect the usual Subversion
        workflow.  As we mentioned earlier, file and directory
        properties are versioned, just like your file contents.  As a
        result, Subversion provides the same opportunies for
        merging&mdash;in cleanly or conflicting fashions&mdash;someone
        else's modifications into your own.</para>

      <sidebar>
        <title>Modifying Revision Properties</title>

        <para>Remember those unversioned revision properties?  You can
          modify those with the <command>svn</command> program, too.
          Simply add the <option>--revprop</option> command-line
          parameter, and specify the revision whose property you wish
          to modify.  Since revisions are global, you don't need to
          specify a path in this case as long as you are positioned in
          the working copy of the repository whose revision property
          you wish to modify.</para>

        <screen>
$ svn pset status 'compiles, but does not work' -r11 --revprop
property `status' set on repository revision '11'
$
</screen>

        <para>Note that the ability to modify these unversioned
          properties must be explicitly added by the repository
          administrator.  Since the properties aren't versioned, you
          run the risk of losing information if you aren't careful
          with your edits.  The repository administrator can setup
          methods to protect against this lossage, but by default,
          modification of unversioned properties is disabled.</para>

      </sidebar>

      <para>And as with file contents, your property changes are local
        modifications, only made permanent when you commit them to the
        repository with <command>svn commit</command>.  Your property
        changes can be easily unmade, too&mdash;the <command>svn
        revert</command> command will restore your files and
        directories to their un-edited states, contents, properties,
        and all.  Also, you can receive interesting information about
        the state of your file and directory properties by using the
        <command>svn status</command> and <command>svn diff</command>
        commands.</para>

      <screen>
$ svn status calc/button.c
 M     calc/button.c
$ svn diff calc/button.c
Property changes on: calc/button.c
___________________________________________________________________
Name: copyright
   + (c) 2003 Red-Bean Software

$
</screen>

      <para>Notice how the <command>status</command> subcommand
        displays <literal>M</literal> in the second column instead of
        the first.  That is because we have modified the properties on
        <filename>calc/button.c</filename>, but not modified its
        textual contents.  Had we changed both, we would have seen
        <literal>M</literal> in the first column, too (see <xref
        linkend="svn-ch-3-sect-4.3.1" />).  As as with file contents,
        if someone else makes property changes that clash with your
        own, you will see a <literal>C</literal> in that second
        column, denoting a conflicted state which will need to be
        resolved before committing.</para>

      <para>You might also have noticed the non-standard way that
        Subversion currently displays property differences.  You can
        still run <command>svn diff</command> and redirect the output
        to create a usable patch file.  The <command>patch</command>
        program will ignore property patches&mdash;as a rule, it
        ignores any noise it can't understand.  This does
        unfortunately mean that to fully apply a patch generated by
        <command>svn diff</command>, any property modifications will
        need to be applied by hand.  Improvements in this area will be
        addressed in a future release of Subversion.</para>

      <para>As you can see, the presence of property modifications has
        no outstanding effect on the typical Subversion workflow.
        Your general patterns of updating your working copy, checking
        the status of your files and directories, reporting on the
        modifications you have made, and committing those
        modifications to the repository are completely immune to the
        presence or absence of properties.  The <command>svn</command>
        program has some additional subcommands for actually making
        property changes, but that is the only noticeable assymmetry.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-2.3">
      
     <title>Special properties</title>

      <para>Subversion has no particular policy regarding
        properties&mdash;you can use them for any purpose.  Subversion
        asks only that you not use property names that begin with the
        prefix <literal>svn:</literal>.  That's the namespace that its
        sets aside for its own use.  In fact, Subversion defines
        certain properties that have magical effects on the files and
        directories to which they are attached.  In this section,
        we'll untangle the mystery, and describe how these special
        properties make your life just a little easier.</para>
      
      <sect3 id="svn-ch-6-sect-2.3.1">
        <title><literal>svn:executable</literal></title>
 
        <para>The <literal>svn:executable</literal> property is used
          to control a versioned file's filesystem-level execute
          permission bit in a semi-automated way.  This property has
          no defined values&mdash;its mere presence indicates a desire
          the execute permission bit to be kept enabled by Subversion.
          Removing this property will restore full control of the
          execute bit back to the operation system.</para>

        <para>On many operating systems, the ability to execute a file
          as a command is governed by the presence of an execute
          permission bit.  This bit usually defaults to being
          disabled, and must be explicitly enabled by the user for
          each file that needs it.  In a working copy, new files are
          being created all the time as new versions of existing files
          are received during an update.  This means that you might
          enable the execute bit on a file, then update your working
          copy, and if that file was changed as part of the update,
          its execute bit might get disabled.  So, Subversion provides
          the <literal>svn:executable</literal> property as a way to
          keep the execute bit enabled.</para>

        <para>This property has no effect on filesystems that have no
          concept of an executable permission bit, such as FAT32 and
          NTFS.
          <footnote>
            <para>The Windows filesystems use file extensions (such as
              <literal>.EXE</literal>, <literal>.BAT</literal>, and
              <literal>.COM</literal>) to denote executable
              files.</para>
          </footnote>
          Also, while it has no defined values, some people choose as
          a convention a value (such as <literal>on</literal>) to use
          when setting this property.  Subversion doesn't
          care&mdash;it won't even read the property value.  But be
          careful when choosing such conventions&mdash;inexperienced
          users might mistakenly believe that the way to disable this
          functionality is to change the property value to its
          idiomatic <!-- is that the right word? --> opposite (in this
          case, <literal>off</literal>).  Finally, this property is
          valid only on files, not on directories.</para>

      </sect3>

      <sect3 id="svn-ch-6-sect-2.3.2">
        <title><literal>svn:mime-type</literal></title>
        
        <para>The <literal>svn:mime-type</literal> property serves
          many purposes in Subversion.  Besides being a
          general-purpose storage location for a file's Multipurpose
          Internet Mail Extensions (MIME) classification, the value of
          this property determines several behavioral characteristics
          of Subversion itself.</para>

        <para>For example, if a file's
          <literal>svn:mime-type</literal> property is set to a
          non-text MIME type (generally, something that doesn't begin
          with <literal>text/</literal>, though there are exceptions),
          Subversion will assume that the file contains
          binary&mdash;that is, not human-readable&mdash;data.  One of
          the benefits that Subversion typically provides is
          contextual, line-based merging of changes received from the
          server during an update into your working file.  But for
          files that are believe to contain binary data, there is no
          concept of <quote>line</quote> of data.  So, for those
          files, Subversion does not attempt to perform contextual
          merges during updates.  Instead, any time you have locally
          modified a binary working copy file that is also being
          updated, your file is renamed with a
          <filename>.orig</filename> extension, and then Subversion
          stores a new working copy file that contains the changes
          received during the update, but not your own local
          modifications, at the original filename.  This behavior is
          really for the protection of the user against failed
          attempts at performing contextual merges on files that
          simply cannot be contextually merged.</para>

        <para>Subversion assists users by running a binary-detection
          algorithm in the <command>svn import</command> and
          <command>svn add</command> subcommands.  These subcommands
          make a heuristical guess at a file's
          <quote>binary-ness</quote>, and then set the
          <literal>svn:mime-type</literal> property to
          <literal>application/octet-stream</literal> (the generic
          <quote>this is a collection of bytes</quote> MIME type) on
          any files that are deemed binary.  If Subversion guesses
          wrong, or if you wish to set the
          <literal>svn:mime-type</literal> property to something more
          accurate&mdash;perhaps <literal>image/png</literal> or
          <literal>application/x-shockwave-flash</literal>&mdash;you
          can always remove or hand-edit the property.</para>

        <para>Finally, if the <literal>svn:mime-type</literal>
          property is set, then the Subversion Apache module will use
          its value to populate the <literal>Content-type:</literal>
          HTTP header when responding to GET request.  This gives a
          crucial clue to about how to display a file when perusing
          your repository with a web browser.</para>

      </sect3>

      <sect3 id="svn-ch-6-sect-2.3.3">
        <title><literal>svn:ignore</literal></title>

        <para>The <literal>svn:ignore</literal> property contains a
          list of file patterns which certain Subversion operations
          will ignore.  Perhaps the most commonly used special
          property, it works in conjunction with the
          <literal>global-ignores</literal> run-time configuration
          option (see <xref linkend="svn-ch-6-sect-1.3.2" />) to
          filter unversioned files and directories out of commands
          like <command>svn status</command>.</para>

        <para>The rationale behind the <literal>svn:ignore</literal>
          property is easily explained.  Subversion does not assume
          that every file or subdirectory in a working copy directory
          is intended for version control.  Resources must be
          explicitly placed under Subversion's management using the
          <command>svn add</command> command.  As a result, there are
          often many resources in a working copy that are not
          versioned.</para>

        <para>Now, the <command>svn status</command> command displays
          as part of its output every unversioned file or subdirectory
          in a working copy that is not already filtered out by the
          <literal>global-ignores</literal> option (or its built-in
          default value).  This is done so that users can see if
          perhaps they've forgotten to add a resource to version
          control.</para>

       <para>But Subversion cannot possibly guess the names of
          every resource that should be ignored.  Also, quite often
          there are things that should be ignored in
          <emphasis>every</emphasis> working copy of a particular
          repository.  To force every user of that repository to add
          patterns for those resources to their run-time configuration
          areas would be not just a burden, but has the potential to
          clash with the configuration needs of other working copies
          that the user has checked out.</para>

        <para>The solution is to store ignore patterns that are unique
          to the resources likely to appear in a given directory with
          the directory itself.  Common examples of unversioned
          resources that are basically unique to a directory, yet
          likely to appear there, include output from program
          compilations.  Or&mdash;to use an example more appropriate
          to this book&mdash;the HTML, PDF, or PostScript files
          generated as the result of a conversion of some source
          DocBook XML files to a more legible output format.</para>

        <sidebar>
          <title>Ignore Patterns for CVS Users</title>
        
          <para>The Subversion <literal>svn:ignore</literal> property
            is very similar in syntax and function to the CVS
            <filename>.cvsignore</filename> file.  The two systems use
            the ignore patterns at some different times, and there are
            slight discrepencies in what the ignore patterns apply to.
            Also, Subversion does not recognize the use of the
            <literal>!</literal> pattern as a reset back to having no
            ignore patterns at all.  But the most common uses of the
            <filename>.cvsignore</filename> are quite functional in
            Subversion.  In fact, if you are migrating a CVS working
            copy to Subversion, you can directly migrate the ignore
            patterns by the <filename>.cvsignore</filename> file as
            input file to the <command>svn propset</command>
            command:</para>
       
          <screen>
$ svn pset svn:ignore -F .cvsignore .
property `svn:ignore' set on '.'
$
</screen>        

        </sidebar>

        <para>For this purpose, the <literal>svn:ignore</literal>
          property is the solution.  Its value is a multi-line
          collection of file patterns, one pattern per line.  The
          property is set on the directory in which your wish the
          patterns to be applied.
          <footnote>
            <para>The patterns are strictly for that
              directory&mdash;they do not carry recursively into
              subdirectories.</para>
          </footnote>
          For example, say you have the following output from
          <command>svn status</command>:</para>

       <screen>
$ svn status calc
 M     calc/button.c
?      calc/calculator
?      calc/data.c
?      calc/debug_log
?      calc/debug_log.1
?      calc/debug_log.2.gz
?      calc/debug_log.3.gz
</screen>

        <para>In this example, you have made some property
          modifications to <filename>button.c</filename>, but in your
          working copy you also have some unversioned files, in this
          case, the latest <filename>calculator</filename> program
          that you've compiled from your source code, a source file
          named <filename>data.c</filename>, and a set of debugging
          output logfiles.  Now, you know that your build system
          always results in the <filename>calculator</filename>
          program being generated.
          <footnote>
            <para>Isn't that the whole point of a build system?</para>
          </footnote>
          And you know that your test suite always leaves those
          debugging log files lying around.  These facts are true for
          all working copies, not just your own.  And you know that
          you aren't interested in seeing those things every time you
          run <command>svn status</command>.  So you use <command>svn
          propedit svn:ignore calc</command> to add some ignore
          patterns to the <filename>calc</filename> directory.  For
          example, you might add this as the new value of the
          <literal>svn:ignore</literal> property:</para>

        <programlisting>
calc
debug_log*
</programlisting>

        <para>After you've added this property, you will now have a
          local property modification on the <filename>calc</filename>
          directory.  But notice what else is different about your
          <command>svn status</command> output:</para>

        <screen>
$ svn status
 M     calc
 M     calc/button.c
?      calc/data.c
</screen>

        <para>Now, all the cruft is missing from the output!  Of
          course, those files are still in your working copy.
          Subversion is simply not reminding you that they are present
          and unversioned.  And now with all the trivial noise removed
          from the display, you are left with more interesting
          items&mdash; such as that source code file that you probably
          forgot to add to version control.</para>

      </sect3>

      <!-- cmpilato was here -->

      <sect3 id="svn-ch-6-sect-2.3.4">
        <title><literal>svn:keywords</literal></title>

        <para>Subversion has the ability to substitute
          <firstterm>keywords</firstterm>&mdash;pieces of useful,
          dynamic information about a versioned file&mdash;into the
          contents of the file itself.  Keywords generally describe
          information about the last time the file was modified.
          Because this information changes each time the file changes,
          and more importantly, just <emphasis>after</emphasis> the
          file changes, it is a hassle for any process except the
          version control system to keep the data completely
          up-to-date.  Left to human authors, the information would
          inevitably grow stale.</para>

        <para>For example, say you have a document in which you would
          like to display the last date on which it was modified.  You
          could burder every author of that document to, just before
          committing their changes, also tweak the part of the
          document that describes when it was last changed.  But
          sooner or later, someone would forget to do that.  Instead
          simply ask Subversion to perform keyword substitution on the
          <literal>LastChangedDate</literal> keyword.  You control
          where the keyword is inserted into your document by placing
          a <firstterm>keyword anchor</firstterm> at the desired
          location in the file.  This anchor is just a string of text
          formatted as
          <literal>$</literal><replaceable>KeywordName</replaceable><literal>$</literal></para>

        <para>Subversion defines the list of keywords available for
          substitution.  That list contains the following five
          keywords, some of which have shorter aliases that you can
          also use:</para>

        <variablelist>
          <varlistentry>
            <term><literal>LastChangedDate</literal></term>
            <listitem>
              <para>This keyword describes the last time the file was
                changed in the repository, and looks something like
                <literal>$LastChangedDate: 2002-07-22 21:42:37 -0700
                (Mon, 22 Jul 2002) $</literal>.  It may be abbreviated
                as <literal>Date</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LastChangedRevision</literal></term>
            <listitem>
              <para>This keyword describes the last revision in which
                this file changed in the repository, and looks
                something like <literal>$LastChangedRevision: 144
                $</literal>.  It may be abbreviated as
                <literal>Rev</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LastChangedBy</literal></term>
            <listitem>
              <para>This keyword describes the last user to change
                this file in the repository, and looks something like
                <literal>$LastChangedBy: joe $</literal>.  It may be
                abbreviated as <literal>Author</literal></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>HeadURL</literal></term>
            <listitem>
              <para>This keyword describes the full URL to the latest
                version of the file in the repository, and looks
                something like <literal>$HeadURL:
                http://svn.collab.net/repos/trunk/README $</literal>.
                It may be abbreviated as
                <literal>URL</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>Id</literal></term>
            <listitem>
              <para>This keyword is compressed combination of the
                other keywords.  Its substitution looks something like
                <literal>$Id: calc.c 148 2002-07-28 21:30:43 sally
                $</literal>, and is interpreted to mean that the file
                <filename>calc.c</filename> was last changed in revision
                148 on the evening of July 28, 2002 by the user
                <literal>sally</literal>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Simply adding keyword anchor text to your file does
          nothing special.  Subversion will never attempt to perform
          textual substitutions on your file contents unless
          explicitly asked to do so.  After all, you might be writing
          a document
          <footnote>
            <para>&hellip; or maybe even a section of a book &hellip;</para>
          </footnote> 
          about how to use keywords, and you don't want Subversion to
          substitute your beautiful examples of un-substited keyword
          anchors!</para>

        <para>To tell Subversion whether or not to substitute keywords
          on a particular file, we again turn to the property-related
          subcommands.  The <literal>svn:keywords</literal> property,
          when set on a versioned file, controls which keywords will
          be substituted on that file.  The value is a space-delimited
          list of the keyword names or aliases found in the previous
          table.</para>

        <para>For example, say you have a versioned file named
          <filename>weather.txt</filename> that looks like
          this:</para>

        <programlisting>
Here is the latest report from the front lines.
$LastChangedDate$
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</programlisting>
        
        <para>With no <literal>svn:keywords</literal> property set on
          that file, Subversion will do nothing special.  Now, let's
          enable substitution of the
          <literal>LastChangedDate</literal> keyword.</para>

        <screen>
$ svn propset svn:keywords "LastChangedDate Author" weather.txt
property `svn:keywords' set on 'weather.txt'
$
</screen>        

        <para>Now you have made a local property modification on the
          <filename>weather.txt</filename> file.  You will see no
          changes to the file's contents (unless you made some of your
          own prior to setting the property).  Notice that the file
          contained a keyword anchor for the <literal>Rev</literal>
          keyword, yet we did not include that keyword in the property
          value we set.  Subversion will happily ignore requests to
          substitute keywords that are not present in the file, and
          will not substitute keywords that are not present in the
          <literal>svn:keywords</literal> property value.</para>

        <sidebar>
          <title>Keywords and Spurious Differences</title>

          <para>The user-visible result of keyword substitution might
            lead you to think that every version of a file with that
            feature in use differs from the previous version in at
            least the area where the keyword anchor was placed.
            However, this is actually not the case.  While checking
            for local modifications during <command>svn
            diff</command>, and before transmitting those local
            modifications during <command>svn commit</command>,
            Subversion <quote>un-substitutes</quote> any keywords that
            it previously substituted.  The result is that the
            versions of the file that are stored in the repository
            contain only the real modifications that users make to the
            file.</para>

        </sidebar>

        <para>Immediately after you commit this property change,
          Subversion will update your working file with the new
          substitute text.  Instead of seeing your keyword anchor
          <literal>$LastChangedDate$</literal>, you'll see its
          substituted result.  That result also contains the name of
          the keyword, and continues to be bounded by the dollar sign
          (<literal>$</literal>) characters.  And as we predicted, the
          <literal>Rev</literal> keyword was not substituted because
          we didn't ask for it to be.</para>

        <screen>
Here is the latest report from the front lines.
$LastChangedDate: 2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002) $
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</screen>
        
        <para>If someone else now commits a change to
          <filename>weather.txt</filename>, your copy of that file
          will continue to display the same substituted keyword
          value&mdash;until you update your working copy.  At that
          time the keywords in your <filename>weather.txt</filename>
          file will be re-substituted again with information that
          reflects the most recent known commit to that file.</para>

      </sect3>

      <sect3 id="svn-ch-6-sect-2.3.5">
        <title><literal>svn:eol-style</literal></title>

        <para>Unless otherwise noted using a versioned file's
          <literal>svn:mime-type</literal> property, Subversion
          assumes that file contains human-readable data.  Generally
          speaking, Subversion only uses this knowledge to determine
          if contextual differences reports for that file are
          possible.  Otherwise, to Subversion, bytes are bytes.</para>
        
        <para>This means that by default, Subversion doesn't pay any
          attention to the type of <firstterm>end-of-line (EOL)
          markers</firstterm> used in your files.  Unfortunately,
          different operating system use different tokens to represent
          the end of a line of text in a file.  For example, the usual
          line ending token used by software on the Windows platform
          is a pair of ASCII control characters&mdash;carriage return
          (<literal>CR</literal>) and line feed
          (<literal>LF</literal>).  Unix software, however, just uses
          the <literal>LF</literal> character to denote the end of a
          line.</para>

        <para>Not all of the various tools on these operation systems
          are prepared to understand files that contain line endings
          in a format that differs from the <firstterm>native line
          ending style</firstterm> of the operating system on which
          they are running.  Common results are that Unix programs
          treat the <literal>CR</literal> character present in Windows
          files as a regular character (usually rendered as
          <literal>^M</literal>), and that Windows programs combine
          all of the lines of a Unix file into one giant line because
          no carriage return-linefeed (or <literal>CRLF</literal>)
          character combination was found to denote the end of
          line.</para>

        <para>This sensitivity to foreign EOL markers can become
          frustraing for folks who share a file across different
          operating systems.  For example, consider a source code
          file, and developers that edit this file on both Windows and
          Unix systems.  If all the developers always use tools which
          preserve the line ending style of the file, no problems
          occur.</para>

        <para>But in practice, many common tools either fail to
          properly read a file with foreign EOL markers, or they
          convert the file's line endings to the native style when the
          file is saved.  If the former is true for a developer, he
          has to use an external conversion utility (such as
          <command>dos2unix</command> or its companion,
          <command>unix2dos</command>) to prepare the file for
          editing.  The latter case requires no extra preparation.
          But both cases result in a file that differs from the
          original quite literally on every line of the file!  Prior
          to committing his changes, the has two choices.  Either he
          can use a conversion utility to restore the modified file to
          the same line ending style that it was in before his edits
          were made.  Or, he can simply commit the file&mdash;new EOL
          markers and all.</para>

        <para>The result of scenarios like there include wasted time
          and unnecessary modifications to committed files.  Wasted
          time is painful enough.  But when commits change every line
          in a file, this complicates the job of determining which of
          those lines were changed in a non-trivial way.  Where was
          that bug really fixed?  On what line was a syntax error
          introduced?</para>

        <para>The solution this problem is the
          <literal>svn:eol-style</literal> property.  When this
          property is set to a valid value, Subversion uses it to
          determine what special processing to perform on the file so
          that the file's line ending style isn't flip-flopping with
          every commit that comes from a different operating
          system.  The valid values are:</para>

        <variablelist>
          <varlistentry>
            <term><literal>native</literal></term>
            <listitem>
              <para>This causes the file to contain the EOL markers
                that are native to the operating system on which
                Subversion was run.  In other words, if a user on a
                Windows machine checks out a working copy that
                contains a file with a
                <literal>svn:eol-style</literal> property set to
                <literal>native</literal>, that file will contain
                <literal>CRLF</literal> EOL markers.  A unix user
                checking out a working copy which contains the same
                file will see <literal>LF</literal> EOL markers in his
                copy of the file.</para>

              <para>Note that Subversion will actually store the file
                in the repository using normalized
                <literal>LF</literal> EOL markers regardless of the
                operating system.  This is basically transparent to
                the user, though.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>CRLF</literal></term>
            <listitem>
              <para>This causes the file to contain
                <literal>CRLF</literal> sequences for EOL markers.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LF</literal></term>
            <listitem>
              <para>This causes the file to contain
                <literal>LF</literal> characters for EOL markers.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>CR</literal></term>
            <listitem>
              <para>This causes the file to contain
                <literal>CR</literal> characters for EOL markers.
                This line ending style is not very common.  It was
                used on older Macintosh platforms (on which Subversion
                doesn't even run).</para>
            </listitem>
          </varlistentry>
        </variablelist>
        
      </sect3>

      <sect3 id="svn-ch-6-sect-2.3.6">
        <title><literal>svn:externals</literal></title>

        <para>The <literal>svn:externals</literal> property contains
          instructions for Subversion to populate a versioned
          directory with one or more other checked-out Subversion
          working copies.  For more information on this keyword and
          its use, see <xref linkend="svn-ch-6-sect-3"/>.</para>

      </sect3>
    </sect2>
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 3:  EXTERNALS DEFINITIONS                           *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-6-sect-3">
    <title>Externals</title>
    
    <para>Sometimes it is useful to construct a working copy that is
      made out of a number of different checkouts.  For example, you
      may want different subdirectories to come from different
      locations in a repository, or perhaps from different
      repositories altogether.  You could certainly setup such a
      scenario by hand&mdash;using <command>svn checkout</command> to
      create the sort of nested working copy structure you are trying
      to achieve.  But if this layout is important for everyone who
      uses your repository, every other user will need to perform the
      same checkout operations that you did.</para>

    <para>Fortunately, Subversion provides support for
      <firstterm>externals definitions</firstterm>.  An externals
      definition is a mapping of a local directory to the URL of a
      versioned resource.  In Subversion, you declare externals
      definitions in groups using the <literal>svn:externals</literal>
      property.  This property is set on a versioned directory, and
      its value is a multi-line table of subdirectories (relative to
      the versioned directory on which the property is set) and
      Subversion repository URLs.</para>

    <screen>
$ svn propget svn:externals calc
third-party/sounds          http://sounds.red-bean.com/repos
third-party/skins           http://skins.red-bean.com/repositories/skinproj
third-party/skins/toolkit   http://svn.red-bean.com/repos/skin-maker
</screen>

    <para>The convenience of the <literal>svn:externals</literal>
      property is that once it is set on a versioned directory,
      everyone who checks out a working copy with that directory also
      gets the benefit of the externals definition.  In other words,
      once one person has made the effort to define those nested
      working copy checkouts, no one else has to
      bother&mdash;Subversion will, upon checkout of the original
      working copy, also checkout the external working copies.</para>

    <para>Note the previous externals definition example.  When
      someone checks out a working copy of the
      <filename>calc</filename> directory, Subversion also continues
      to checkout the items found in its externals definition.</para>

    <screen>
$ svn checkout http://svn.example.com/repos/calc
A  calc
A  calc/Makefile
A  calc/integer.c
A  calc/button.c
Checked out revision 148.

Fetching external item into calc/third-party/sounds
A  calc/third-party/sounds/ding.ogg
A  calc/third-party/sounds/dong.ogg
A  calc/third-party/sounds/clang.ogg
&hellip;
A  calc/third-party/sounds/bang.ogg
A  calc/third-party/sounds/twang.ogg
Checked out revision 14.

Fetching external item into calc/third-party/skins
&hellip;
</screen>

    <para>If you need to change the externals definition, you can do
      so using the regular property modification subcommands.  When
      you commit a change to the <literal>svn:externals</literal>
      property, Subversion will syncronize the checked-out items
      against the changed externals definition when you next run
      <command>svn update</command>.  The same thing will happen when
      others update their working copies and receive your changes to
      the externals definition.</para>

    <!-- ### TECH-CHECK: Does this stuff really work?  Ben had a
         comment here that was more than a little doubtful.  We *do*
         have externals tests in place.  Perhaps Ben's update did nothing
         because his directory was already up-to-date?  -->
    
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 4:  VENDOR BRANCHES                                 *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-6-sect-4">
    <title>Vendor branches</title>

    <para>Sometimes you want to manage modified third-party source
      code inside your Subversion repository, while still tracking
      upstream releases.  In CVS this would have been called a
      <quote>vendor branch</quote>.  Subversion doesn't have a formal
      <quote>vendor branch</quote>, but it is sufficiently flexible
      that you can still do much the same thing.</para>
    
    <para>The general procedure goes like this.  You create a top
      level directory (we'll use <filename>/vendor</filename>) to hold
      the vendor branches.  Then you import the third party code into
      a subdirectory of <filename>/vendor</filename>, and copy it into
      <filename>/trunk</filename> where you make your local changes.
      With each new release of the code you are tracking you bring it
      into the vendor branch and merge the changes into
      <filename>/trunk</filename>, resolving whatever conflicts occur
      between your local changes and the upstream changes.</para>

    <para>Let's try and make this a bit clearer with an
      example.</para>

    <para>First, the initial import.</para>
    
    <screen>
      $ svn mkdir http://svnhost/repos/vendor/foobar
      $ svn import http://svnhost/repos/vendor/foobar ~/foobar-1.0 current
    </screen>
    
    <para>Now we've got the current version of the foobar project in
      <filename>/vendor/foobar/current</filename>.  We make another
      copy of it so we can always refer to that version, and then copy
      it into the trunk so you can work on it.</para>
    
    <screen>
      $ svn copy http://svnhost/repos/vendor/foobar/current    \
                 http://svnhost/repos/vendor/foobar/foobar-1.0 \
                 -m `tagging foobar-1.0'
      $ svn copy http://svnhost/repos/vendor/foobar/foobar-1.0 \
                 http://svnhost/repos/trunk/foobar             \
                 -m `bringing foobar-1.0 into trunk'
    </screen>

    <para>Now you just check out a copy of
    <filename>/trunk/foobar</filename> and get to work!</para>

    <para>Later on, the developers at FooBar Widgets, Inc release a
      new version of their code, so you want to update the version of
      the code you're using.  First, you check out the
      <filename>/vendor/foobar/current</filename> directory, then copy
      the new release over that working copy, handle any renames,
      additions or removals manually, and then commit.</para>

    <screen>
      $ svn checkout http://svnhost/repos/vendor/foobar/current ~/current
      $ cd ~/foobar-1.1
      $ tar -cf - . | (cd ~/current ; tar -xf -)
      $ cd ~/current
      $ mv foobar.c main.c
      $ svn move main.c foobar.c
      $ svn delete dead.c
      $ svn add doc
      $ svn add doc/*
      $ svn commit -m `importing foobar 1.1 on vendor branch'
    </screen>

    <para>Whoa, that was complicated. Don't worry, most cases are far
      simpler. </para>

    <para>What happened? foobar 1.0 had a file called
      <filename>main.c</filename>.  This file was renamed to
      <filename>foobar.c</filename> in 1.1.  So your working-copy had
      the old <filename>main.c</filename> which Subversion knew about, 
      and the new <filename>foobar.c</filename> which Subversion did 
      not know about.  You rename <filename>foobar.c</filename> to 
      <filename>main.c</filename> and <command>svn mv</command> it 
      back to the new name.  This way, Subversion will know that 
      <filename>foobar.c</filename> is a descendant of 
      <filename>main.c</filename>.  <filename>dead.c</filename> has 
      been removed in 1.1, and they have finally written some 
      documentation, so you add that.</para>

    <para>Next you copy <filename>/vendor/foobar/current</filename> to
      <filename>/vendor/foobar/foobar-1.1</filename> so you can always
      refer back to version 1.1, like this.</para>

    <screen>
      $ svn copy http://svnhost/repos/vendor/foobar/current    \
                 http://svnhost/repos/vendor/foobar/foobar-1.1 \
                 -m `tagging foobar-1.1'
    </screen>

    <para>Now that you have a pristine copy of foobar 1.1 in
      <filename>/vendor</filename>, you just have to merge their
      changes into <filename>/trunk</filename> and you're done.  That
      looks like this.</para>

    <screen>
      $ svn checkout http://svnhost/repos/trunk/foobar ~/foobar
      $ cd ~/foobar
      $ svn merge http://svnhost/repos/vendor/foobar/foobar-1.0 \
                  http://svnhost/repos/vendor/foobar/foobar-1.1
      $
      &hellip; # resolve all the conflicts between their changes and your changes
      $ svn commit -m `merging foobar 1.1 into trunk'
    </screen>
    
    <para>There, you're done.  You now have a copy of foobar 1.1 with
      all your local changes merged into it in your tree.</para>

    <para>Vendor branches that have more than several deletes,
      additions and moves can use the
      <command>svn_load_dirs.pl</command> script that comes with the
      Subversion distribution.  This script automates the above
      importing steps to make sure that mistakes are minimized.  You
      still need to use the merge commands to merge the new versions
      of foobar into your own local copy containing your local
      modifications.</para>

    <para>This script has the following enhancements over <command>svn
    import</command>:</para>

    <itemizedlist>
      <listitem>
        <para>Can be run at any point in time to bring an existing
          directory in the repository to exactly match an external
          directory.  This script runs all the <command>svn
          add</command>, <command>svn rm</command> and optionally any
          <command>svn mv</command> commands as necessary.</para>
      </listitem>

      <listitem>
        <para>Optionally tag the newly imported directory.</para>
      </listitem>

      <listitem>
        <para>Optionally add arbitrary properties to files and
          directories that match a regular expression.</para>
      </listitem>

    </itemizedlist>

    <para>This script takes care of complications where Subversion
      requires a commit before renaming a file or directory twice,
      such as if you had a vendor branch that renamed
      <filename>foobar-1.1/docs/doc.ps</filename> to
      <filename>foobar-1.2/documents/doc-1.2.ps</filename>.  Here, you
      would rename <filename>docs</filename> to
      <filename>documents</filename>, perform a commit, then rename
      <filename>doc.ps</filename> to <filename>doc-1.2.ps</filename>.
      You could not do the two renames without the commit, because
      <filename>doc.ps</filename> was already moved once from
      <filename>docs/doc.ps</filename> to
      <filename>documents/doc.ps</filename>.</para>

    <para>This script always compares the directory being imported to
      what currently exists in the Subversion repository and takes the
      necessary steps to add, delete and rename files and directories
      to make the subversion repository match the imported directory.
      As such, it can be used on an empty subversion directory for the
      first import or for any following imports to upgrade a vendor
      branch.</para>

    <para>For the first foobar-1.0 release located in
      <filename>~/foobar-1.0</filename>:</para>

    <screen>
      $ svn_load_dirs.pl -t foobar-1.0                      \
                         http://svnhost/repos/vendor/foobar \
                         current                            \
                         ~/foobar-1.0
    </screen>

    <para><command>svn_load_dirs.pl</command> takes three mandatory
      arguments.  The first argument, <systemitem
      class="url">http://svnhost/repos/vendor/foobar</systemitem>, is
      the URL to the base Subversion directory to work in.  In this
      case, we're working in the <filename>vendor/foobar</filename>
      part of the Subversion repository.  The next argument,
      <filename>current</filename>, is relative to the first and is
      the directory where the current import will take place, in this
      case <systemitem
      class="url">http://svnhost/repos/vendor/foobar/current</systemitem>.
      The last argument, <filename>~/foobar-1.0</filename>, is the
      directory to import.  Finally, the optional
      <option>-t</option> command line option is also relative
      to <systemitem
      class="url">http://svnhost/repos/vendor/foobar</systemitem> and
      tells <command>svn_load_dirs.pl</command> to create a tag of the
      imported directory in <systemitem
      class="url">http://svnhost/repos/vendor/foobar/foobar-1.0</systemitem>.</para>

    <para>The import of foobar-1.1 would be taken care of in the same
      way:</para>

    <screen>
      $ svn_load_dirs.pl -t foobar-1.1                      \
                         http://svnhost/repos/vendor/foobar \
                         current                            \
                         ~/foobar-1.1
    </screen>

    <para>The script looks in your current <systemitem
      class="url">http://svnhost/repos/vendor/foobar/current</systemitem>
      directory and sees what changes need to take place for it to
      match <filename>~/foobar-1.1</filename>.  The script is kind
      enough to notice that there are files and directories that exist
      in 1.0 and not in 1.1 and asks if you want to perform any
      renames.  At this point, you can indicate that
      <filename>main.c</filename> was renamed to
      <filename>foobar.c</filename> and then indicate that no further
      renames have taken place.</para>

    <para>The script will then delete <filename>dead.c</filename> and
      add <filename>doc</filename> and <filename>doc/*</filename> to
      the Subversion repository and finally create a tag foobar-1.1 in
      <systemitem
      class="url">http://svnhost/repos/vendor/foobar/foobar-1.1</systemitem>.</para>

    <para>The script also accepts a separate configuration file for
      applying properties to specific files and directories matching a
      regular expression that are <emphasis>added</emphasis> to the repository.
      This script will not modify properties of already existing files
      or directories in the repository.  This configuration file is
      specified to <command>svn_load_dirs.pl</command> using the
      <option>-p</option> command line option.  The format of
      the file is either two or four columns.</para>

    <para><literal>regular_expression control property_name
        property_value</literal></para>

    <para>The <literal>regular_expression</literal> is a Perl style
      regular expression.  The <literal>control</literal> column must
      either be set to <literal>break</literal> or
      <command>cont</command>.  It is used to tell
      <command>svn_load_dirs.pl</command> if the following lines in
      the configuration file should be examined for a match or if all
      matching should stop.  If <literal>control</literal> is set to
      <command>break</command>, then no more lines from the
      configuration file will be matched.  If
      <literal>control</literal> is set to <command>cont</command>,
      which is short for continue, then more comparisons will be made.
      Multiple properties can be set for one file or directory this
      way.  The last two columns, <literal>property_name</literal> and
      <literal>property_value</literal> are optional and are applied
      to matching files and directories.</para>

    <para>If you have whitespace in any of the
      <literal>regular_expression</literal>,
      <literal>property_name</literal> or
      <literal>property_value</literal> columns, you must surround the
      value with either a single or double quote.  You can protect
      single or double quotes with a \ character.  The \ character is
      removed by this script <emphasis>only</emphasis> for whitespace or quote
      characters, so you do not need to protect any other characters,
      beyond what you would normally protect for the regular
      expression.</para>

    <para>This sample configuration file was used to load on a Unix
      box a number of Zip files containing Windows files with
      <literal>CRLF</literal> end of lines.</para>

    <screen>
      \.doc$              break   svn:mime-type   application/msword
      \.ds(p|w)$          break   svn:eol-style   CRLF
      \.ilk$              break   svn:eol-style   CRLF
      \.ncb$              break   svn:eol-style   CRLF
      \.opt$              break   svn:eol-style   CRLF
      \.exe$              break   svn:mime-type   application/octet-stream
      dos2unix-eol\.sh$   break
      .*                  break   svn:eol-style   native
    </screen>

    <para>In this example, all the files should be converted to the
      native end of line style, which the last line of the
      configuration handles.  The exception is
      <command>dos2unix-eol.sh</command>, which contains embedded
      <literal>CR</literal>'s used to find and replace Windows
      <literal>CRLF</literal> end of line characters with Unix's
      <literal>LF</literal> characters.  Since <command>svn</command>
      and <command>svn_load_dirs.pl</command> convert all
      <literal>CR</literal>, <literal>CRLF</literal> and
      <literal>LF</literal>'s to the native end of line style when
      <literal>svn:eol-style</literal> is set to
      <literal>native</literal>, this file should be left untouched.
      Hence, the <command>break</command> with no property
      settings.</para>

    <para>The Windows Visual C++ and Visual Studio files
      (<filename>*.dsp</filename>, <filename>*.dsw</filename>, etc.)
      should retain their <literal>CRLF</literal> line endings on any
      operating system and any <filename>*.doc</filename> files are
      always treated as binary files, hence the
      <literal>svn:mime-type</literal> setting of
      <literal>application/msword</literal>.</para>

  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
