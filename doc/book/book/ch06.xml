<!-- This chapter is slated for mass rewriting.  If you're adding
     content or fixing things, please understand that your changes,
     while certainly influencing the resultant chapter, might
     themselves get lost in the mix. -->
<chapter id="svn-ch-6">
  <title>Advanced Topics</title>

  <simplesect id="svn-ch-6-sect-0">

    <para>If you've been reading this book chapter by chapter, from
      start to finish, you should by now have acquired enough
      knowledge to use the Subversion client to perform the most
      common version control operations.  You understand how to
      checkout a working copy from a Subversion repository.  You are
      comfortable with submitting and receiving changes using the
      <command>svn commit</command> and <command>svn update</command>
      functions.  You've probably even developed a reflex which causes
      you to run the <command>svn status</command> command almost
      unconsciously.  For all intents and purposes, you are ready to
      use Subversion in a typical environment.</para>

    <para>But the Subversion feature set doesn't stop at "common
      version control operations".</para>

    <para>This chapter highlights some of Subversion's features which
      aren't quite so regularly used.  In it, we will discuss
      Subversion's property (or <quote>metadata</quote>) support, and
      how to modify Subversion's default behaviors by tweaking its
      run-time configuration area.  We will describe how you can use
      module definitions to instruct Subversion to pull data from
      multiple repositories.  We'll cover in detail some of the
      additional client- and server-side tools that are part of the
      Subversion distribution.</para>

    <para>Before reading this chapter, you should be familiar with the
      basic file and directory versioning capabilities of Subversion.
      If you haven't already read about those, or if you need a
      refresher, we crecommend that you check out <xref
      linkend="svn-ch-1" /> and <xref linkend="svn-ch-2" />.  Once
      you've mastered the basics and consumed this chapter, you'll be
      a Subversion power-user&mdash;or we'll refund your money!
      <footnote>
        <para>This offer applies only to those who, like most folks,
          pay nothing for Subversion.</para>
      </footnote>
    </para>

  </simplesect>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 1:  RUNTIME CONFIGURATION AREA                      *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-6-sect-1">
    <title>Run-time Configuration Area</title>
    
    <para>Subversion provides many optional behaviors that can be
      controlled by the user.  Many of these options are of the kind
      that a user would wish to apply to all Subversion operations.
      So, rather than forcing users to remember command-line arguments
      for specifying these options, and to use them for each and every
      operation they perform, Subversion uses configuration files,
      segregated into a Subversion configuration area.</para>

    <para>The Subversion <firstterm>configuration area</firstterm> is
      a two-tiered heirarchy of option names and their values.
      Usually, this boils down to a special directory which contains
      <firstterm>configuration files</firstterm> (the first tier),
      which are just text files in standard INI format (with
      <quote>sections</quote> providing the second tier).  These files
      can be easily edited using your favorite text editor (such as
      emacs or vi), and contain directives read by the client to
      determine which of several optional behaviors the user
      prefers.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-1.1">
      <title>Configuration Area Layout</title>

      <para>The first time that the <command>svn</command>
        command-line client is executed, it creates a per-user
        configuration area.  On Unix-like systems, this area appears
        as a directory named <filename>.subversion</filename> in the
        user's home directory.  On Win32 systems, Subversion creates a
        folder named <filename>Subversion</filename>, typically inside
        the <filename>Application Data</filename> area of the user's
        profile directory.  However, on this platform the exact
        location differs from system to system, and is dictated by the
        Windows registry.  We will refer to the per-user configuration
        area using its Unix name,
        <filename>.subversion</filename>.</para>

      <para>In addition to the per-user configuration area, Subversion
        also recognizes the existence of a system-wide configuration
        area.  The gives system administrators the ability to
        establish defaults for all users on a given machine.  Note
        that the system-wide configuration area does not alone dictate
        mandatory policy&mdash;the settings in the per-user
        configuration area override those in the system-wide one, and
        command-line arguments supplied to <command>svn</command>
        program have the final word on behavior.  On Unix-like
        platforms, the sytem-wide configuration area is expected to be
        the <filename>/etc/subversion</filename> directory; on Windows
        machines, it again looks for a <filename>Subversion</filename>
        directory inside the common Application Data location (again,
        as specified by the Windows Registry).  Unlike the per-user
        case, the <command>svn</command> program does not attempt to
        create the system-wide configuration area.</para>

      <para>The <filename>.subversion</filename> directory currently
        contains three files&mdash;two configuration files
        (<filename>config</filename> and
        <filename>servers</filename>), and a
        <filename>README</filename> file which describes the INI
        format.  At the time of their creation, the files contain
        default values for each of the supported Subversion options,
        mostly commented out and grouped with textual descriptions
        about how the values for the key affect Subversion's behavior.
        To change a certain behavior, you need only to load the
        appropriate configuration file into a text editor, and modify
        the desired option value.  If at any time you wish to have the
        default settings restore to one or more of the configuration
        files, you can simply delete the file, and run some innocuous
        <command>svn</command> command, such as <command>svn
        --version</command>, and the missing file will be recreated in
        its default state.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-1.2">
      <title>Configuration and the Windows Registry</title>

      <para>In addition to the usual INI-based configuration area,
        Subversion clients running on Windows platforms may also use
        the Windows registry to hold the configuration data.  The
        option names and their values are the same as in the INI
        files.  The <quote>file/section</quote> heirarchy is
        preserved as well, though addressed in a slightly different
        fashion&mdash;in this schema, files and sections are just
        levels in the registry key tree.</para>

      <para>Subversion looks for system-wide configuration values
        under the
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion</literal>
        key.  For example, the <literal>compression</literal> option,
        which is in the <literal>miscellany</literal> section of the
        <filename>config</filename> file, would be found at
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\compression</literal>.
        Per-user configuration values should be stored under
        <literal>HKEY_CURRENT_USER\Software\Tigris.org\Subversion</literal>.
      </para>

      <para>Registry-based configuration options are parsed
        <emphasis>before</emphasis> their file-based counterparts,
        so are overridden by values found in the configuration
        files.  In other words, configuration priority is granted in
        the following order on a Windows system:</para>
      
      <orderedlist>
        <listitem>
          <para>Command-line options</para>
        </listitem>
        <listitem>
          <para>The per-user INI files</para>
        </listitem>
        <listitem>
          <para>The pre-user Registry values</para>
        </listitem>
        <listitem>
          <para>The system-wide INI files</para>
        </listitem>
        <listitem>
          <para>The system-wide Registry values</para>
        </listitem>
      </orderedlist>

      <para>Also, the Windows Registry doesn't really support the
        notion of something being <quote>commented out</quote>.
        However, Subversion will ignore any option key whose name
        begins with a hash (<literal>#</literal>) character.  This
        allows you to effectively comment out a Subversion option
        without deleting the entire key from the Registry, obviously
        simplifying the process of restoring that option.</para>

      <para>The <command>svn</command> command-line client never
        attempts to write to the Windows Registry, and will not
        attempt to create a default configuration area there.  You can
        create the keys you need using the <command>REGEDIT</command>
        program.  Alternatively, you can create a
        <filename>.REG</filename> file, and then double-click on that
        file from the Explorer shell, which will cause the data to be
        merged into your registry.</para>

      <example id="svn-ch-6-sect-1.2-ex-1">
        <title>Sample registration entries (.REG) file.</title>

        <programlisting>
REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\DEFAULT]
"#http-proxy-host"=""
"#http-proxy-port"=""
"#http-proxy-username"=""
"#http-proxy-password"=""
"#http-proxy-timeout"="0"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auth]
"#store-password"="no"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\helpers]
"#editor-cmd"="notepad"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\miscellany]
"#global-ignores"="*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#*"
"#compression"="yes"
</programlisting>
      </example>

      <para>The previous example shows the contents of a
        <filename>.REG</filename> file which contains some of most
        commonly used configuration options and their default values.
        Note the presence of both system-wide (for network
        proxy-related options) and per-user settings (editor programs
        and passoword storage, among others).  Also note that all the
        options are effectively commented out.  You need only to
        remove the hash (<literal>#</literal>) character from the
        beginning of the option names, and set the values as you
        desire.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-1.3">
      <title>The Configuration Options</title>
      
      <para>In this section, we will discuss the currently supported
        run-time configuration options.</para>

      <sect3 id="svn-ch-6-sect-1.3.1">
        <title>Servers</title>

        <para>The <filename>servers</filename> file contains
          Subversion configuration options related to the network
          layers.  There are two special section names in this
          file&mdash;<literal>groups</literal> and
          <literal>default</literal>.  The <literal>groups</literal>
          section is cross-reference table of sort.  The keys in this
          section are the names of other sections in the file; their
          values are globs which are compared against the hostnames of
          the machine to which Subversion requests are sent.</para>

        <programlisting>
[groups]
beanie-babies = *.red-bean.com
collabnet = svn.collab.net

[beanie-babies]
&hellip;

[collabnet]
&hellip;
</programlisting>

        <para>When Subversion is used over a network, it attempts to
          match the name of the server it is trying to reach with a
          group name under the <literal>groups</literal> section.  If
          a match is made, Subversion then looks for a section in the
          <filename>servers</filename> file whose name is the matched
          group's name.  From that section it reads the actual network
          configuration settions.</para>

        <para>The <literal>default</literal> section contains the
          settings which are meant for all of the servers not matched
          by one of the globs under the <literal>groups</literal>
          section.  The available options under this section are
          exactly the same as those valid for the other server
          sections in the file (except, of course, the special
          <literal>groups</literal> section), and are as
          follows:</para>

        <variablelist>
          <varlistentry>
            <term><literal>http-proxy-host</literal></term>
            <listitem>
              <para>This specifies the hostname of the proxy computer
                through which your HTTP-based Subversion requests must
                pass.  It defaults to an empty value, which means that
                Subversion will not attempt to route HTTP requests
                through a proxy computer, and will instead attempt to
                contact the destination machine directly.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-port</literal></term>
            <listitem>
              <para>This specifies the port number on the proxy host
                to use.  It defaults to an empty value.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-username</literal></term>
            <listitem>
              <para>This specifies the username to supply to the proxy
                machine.  It defaults to an empty value.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-password</literal></term>
            <listitem>
              <para>This specifies the password to supply to the proxy
                machine.  It defaults to an empty value.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-timeout</literal></term>
            <listitem>
              <para>This specifies the amount of time, in seconds, to
                wait for a server response.  If you experience
                problems with a slow network connection causing
                Subversion operations to timeout, you should increase
                the value of this option.  The default value is
                <literal>0</literal>, which instructs the underlying
                HTTP library, Neon, to use its default timeout
                setting.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>neon-debug-mask</literal></term>
            <listitem>
              <para>This is an integer mask which the underlying HTTP
                library, Neon, uses for choosing what type of
                debugging output to yield.  The default value is
                <literal>0</literal>, which will silence all debugging
                output.</para>
            </listitem>
          </varlistentry>
          <!--
          <varlistentry>
            <term><literal>svn-tunnel-agent</literal></term>
            <listitem>
              <para>This specifies the external agent program through
                which to tunnel SVN protocol requests.</para>
            </listitem>
          </varlistentry>
          -->
        </variablelist>

      </sect3>
      <sect3 id="svn-ch-6-sect-1.3.2">
        <title>Config</title>

        <para>The <filename>config</filename> file contains the rest
          of the currently available Subversion run-time options,
          those not related to networking.  There are only a few
          options in use at this time, but they are again group into
          sections in expectation of future additions.</para>

        <para>The <literal>auth</literal> section contains settings
          related to Subversion's authentication and authorization
          against the repository.  It contains:</para>

        <variablelist>
          <varlistentry>
            <term><literal>store-password</literal></term>
            <listitem>
              <para>This instructs Subversion to cache, or not to
                cache, passwords that are supplied by the user in
                response to server authentication challenges.  The
                default value is <literal>yes</literal>.  Set this to
                <literal>no</literal> to disable this on-disk password
                caching.  You can override this option for a single
                instance of the <command>svn</command> command using
                the <option>--no-auth-cache</option> command-line
                parameter (for those subcommands that support it).</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The <literal>helpers</literal> section controls which
          external applications Subversion uses to accomplish its
          tasks.  Valid options in this section are:</para>

        <variablelist>
          <varlistentry>
            <term><literal>editor-cmd</literal></term>
            <listitem>
              <para>This specifies the program Subversion will use to
                query the user for a commit log.  This program is also
                used with the <command>svn propedit</command>
                command&mdash;a temporary file is populated with the
                current value of the property the user wishes to edit,
                and the edits take places right in the editor program
                (see <xref linkend="svn-ch-6-sect-2" />).  This
                option's default value is empty.  If the option is not
                set, Subversion will fall back to checking the
                environment variables <literal>SVN_EDITOR</literal>,
                <literal>VISUAL</literal>, and
                <literal>EDITOR</literal> (in that order) for an
                editor command.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff-cmd</literal></term>
            <listitem>
              <para>This specifies the absolute path of a differencing
                program, used when Subversion generates
                <quote>diff</quote> output (such as when using the
                <command>svn diff</command> command).  The default
                value is the path of the GNU diff utility, as
                determined by the Subversion source code build
                system.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-cmd</literal></term>
            <listitem>
              <para>This specifies the absolute path of a three-way
                differencing program.  Subversion uses this program
                merge changes made by the user with those received
                from the repository.  The default value is the path of
                the GNU diff3 utility, as determined by the Subversion
                source code build system.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-has-program-arg</literal></term>
            <listitem>
              <para>This flag should be set to <literal>true</literal>
              if the program specified by the
              <literal>diff3-cmd</literal> option accepts a
              <option>--diff-program</option> command-line parameter.
              Since the <literal>diff3-cmd</literal> option's default
              value is determined at compilation time, the default
              value for the <literal>diff3-has-program-arg</literal>
              is, too.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The <literal>miscellany</literal> section is where
          everything that doesn't belong elsewhere winds up.
          <footnote>
            <para>Anyone for potluck dinner?</para> 
          </footnote>
          In this section, you can find:</para>

        <variablelist>
          <varlistentry>
            <term><literal>global-ignores</literal></term>
            <listitem>
              <para>When running the <command>svn status</command>
                command, Subversion lists unversioned files and
                directories along with the versioned ones, annotating
                them with a <literal>?</literal> character (see <xref
                linkend="svn-ch-3-sect-4.3.1" />).  Sometimes, it can
                be annoying to see uninteresting, unversioned
                items&mdash;for example, object files that result from
                a program's compilation&mdash;in this display.  The
                <literal>global-ignores</literal> option is a list of
                whitespace-delimited globs which describe the names of
                files and directories that Subversion should not
                display unless they are versioned.  The default value
                is <literal>*.o *.lo *.la #*# .*.rej *.rej .*~ *~
                .#*</literal>.  You can override this option for a
                single instance of the <command>svn status</command>
                command by using the <option>--no-ignores</option>
                command-line flag.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>compression</literal></term>
            <listitem>
              <para>This specifies whether or not Subversion should
                attempt to compress network requests made to DAV-ready
                servers.  The default value is 'yes' (though
                compression will only occur if that capability is
                compiled into the network layer).  Set this to 'no' to
                disable compression, such as when debugging network
                transmissions.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>
    </sect2>
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 2:  PROPERTIES                                      *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-6-sect-2">
    <title>Properties</title>

    <para>We've already covered in detail how Subversion stores and
      retrieves various versions of files and directories in its
      repository.  Whole chapters have been devoted to this most
      foundational piece of functionality provided by the tool.  And
      if the versioning support stopped there, Subversion would still
      be complete from version control perspective.  But it
      doesn't stop there.</para>

    <para>In addition to versioning your directories and files,
      Subversion provides interfaces for adding, modifying, and
      removing versioned metadata on each of your versioned
      directories and files.  We refer to this metadata as
      <firstterm>properties</firstterm>, and they can be thought of as
      two-column tables that map property names to arbitrary values
      attached to each item in your working copy.  Generally speaking,
      the names and values of the properties can be whatever you want
      them to be, with the constraint that the names must be
      human-readable text.  And the best part about these properties
      is that they, too, are versioned, just like the textual contents
      of your files.  You can modify, commit, and revert property
      changes as easily as committing textual changes.  And you
      receive other people's property changes as you update your
      working copy.</para>

    <sidebar>
      <title>Other Properties in Subversion</title>

      <para>Properties show up elsewhere in Subversion, too.  Just as
        files and directories may have arbitrary property names and
        values attached to them, each revision as a whole may have
        arbitrary properties attached to it.  The same constraints
        apply&mdash;human-readable, text names and anything-you-want,
        binary values&mdash;except that revision properties are not
        versioned.  See <xref linkend="svn-ch-5-sect-1.2" /> for more
        information on these unversioned properties.</para>
    </sidebar>

    <para>In this section, we will examine the utility&mdash;both to
      users of Subversion, and to Subversion itself&mdash;of property
      support.  You'll learn about the property-related
      <command>svn</command> subcommands, and how property
      modifications affect your normal Subversion workflow.
      Hopefully, you'll be convinced that Subversion properties can
      enhance your version control experience.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-2.1">
      <title>Why Properties?</title>

      <para>Properties can be very useful additions to your working
        copy.  In fact, Subversion itself uses properties to house
        special information, and as a way to denote that certain
        special processing might be needed.  Likewise, you can use
        properties for your own purposes.  Of course, anything you can
        do with properties you could also do using regular versioned
        files, but consider the following example of Subversion
        property use.</para>

      <para>Say you wish to design a website that houses many digital
        photos, and displays them with captions and a datestamp.  Now,
        your set of photos is constantly changing, so you'd like to
        have as much of this site automated as possible.  These photos
        can be quite large, so as is common with sites of this nature,
        you want to provide smaller thumbnail images to your site
        visitors.  You can do this with traditional files.  That is,
        you can have your <filename>image123.jpg</filename> and an
        <filename>image123-thumbnail.jpg</filename> side-by-side in a
        directory.  Or if you want to keep the filenames the same, you
        might have your thumbnails in a different directory, like
        <filename>thumbnails/image123.jpg</filename>.  You can also
        store your captions and datestamps in a similar fashion, again
        separated from the original image file.  Soon, your tree of
        files is a mess, and grows in multiples with each new photo
        added to the site.</para>

     <para>Now consider the same setup using Subversion's file
        properties.  Imagine having a single image file,
        <filename>image123.jpg</filename>, and then properties set on
        that file named <literal>caption</literal>,
        <literal>datestamp</literal>, and even
        <literal>thumbnail</literal>.  Now your working copy directory
        looks much more manageable&mdash;in fact, it looks like there
        are nothing but image files in it.  But your automation
        scripts know better.  They know that they can use
        <command>svn</command> (or better yet, they can use the
        Subversion language bindings&mdash;see <xref
        linkend="svn-ch-7-sect-2.3" />) to dig out the extra
        information that your site needs to display without having to
        read an index file or play path manipulation games.</para>

      <para>Of course, how (and if) you use Subversion properties is
        up to you.  As we mentioned, Subversion has it own uses for
        properties, which we'll discuss a little later in this
        chapter.  But first, let's discuss how to manipulate options
        using the <command>svn</command> program.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-2.2">
      <title>Manipulating Properties</title>

      <para>The <command>svn</command> command affords a few ways to
        add or modify file and directory properties.  For properties
        with short, human-readable values, perhaps the simplest way to
        add a new property is to specify the property name and value
        on the command-line of <command>propset</command>
        subcommand.</para>

      <screen>
$ svn propset copyright '(c) 2003 Red-Bean Software' calc/button.c
property `copyright' set on 'calc/button.c'
$
</screen>
       
      <para>Of course, we've been touting the flexibility that
        Subversion offers for your property values.  And if you are
        planning to have a multi-line textual, or even binary,
        property value, you probably do not want to supply that value
        on the command-line.  So the <command>propset</command>
        subcommand takes a <option>--file (-F)</option> option for
        specifying the name of a file which contains the new property
        value.</para>

      <screen>
$ svn propset license -F /path/to/LICENSE calc/button.c
property `license' set on 'calc/button.c'
$
</screen>

      <para>In addition to the <command>propset</command> command, the
        <command>svn</command> program supplies the
        <command>propedit</command> command.  This command uses the
        configured editor program (see <xref
        linkend="svn-ch-6-sect-1.3.2" />) to add or modify properties.
        When you run the command, <command>svn</command> invokes your
        editor program on a temporary file that contains the current
        value of the property (or which is empty, if you are adding a
        new property).  Then, you just modify that value in your
        editor program until it represents the new value you wish to
        store for the property, save the temporary file, and then exit
        the editor program.  If Subversion detects that you've
        actually changed the existing value of the property, it will
        accept that as the new property value.  If you exit your
        editor without making any changes, no property modification
        will occur.</para>

      <screen>
$ svn propedit copyright calc/button.c  ### exit the editor without changes
No changes to property `copyright' on `calc/button.c'
$
</screen>

      <para>We should note that, as with other <command>svn</command>
        subcommands, those related to properties can act on multiple
        paths at once.  This enables you to modify properties on whole
        sets of files with a single command.  For example, we could
        have done:</para>

      <screen>
$ svn propset copyright '(c) 2002 Red-Bean Software' calc/*
property `copyright' set on 'calc/Makefile'
property `copyright' set on 'calc/button.c'
property `copyright' set on 'calc/integer.c'
&hellip;
$
</screen>

      <para>All of this property adding and editing isn't really very
        useful if you can't easily get the stored property value.  So
        the <command>svn</command> program supplies two subcommands
        for displaying the names and values of properties stored on
        files and directories.  The <command>svn proplist</command>
        command will list the names of properties which exist on a
        path.  Once you know the names of the properties on the node,
        you can request their values individually using <command>svn
        propget</command>.  This command will, given a path (or set of
        paths) and a property name, print the value of the property to
        the standard output stream.</para>

      <para>You can add file or directory properties with the
        <command>svn propset</command> command.  provides a To set or
        get a property on a file or directory, use the <command>svn
        propset</command> and <command>svn propget</command> commands.
        To list all properties attached to an item, use <command>svn
        proplist</command>.  To delete a property, use <command>svn
        propdel</command>.</para>

      <screen>
$ svn proplist calc/button.c
Properties on 'calc/button.c':
  copyright
  license
$ svn propget copyright calc/button.c
(c) 2003 Red-Bean Software
</screen>

      <para>There's even a variation of the
        <command>proplist</command> command which will list both the
        name and value of all of the properties.  Simply supply the
        <option>--verbose (-v)</option> option.</para>

      <screen>
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : ================================================================
Copyright (c) 2003 Red-Bean Software.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions 
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions, and the recipe for Fitz's famous
red-beans-and-rice.
&hellip;
</screen>

      <para>The last property-related subcommand is
        <command>propdel</command>.  Since Subversion allows you to
        store properties with empty values, you can't remove a
        property altogether using <command>propedit</command> or
        <command>propset</command>.  For example, this command will
        <emphasis>not</emphasis> work:</para>

      <screen>
$ svn propset license '' calc/button.c
property `license' set on 'calc/button.c'
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : 
$
</screen>

      <para>You need to use the <command>propdel</command> command to
        delete properties altogether.  The syntax is similar to the
        other property commands:</para>

      <screen>
$ svn propdel license calc/button.c
property `foo' deleted from ''.
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
$
</screen>

      <para>You are now familiar with all of the property-related
        <command>svn</command> subcommands.</para>

      <sidebar>
        <title>Modifying Revision Properties</title>

        <para>Remember those unversioned revision properties?  You can
          modify those with the <command>svn</command> program, too.
          Simply add the <option>--revprop</option> command-line
          parameter, and specify the revision whose property you wish
          to modify.  Since revisions are global, you don't need to
          specify a path in this case as long as you are positioned in
          the working copy of the repository whose revision property
          you wish to modify.</para>

        <screen>
$ svn pset status 'compiles, but does not work' -r11 --revprop
property `status' set on repository revision '11'
$
</screen>

        <para>Note that the ability to modify these unversioned
          properties must be explicitly added by the repository
          administrator.  Since the properties aren't versioned, you
          run the risk of losing information if you aren't careful
          with your edits.  The repository administrator can setup
          methods to protect against this lossage, but by default,
          modification of unversioned properties is disabled.</para>

      </sidebar>

      <!-- ### cmpilato wuz here. -->

      <para>Properties are <emphasis>versioned</emphasis>, just like
        file contents.  This means that new properties can be merged
        into your working files, and can sometimes come into conflict
        too.  Property values need not be text, either.  For example,
        you could attach a binary property-value by using the
        <option>-F</option> switch:</para>

      <screen>
$ svn propset x-face -F joeface.jpg foo.c
property `x-face' set on 'foo.c'
</screen>

      <para>Property changes are still considered <quote>local
        modifications</quote>, and aren't permanent until you commit.
        Like textual changes, property changes can be seen by
        <command>svn diff</command>, <command>svn status</command>,
        and reverted altogether with <command>svn
        revert</command>:</para>

      <screen>
$ svn diff
Property changes on: foo.c
___________________________________________________________________
Name: color
   + green

$ svn status
_M   foo.c
</screen>

    <para>Notice that a 2nd column has appeared in the status output;
      the leading underscore indicates that you've not made any
      textual changes, but the <literal>M</literal> means you've
      modified the properties.  <command>svn status</command> tries to
      hide the 2nd <quote>property</quote> column when an item has no
      properties at all; this was a design choice, to ease new users
      into the concept.  When properties are created, edited, or
      updated on an item, that 2nd column appears forever
      after.</para>

    <para>Also: don't worry about the non-standard way that Subversion
      currently displays property differences.  You can still run
      <command>svn diff</command> and redirect the output to create a
      usable patch file.  The <command>patch</command> program will
      ignore property patches; as a rule, it ignores any noise it
      can't understand.  This does unfortunately mean that to fully
      apply a patch generated by <command>svn diff</command>, any
      property modifications will need to be applied by hand.
      Improvements in this area will be address in a future release of
      Subversion.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-6-sect-2.3">
      
     <title>Special properties</title>

      <para>Subversion has no particular policy regarding properties;
        they can be used for any purpose.  The only restriction is
        that Subversion has reserved the <literal>svn:</literal> name
        prefix for itself.  A number of special <quote>magic</quote>
        properties begin with this prefix.  We'll cover these features
        here.</para>
      
      <sect3 id="svn-ch-6-sect-2.3.1">
        <title><literal>svn:executable</literal></title>
        
        <para>This is a file-only property, and can be set to any
          value.  Its mere existence causes a file's permissions to be
          executable.</para>

      </sect3>

      <sect3 id="svn-ch-6-sect-2.3.2">
        <title><literal>svn:mime-type</literal></title>
        
        <para>At the present time, Subversion examines the
          <literal>svn:mime-type</literal> property to decide if a
          file is text or binary.  If the file has no
          <literal>svn:mime-type</literal> property, or if the
          property's value matches <literal>text/*</literal>, then
          Subversion assumes it is a text file.  If the file has the
          <literal>svn:mime-type</literal> property set to anything
          other than <literal>text/*</literal>, it assumes the file is
          binary.</para>

        <para>If Subversion believes that the file is binary, it will
          not attempt to perform contextual merges during updates.
          Instead, Subversion creates two files side-by-side in your
          working copy; the one containing your local modifications is
          renamed with a <filename>.orig</filename> extension.</para>

        <para>Subversion also helps users by running a
          binary-detection algorithm in the <command>svn
          import</command> and <command>svn add</command> subcommands.
          These subcommands try to make a good guess at a file's
          binary-ness, and then (possibly) set a
          <literal>svn:mime-type</literal> property of
          <literal>application/octet-stream</literal> on the file
          being added.  (If Subversion guesses wrong, you can always
          remove or hand-edit the property.)</para>

        <para>Finally, if the <literal>svn:mime-type</literal>
          property is set, then mod_dav_svn will use it to fill in the
          <literal>Content-type:</literal> header when responding to
          an http GET request.  This makes files display more nicely
          when perusing a repository with a web browser.</para>

      </sect3>

      <sect3 id="svn-ch-6-sect-2.3.3">
        <title><literal>svn:ignore</literal></title>

        <para>If you attach this property to a directory, it causes
          certain file patterns within the directory to be ignored by
          <command>svn status</command>.  For example, suppose I don't
          want to see object files or backup files in my status
          listing:</para>

        <screen>
$ svn status
M  ./foo.c
?  ./foo.o
?  ./foo.c~
        </screen>

        <para>Using <command>svn propedit</command>, I would set the
          value of <literal>svn:ignore</literal> to a
          newline-delimited list of patterns:</para>

        <screen>
$ svn propget svn:ignore .
*.o
*~
        </screen>

      </sect3>

      <sect3 id="svn-ch-6-sect-2.3.4">
        <title><literal>svn:keywords</literal></title>

        <para>Subversion has the ability to substitute useful strings
          into special <firstterm>keywords</firstterm> within text
          files.  For example, if I placed this text into a
          file:</para>

        <screen>
Here is the latest report from the front lines.
$LastChangedDate$
Cumulus clouds are appearing more frequently as summer approaches.
        </screen>
        
        <para>Subversion is able substitute the
          <literal>$LastChangedDate$</literal> string with the actual
          date in which this file last changed.  The keyword string is
          not removed in the replacement, just the specific
          information is placed after the keyword string:</para>

        <screen>
Here is the latest report from the front lines.
$LastChangedDate: 2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002) $
Cumulus clouds are appearing more frequently as summer approaches.
        </screen>

        <variablelist>
          <title>Subversion substitutes five keywords</title>

          <varlistentry>
            <term>LastChangedDate</term>
            <listitem>
              <para>The last time this file changed.  Can also be
                abbreviated as <literal>Date</literal>.  The keyword
                substitution of <literal>$LastChangedDate$</literal>
                will look something like <literal>$LastChangedDate:
                2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002)
                $</literal>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>LastChangedRevision</term>
            <listitem>
              <para>The last revision in which this file changed.  Can
                be abbreviated as <literal>Rev</literal>.  The keyword
                substitution of
                <literal>$LastChangedRevision</literal> will look
                something like <literal>$LastChangedRevision: 144
                $</literal>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>LastChangedBy</term>
            <listitem>
              <para>The last user to change this file.  Can be
                abbreviated as <literal>Author</literal>.  The keyword
                substitution of <literal>$LastChangedBy$</literal>
                will look something like <literal>$LastChangedBy: joe
                $</literal>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>HeadURL</term>
            <listitem>
              <para>A full URL to the latest version of the file in
                the repository.  Can be abbreviated as
                <literal>URL</literal>.  The keyword substitution of
                <literal>$HeadURL$</literal> will look something like
                <literal>$HeadURL:
                http://svn.collab.net/repos/trunk/README
                $</literal>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Id</term>
            <listitem>
              <para>A compressed summary of the other keywords, for
                example: <literal>$Id: bar 148 2002-07-28 21:30:43 epg
                $</literal>.  This means the file
                <literal>bar</literal> was last changed in revision
                148 by committer <literal>epg</literal>, at 2002-07-28
                21:30:43.</para>
            </listitem>
          </varlistentry>

        </variablelist>
        
        <para>To activate a keyword, or set of keywords, you merely
          need to set the <literal>svn:keywords</literal> property to
          a list of keywords you want replaced.  Keywords not listed
          in <literal>svn:keywords</literal> will not be
          replaced.</para>

        <screen>
$ svn propset svn:keywords "Date Author" foo.c
property `svn:keywords' set on 'foo.c'
        </screen>
        
        <para>And when you commit this property change, you'll
          discover that all occurrences of <literal>$Date$</literal>,
          <literal>$LastChangedDate$</literal>,
          <literal>$Author$</literal>, and
          <literal>$LastChangedBy$</literal> will have substituted
          values within <filename>foo.c</filename>.</para>

      </sect3>

      <sect3 id="svn-ch-6-sect-2.3.5">
        <title><literal>svn:eol-style</literal></title>

        <para>By default, Subversion doesn't pay any attention to line
          endings.  If a text file has either LF, CR, or CRLF endings,
          then those are the line endings that will exist on the file
          in both the repository and working copy.</para>
        
        <para>But if developers are working on different platforms,
          line endings can sometimes become troublesome.  For example,
          if a Win32 developer and Unix developer took turns modifying
          a file, its line endings might flip-flop back and forth from
          revision to revision in the repository.  This makes
          examining or merging differences very difficult, as
          <emphasis>every</emphasis> line appears to be changed in
          each version of the file.</para>

        <para>The solution here is to set the
          <literal>svn:eol-style</literal> property to ``native''.
          This makes the file always appear with the
          <quote>native</quote> line endings of each developer's
          operating system.  Note, however, that the file will always
          contain LF endings in the repository.  This prevents the
          line-ending <quote>churn</quote> from revision to
          revision.</para>

        <para>Alternately, you can force files to always retain a
          fixed, specific line ending: set a file's
          <literal>svn:eol-style</literal> property to one of
          <literal>LF</literal>, <literal>CR</literal> or
          <literal>CRLF</literal>.  A Win32 <filename>.dsp</filename>
          file, for example, which is used by Microsoft development
          tools, should always have CRLF endings.</para>

      </sect3>

      <sect3 id="svn-ch-6-sect-2.3.6">
        <title><literal>svn:externals</literal></title>

        <para>See <xref linkend="svn-ch-6-sect-3"/>.</para>

      </sect3>
    </sect2>
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 3:  MODULES                                         *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-6-sect-3">
    <title>Modules</title>
    
    <para>Sometimes it's useful to construct a working copy that is
      made out of a number of different checkouts.  For example, you
      may want different sub-directories to come from different
      locations in a repository.</para>

    <para>On the one hand, you could begin by checking out a working
      copy, and then run <command>svn switch</command> on various
      subdirectories.  But this is a bit of work.  Wouldn't it be nice
      to define&mdash;in a single place&mdash;exactly how you want the
      final working copy to be?</para>

    <para>This is known as a <firstterm>module</firstterm>.  You can
      define a module by attaching another special
      <quote>magic</quote> <literal>svn:</literal> property to a
      directory: the <literal>svn:externals</literal> property.</para>

    <para>The value of this property is a list of subdirectories and
      their corresponding URLs:</para>

    <screen>
$ svn propget svn:externals projectdir
subdir1/foo       http://url.for.external.source/foo
subdir1/bar       http://blah.blah.blah/repositories/theirproj
subdir1/bar/baz   http://blorg.blorg.blorg/basement/code
    </screen>

    <para>Assuming that this property is attached to the directory
      <filename>projectdir</filename>, then when we check it out,
      we'll get everything else defined by the property.</para>

    <screen>
$ svn checkout http://foo.com/repos/projectdir
A  projectdir/blah.c
A  projectdir/gloo.c
A  projectdir/trout.h
Checked out revision 128.

Fetching external item into projectdir/subdir1/foo
A  projectdir/subdir1/foo/rho.txt
A  projectdir/subdir1/foo/pi.txt
A  projectdir/subdir1/foo/tau.doc
Checked out revision 128.
&hellip;
    </screen>

    <para>By tweaking the value of the
      <literal>svn:externals</literal> property, the definition of the
      module can change over time, and subsequent calls to
      <command>svn update</command> will update working copies
      appropriately.</para>

    <!-- ###TODO Anything else to add here?  I'm suspicious that this
    feature doesn't work as I expect just yet; when I run 'svn up' at the
    top of the wc, nothing happens in the external directory at all,
    because (I guess) it's not linked to the parent. -Ben -->
    
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 4:  VENDOR BRANCHES                                 *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-6-sect-4">
    <title>Vendor branches</title>

    <para>Sometimes you want to manage modified third-party source
      code inside your Subversion repository, while still tracking
      upstream releases.  In CVS this would have been called a
      <quote>vendor branch</quote>.  Subversion doesn't have a formal
      <quote>vendor branch</quote>, but it is sufficiently flexible
      that you can still do much the same thing.</para>
    
    <para>The general procedure goes like this.  You create a top
      level directory (we'll use <filename>/vendor</filename>) to hold
      the vendor branches.  Then you import the third party code into
      a subdirectory of <filename>/vendor</filename>, and copy it into
      <filename>/trunk</filename> where you make your local changes.
      With each new release of the code you are tracking you bring it
      into the vendor branch and merge the changes into
      <filename>/trunk</filename>, resolving whatever conflicts occur
      between your local changes and the upstream changes.</para>

    <para>Let's try and make this a bit clearer with an
      example.</para>

    <para>First, the initial import.</para>
    
    <screen>
      $ svn mkdir http://svnhost/repos/vendor/foobar
      $ svn import http://svnhost/repos/vendor/foobar ~/foobar-1.0 current
    </screen>
    
    <para>Now we've got the current version of the foobar project in
      <filename>/vendor/foobar/current</filename>.  We make another
      copy of it so we can always refer to that version, and then copy
      it into the trunk so you can work on it.</para>
    
    <screen>
      $ svn copy http://svnhost/repos/vendor/foobar/current    \
                 http://svnhost/repos/vendor/foobar/foobar-1.0 \
                 -m `tagging foobar-1.0'
      $ svn copy http://svnhost/repos/vendor/foobar/foobar-1.0 \
                 http://svnhost/repos/trunk/foobar             \
                 -m `bringing foobar-1.0 into trunk'
    </screen>

    <para>Now you just check out a copy of
    <filename>/trunk/foobar</filename> and get to work!</para>

    <para>Later on, the developers at FooBar Widgets, Inc release a
      new version of their code, so you want to update the version of
      the code you're using.  First, you check out the
      <filename>/vendor/foobar/current</filename> directory, then copy
      the new release over that working copy, handle any renames,
      additions or removals manually, and then commit.</para>

    <screen>
      $ svn checkout http://svnhost/repos/vendor/foobar/current ~/current
      $ cd ~/foobar-1.1
      $ tar -cf - . | (cd ~/current ; tar -xf -)
      $ cd ~/current
      $ mv foobar.c main.c
      $ svn move main.c foobar.c
      $ svn delete dead.c
      $ svn add doc
      $ svn add doc/*
      $ svn commit -m `importing foobar 1.1 on vendor branch'
    </screen>

    <para>Whoa, that was complicated. Don't worry, most cases are far
      simpler. </para>

    <para>What happened? foobar 1.0 had a file called
      <filename>main.c</filename>.  This file was renamed to
      <filename>foobar.c</filename> in 1.1.  So your working-copy had
      the old <filename>main.c</filename> which Subversion knew about, 
      and the new <filename>foobar.c</filename> which Subversion did 
      not know about.  You rename <filename>foobar.c</filename> to 
      <filename>main.c</filename> and <command>svn mv</command> it 
      back to the new name.  This way, Subversion will know that 
      <filename>foobar.c</filename> is a descendant of 
      <filename>main.c</filename>.  <filename>dead.c</filename> has 
      been removed in 1.1, and they have finally written some 
      documentation, so you add that.</para>

    <para>Next you copy <filename>/vendor/foobar/current</filename> to
      <filename>/vendor/foobar/foobar-1.1</filename> so you can always
      refer back to version 1.1, like this.</para>

    <screen>
      $ svn copy http://svnhost/repos/vendor/foobar/current    \
                 http://svnhost/repos/vendor/foobar/foobar-1.1 \
                 -m `tagging foobar-1.1'
    </screen>

    <para>Now that you have a pristine copy of foobar 1.1 in
      <filename>/vendor</filename>, you just have to merge their
      changes into <filename>/trunk</filename> and you're done.  That
      looks like this.</para>

    <screen>
      $ svn checkout http://svnhost/repos/trunk/foobar ~/foobar
      $ cd ~/foobar
      $ svn merge http://svnhost/repos/vendor/foobar/foobar-1.0 \
                  http://svnhost/repos/vendor/foobar/foobar-1.1
      $
      &hellip; # resolve all the conflicts between their changes and your changes
      $ svn commit -m `merging foobar 1.1 into trunk'
    </screen>
    
    <para>There, you're done.  You now have a copy of foobar 1.1 with
      all your local changes merged into it in your tree.</para>

    <para>Vendor branches that have more than several deletes,
      additions and moves can use the
      <command>svn_load_dirs.pl</command> script that comes with the
      Subversion distribution.  This script automates the above
      importing steps to make sure that mistakes are minimized.  You
      still need to use the merge commands to merge the new versions
      of foobar into your own local copy containing your local
      modifications.</para>

    <para>This script has the following enhancements over <command>svn
    import</command>:</para>

    <itemizedlist>
      <listitem>
        <para>Can be run at any point in time to bring an existing
          directory in the repository to exactly match an external
          directory.  This script runs all the <command>svn
          add</command>, <command>svn rm</command> and optionally any
          <command>svn mv</command> commands as necessary.</para>
      </listitem>

      <listitem>
        <para>Optionally tag the newly imported directory.</para>
      </listitem>

      <listitem>
        <para>Optionally add arbitrary properties to files and
          directories that match a regular expression.</para>
      </listitem>

    </itemizedlist>

    <para>This script takes care of complications where Subversion
      requires a commit before renaming a file or directory twice,
      such as if you had a vendor branch that renamed
      <filename>foobar-1.1/docs/doc.ps</filename> to
      <filename>foobar-1.2/documents/doc-1.2.ps</filename>.  Here, you
      would rename <filename>docs</filename> to
      <filename>documents</filename>, perform a commit, then rename
      <filename>doc.ps</filename> to <filename>doc-1.2.ps</filename>.
      You could not do the two renames without the commit, because
      <filename>doc.ps</filename> was already moved once from
      <filename>docs/doc.ps</filename> to
      <filename>documents/doc.ps</filename>.</para>

    <para>This script always compares the directory being imported to
      what currently exists in the Subversion repository and takes the
      necessary steps to add, delete and rename files and directories
      to make the subversion repository match the imported directory.
      As such, it can be used on an empty subversion directory for the
      first import or for any following imports to upgrade a vendor
      branch.</para>

    <para>For the first foobar-1.0 release located in
      <filename>~/foobar-1.0</filename>:</para>

    <screen>
      $ svn_load_dirs.pl -t foobar-1.0                      \
                         http://svnhost/repos/vendor/foobar \
                         current                            \
                         ~/foobar-1.0
    </screen>

    <para><command>svn_load_dirs.pl</command> takes three mandatory
      arguments.  The first argument, <systemitem
      class="url">http://svnhost/repos/vendor/foobar</systemitem>, is
      the URL to the base Subversion directory to work in.  In this
      case, we're working in the <filename>vendor/foobar</filename>
      part of the Subversion repository.  The next argument,
      <filename>current</filename>, is relative to the first and is
      the directory where the current import will take place, in this
      case <systemitem
      class="url">http://svnhost/repos/vendor/foobar/current</systemitem>.
      The last argument, <filename>~/foobar-1.0</filename>, is the
      directory to import.  Finally, the optional
      <option>-t</option> command line option is also relative
      to <systemitem
      class="url">http://svnhost/repos/vendor/foobar</systemitem> and
      tells <command>svn_load_dirs.pl</command> to create a tag of the
      imported directory in <systemitem
      class="url">http://svnhost/repos/vendor/foobar/foobar-1.0</systemitem>.</para>

    <para>The import of foobar-1.1 would be taken care of in the same
      way:</para>

    <screen>
      $ svn_load_dirs.pl -t foobar-1.1                      \
                         http://svnhost/repos/vendor/foobar \
                         current                            \
                         ~/foobar-1.1
    </screen>

    <para>The script looks in your current <systemitem
      class="url">http://svnhost/repos/vendor/foobar/current</systemitem>
      directory and sees what changes need to take place for it to
      match <filename>~/foobar-1.1</filename>.  The script is kind
      enough to notice that there are files and directories that exist
      in 1.0 and not in 1.1 and asks if you want to perform any
      renames.  At this point, you can indicate that
      <filename>main.c</filename> was renamed to
      <filename>foobar.c</filename> and then indicate that no further
      renames have taken place.</para>

    <para>The script will then delete <filename>dead.c</filename> and
      add <filename>doc</filename> and <filename>doc/*</filename> to
      the Subversion repository and finally create a tag foobar-1.1 in
      <systemitem
      class="url">http://svnhost/repos/vendor/foobar/foobar-1.1</systemitem>.</para>

    <para>The script also accepts a separate configuration file for
      applying properties to specific files and directories matching a
      regular expression that are <emphasis>added</emphasis> to the repository.
      This script will not modify properties of already existing files
      or directories in the repository.  This configuration file is
      specified to <command>svn_load_dirs.pl</command> using the
      <option>-p</option> command line option.  The format of
      the file is either two or four columns.</para>

    <para><literal>regular_expression control property_name
        property_value</literal></para>

    <para>The <literal>regular_expression</literal> is a Perl style
      regular expression.  The <literal>control</literal> column must
      either be set to <literal>break</literal> or
      <command>cont</command>.  It is used to tell
      <command>svn_load_dirs.pl</command> if the following lines in
      the configuration file should be examined for a match or if all
      matching should stop.  If <literal>control</literal> is set to
      <command>break</command>, then no more lines from the
      configuration file will be matched.  If
      <literal>control</literal> is set to <command>cont</command>,
      which is short for continue, then more comparisons will be made.
      Multiple properties can be set for one file or directory this
      way.  The last two columns, <literal>property_name</literal> and
      <literal>property_value</literal> are optional and are applied
      to matching files and directories.</para>

    <para>If you have whitespace in any of the
      <literal>regular_expression</literal>,
      <literal>property_name</literal> or
      <literal>property_value</literal> columns, you must surround the
      value with either a single or double quote.  You can protect
      single or double quotes with a \ character.  The \ character is
      removed by this script <emphasis>only</emphasis> for whitespace or quote
      characters, so you do not need to protect any other characters,
      beyond what you would normally protect for the regular
      expression.</para>

    <para>This sample configuration file was used to load on a Unix
      box a number of Zip files containing Windows files with
      <literal>CRLF</literal> end of lines.</para>

    <screen>
      \.doc$              break   svn:mime-type   application/msword
      \.ds(p|w)$          break   svn:eol-style   CRLF
      \.ilk$              break   svn:eol-style   CRLF
      \.ncb$              break   svn:eol-style   CRLF
      \.opt$              break   svn:eol-style   CRLF
      \.exe$              break   svn:mime-type   application/octet-stream
      dos2unix-eol\.sh$   break
      .*                  break   svn:eol-style   native
    </screen>

    <para>In this example, all the files should be converted to the
      native end of line style, which the last line of the
      configuration handles.  The exception is
      <command>dos2unix-eol.sh</command>, which contains embedded
      <literal>CR</literal>'s used to find and replace Windows
      <literal>CRLF</literal> end of line characters with Unix's
      <literal>LF</literal> characters.  Since <command>svn</command>
      and <command>svn_load_dirs.pl</command> convert all
      <literal>CR</literal>, <literal>CRLF</literal> and
      <literal>LF</literal>'s to the native end of line style when
      <literal>svn:eol-style</literal> is set to
      <literal>native</literal>, this file should be left untouched.
      Hence, the <command>break</command> with no property
      settings.</para>

    <para>The Windows Visual C++ and Visual Studio files
      (<filename>*.dsp</filename>, <filename>*.dsw</filename>, etc.)
      should retain their <literal>CRLF</literal> line endings on any
      operating system and any <filename>*.doc</filename> files are
      always treated as binary files, hence the
      <literal>svn:mime-type</literal> setting of
      <literal>application/msword</literal>.</para>

  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
