<!-- Diese Übersetzung basiert auf der englischen Version
     mit commited-rev=9970 -->

<chapter id="svn-ch-7">
  <title>Weiterführende Themen</title>

  <simplesect id="svn-ch-7-sect-0">

    <para>Wenn sie dieses Buch Kapitel für Kapitel gelesen haben, hat
      sich jetzt genug Wissen angesammelt, um die häufigsten
      Aktivitäten der Versionskontrolle mit einem Subversion Clienten
      durchführen zu können.  Sie verstehen wie eine Arbeitskopie aus
      einem Projektarchiv von Subversion ausgecheckt wird und sie sind
      vertraut mit der Übertragung und dem Empfang von Änderungen
      durch Verwendung der Funktionen <command>svn commit</command>
      und <command>svn update</command>.  Sie haben vielleicht sogar
      einen Reflex entwickelt, der sie automatisch <command>svn
      status</command> aufrufen lässt.  Sie können also die typischen
      Absichten und Zwecke in ihrer Arbeitsumgebung erreichen.</para>

    <para>Aber die Fähigkeiten von Subversion enden nicht mit den <quote>üblichen
      Operationen zur Versionskontrolle</quote>.</para>

    <para>Dieses Kapitel wirft ein Licht auf einige der Fähigkeiten
      von Subversion, die nicht so häufig benutzt werden.  Wir werden
      die Unterstützung von Subversion für Eigenschaften (oder
      <quote>Metadaten</quote>) besprechen und wie über die Laufzeit
      Konfiguration das Standardverhalten von Subversion ändern
      können.  Wir werden beschreiben, wie sie die externals
      Definition benutzen können, um Subversion anzuweisen, Daten aus
      verschiedenen Projektarchiven zu holen.  Wir werden verschiedene
      clientseitige und serverseitige Werkzeuge im Detail vorstellen,
      die Teil der Subversion Auslieferung (Distribution) sind.</para>

    <para>Bevor sie dieses Kapitel lesen, sollten sie mit den
      grundsätzlichen Fähigkeiten von Subversion betreffend
      Versionskontrolle für Dateien und Verzeichnisse sein.  Wenn sie
      über diese noch nichts gelesen haben oder wenn sie eine
      Auffrischung brauchen, dann empfehlen wir einen Blick auf <xref
      linkend="svn-ch-2" /> und <xref linkend="svn-ch-3" />.  Wenn sie
      die Grundlagen gemeistert und dieses Kapitel hinter sich haben,
      dann werden sie zu den Fortgeschrittenen zählen!</para>

  </simplesect>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 1:  RUNTIME CONFIGURATION AREA                      *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-1">
    <title>Laufzeit Konfiguration</title>
    
    <para>Subversion bietet viele Optionen, die das Verhalten von
      Subversion beeinflussen.  Manchmal ist es erwünscht, dass solche
      Optionen auf alle Operationen von Subversion angewendet werden.
      Anstatt nun zu verlangen, dass sie sich an all diese
      Kommandozeilen Argumente erinnern und dass sie diese für alle
      und jede Operation immer wieder angeben müssen, verwendet
      Subversion dafür Konfigurationsdateien.</para>

    <para>Die <firstterm>Konfiguration</firstterm> von Subversion ist
      eine zweiteilige Hierarchie aus Optionsnamen und den
      dazugehörenden Werten.  Üblicherweise läuft das auf ein
      spezielles Verzeichnis mit den entsprechenden
      <firstterm>Konfigurations Dateien</firstterm> (die erste Ebene)
      hinaus, das sind Textdateien im Standard INI Format mit
      <quote>Abschnitten</quote> (welche die zweite Ebene darstellen).
      Diese Dateien können einfach mit dem bevorzugten Texteditor (wie
      Emacs oder vi) bearbeitet werden und enthalten Direktiven, die
      vom Clienten gelesen werden, um festzulegen welche Optionen
      standardmässig verwendet werden.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-1.1">
      <title>Layout der Konfiguration</title>

      <para>Das erste Mal, wenn der <command>svn</command>
        Kommandozeilen Client gestartet wird, erzeugt er eine
        benuterInnen bezogene Konfiguration.  Auf unixartigen Systemen
        ist dies ein Verzeichnis mit dem Namen
        <filename>.subversion</filename> im Heimatverzeichnis (home
        directory).  Auf Win32 Systemen wird ein Ordner
        <filename>Subversion</filename> erzeugt, der typischerweise
        unter <filename>Anwendungsdaten</filename> im
        anmeldungsbezogenen Profil (Dokumente und Einstellungen)
        liegt, ((*TODO* ich habe die namen geraten, aber nicht
        verifiziert!))  (welches üblicherweise ein versteckter Ordner
        ist).  Auf alle Fälle ist auf dieser Plattform die genaue
        Position von System zu System verschieden und wird von der
        Windows Registrierdatenbank bestimmt.
        <footnote>
          <para>Die Umgebungsvariable <literal>APPDATA</literal>
            enthält den Pfad für die Konfiguration der
            <filename>Anwendungsdaten</filename>, sodass sie auf
            diesen über <filename>%APPDATA%\Subversion</filename>
            verweisen können.</para>
        </footnote>
        Wir werden auf die anmeldungsbezogene Konfiguration über ihre
        Position unter Unix verweisen, nämlich
        <filename>.subversion</filename>.</para>

      <para>Zusätzlich zur Konfiguration auf Ebene der BenutzerInnen
        kennt Subversion auch systemweite Einstellungen.  Dies erlaubt
        die Definition von Standardeinstellungen für alle
        AnwenderInnen auf einer bestimmten Maschine.  Beachten Sie,
        dass die systemweite Konfiguration kein Diktat bedeutet
        &mdash; die anmeldungsbezogenen Einstellungen überschreiben
        die systemweiten Werte und die Kommandozeilenargumente, die
        beim Aufruf von <command>svn</command> übergeben werden haben
        das letzte Wort.  Auf unixartigen Systemen wird die
        systemweite Konfiguration im
        <filename>/etc/subversion</filename> Verzeichnis erwartet;
        unter Windows wird nach dem Verzeichnis
        <filename>Subversion</filename> in dem Bereich für
        Anwendungsdaten (wie in der Windows Registrierdatenbank
        festgelegt) gesucht.  Im Gegensatz zur benuzterInnen
        spezifischen Konfiguration versucht <command>svn</command>
        nicht eine systemweite Konfiguration anzulegen.</para>

      <para>Die Konfiguration besteht derzeit aus drei Dateien
        (<filename>config</filename>, <filename>servers</filename>)
        und eine <filename>README.txt</filename> Datei, welche das INI
        Format beschreibt.  Zum Zeitpunkt der Erstellung enthalten die
        Dateien Standardwerte für alle unterstützten Optionen von
        Subversion, die meistens auskommentiert sind und mit
        erklärendem Text zu Gruppen zusammengefasst werden.  Um ein
        bestimmtes Verhalten brauchen sie nur die zuständige
        Konfigurationsdatei mit einem Editor bearbeiten und den Wert
        der gewünschten Option ändern.  Wenn sie zu einem beliebigen
        Zeitpunt das Standardverhalten wieder herstellen wollen können
        sie das Konfiguratiosnverzeichnis entfernen (oder umbenennen)
        und irgendein harmloses <command>svn</command> Kommando
        aufrufen, wie zum Beispiel <command>svn --version</command>
        und eine neue Konfiguration mit den Standardwerten wird
        erstellt werden.</para>

      <para>Die anmeldungsbezogene Konfiguration enthält auch einen
        Zwischenspeicher für Authentifizierungsdaten.  Das
        <filename>auth</filename> Verzeichnis enthält
        Unterverzeichnisse mit gespeicherten Informationen, die von
        Subversion für die verschiedenen unterstützten
        Authentifizierungsmethoden verwendet werden.  Dieses
        Verzeichnis wird so angelegt, dass nur die BenutzerInnen
        selbst das Recht haben den Inhalt zu lesen.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-1.2">
      <title>Konfiguration und Windows Registrierdatenbank</title>

      <para>Zusätzlich zu den üblichen INI basierten
        Konfigurationsdateien können Subversions Clienten, die auf
        Windows Plattformen laufen auch die Windows
        Registrierdatenbank benutzen um Konfigurationsdaten zu
        speichern.  Die Optionsnamen und Werte sind die gleichen wie
        in den INI Dateien.  Die <quote>Datei/Abschnitt</quote>
        Hierarchie wird in abgeänderter Form ebenfalls abgebildet
        &mdash; Dateien und Abschnitte sind hier verschiedene Ebenen
        im Registrier Schlüssel Baum.</para>

      <para>Subversion sucht die systemweite Konfiguration unter dem
        Schlüssel
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion</literal>
        Zum Beispiel die Option <literal>global-ignores</literal>,
        welche im <literal>miscellany</literal> Abschnitt der
        <filename>config</filename> Datei steht, findet sich unter
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\global-ignores</literal>.
        Die anmeldungsbezogene Konfiguration sollte unter
        <literal>HKEY_CURRENT_USER\Software\Tigris.org\Subversion</literal>
        gespeichert werden.</para>

      <para>Konfigurationswerte in der Registrierdatenbank werden
        <emphasis>vor</emphasis> den gleichlautenden Gegenstücken in
        den Konfigurationsdateien eingelesen und daher durch diese
        überschrieben, falls dort Einstellungen für die gleiche Option
        gefunden werden.  Die Konfigurationen auf Windows Systemen
        werden also nach folgender Priorität berücksichtigt:</para>
      
      <orderedlist>
        <listitem>
          <para>Kommandozeilen Optionen</para>
        </listitem>
        <listitem>
          <para>Die anmeldungsbezogenen INI Dateien</para>
        </listitem>
        <listitem>
          <para>Die anmeldungsbezogenen Werte aus der Registrierdatenbank</para>
        </listitem>
        <listitem>
          <para>Die systemweiten INI Dateien</para>
        </listitem>
        <listitem>
          <para>Die systemweiten Werte aus der Registrierdatenbank</para>
        </listitem>
      </orderedlist>

      <para>Obwohl die Windows Registrierdatenbank das
        <quote>Auskommentieren</quote> nicht wirklich unterstützt,
        ignoriert Subversion alle Optionen, deren Optionsschlüssel mit
        einem Rautezeichen (<literal>#</literal>) beginnt.  Das
        erlaubt es eine Option inaktiv zu sezten, ohne den Schlüssel
        löschen zu müssen und erleichtert so ein späteres wieder
        herstellen dieser Option.</para>

      <para>Der <command>svn</command> Kommandozeilen Client versucht
        niemals die Windows Registrierdatenbank zu beschreiben und
        wird dort keine Konfiguration mit den Standardwerten erzeugen.
        Sie können die benötigten Schlüssel mit
        <command>REGEDIT</command> anlegen.  Alternativ können sie
        eine <filename>.reg</filename> Datei erstellen und durch
        Doppelcklick auf diese Datei im Windows Explorer die
        angegebenen Werte in die Registrierdatenbank eintragen
        lassen.</para>

      <example id="svn-ch-7-sect-1.2-ex-1">
        <title>Beispiele für Einträge in einer Registrationsdatei (.reg).</title>

        <programlisting>
REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\groups]

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\global]
"#http-proxy-host"=""
"#http-proxy-port"=""
"#http-proxy-username"=""
"#http-proxy-password"=""
"#http-proxy-exceptions"=""
"#http-timeout"="0"
"#http-compression"="yes"
"#neon-debug-mask"=""
"#ssl-authority-files"=""
"#ssl-trust-default-ca"=""
"#ssl-client-cert-file"=""
"#ssl-client-cert-password"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auth]
"#store-auth-creds"="no"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\helpers]
"#editor-cmd"="notepad"
"#diff-cmd"=""
"#diff3-cmd"=""
"#diff3-has-program-arg"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\miscellany]
"#global-ignores"="*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#*"
"#log-encoding"=""
"#use-commit-times"=""
"#template-root"=""
"#enable-auto-props"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\tunnels]

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auto-props]
</programlisting>
      </example>

      <para>Das vorangegangene Beispiel zeigt den Inhalt einer
        <filename>.reg</filename> Datei mit einigen der am meisten
        benutzten Konfigurationsoptionen und den dazugehörigen
        Standardwerten.  Beachten sie die Existenz von beiden
        Konfigurationen &mdash; den systemweiten Einstellungen (für
        proxybezogene Optionen im Netzwerk) und anmeldungsbezogene
        Einstellungen (zu vewendendes Editorprogramm,
        Passwortspeicherung und andere).  Beachten sie auch, dass alle
        Optionen auskommentiert sind.  Sie müssen nur das Rautezeichen
        vom Beginn des Optionsnamens entfernen und den gewünschten
        Wert eintragen.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-1.3">
      <title>Konfigurationsoptionen</title>

      <para>In diesem Abschnitt werden wir die derzeit unterstützten
        Laufzeitoptionen von Subversion besprechen.</para>

      <sect3 id="svn-ch-7-sect-1.3.1">
        <title>Servers</title>

        <para>Die <filename>servers</filename> Datei enthält die
          Konfiguration für die Netzwerk Ebene von Subversion.  Es
          gibt zwei spezielle Abschnittsnamen in dieser Datei &mdash;
          <literal>groups</literal> und <literal>global</literal>.
          Der <literal>groups</literal> Abschnitt ist im wesentlichen
          eine Crossreferenz Tabelle.  Die Schlüssel in diesem
          Abschnitt sind die Namen von anderen Abschnitten in der
          Datei; ihre Werte sind <firstterm>globs</firstterm> &mdash;
          Textmarken, die möglicherweise Platzhalter (Jokerzeichen)
          enthalten &mdash; die mit den Hostnamen der Maschine
          verglichen werden, an welche die Subversions Anfragen
          gesendet werden.</para>

        <programlisting>
[groups]
beanie-babies = *.red-bean.com
collabnet = svn.collab.net

[beanie-babies]
&hellip;

[collabnet]
&hellip;
</programlisting>

        <para>Wenn Subversion über ein Netzwerk verwendet wird, dann
          versucht es den Namen des Servers in den Gruppennamen im
          <literal>groups</literal> Abschnitt zu finden.  Wenn die
          Suche erfolgreich ist, dann sucht Subversion nach einem
          Abschnitt in der <filename>servers</filename> Datei, dessen
          Namen zu dem gefundenen Gruppennamen passt.  Von diesem
          Abschnitt werden die Einstellungen für die
          Netzwerkkonfiguration eingelesen.</para>

        <para>Der <literal>global</literal> Abschnitt enthält die
          Einstellungen, die für alle Server gelten sofern nicht in
          einem <literal>groups</literal> Abschnitt abweichende Werte
          hinterlegt sind.  In diesem Abschnitt können genau die
          gleichen Optionen angegeben werden wie in den anderen
          Abschnitten (natürlich mit Ausnahme des speziellen
          <literal>groups</literal> Abschnittes) und zwar:</para>

        <variablelist>
          <varlistentry>
            <term><literal>http-proxy-host</literal></term>
            <listitem>
              <para>Dies legt den Hostnamen des Proxy Computers fest,
                den ihre HTTP-basierte Anfrage passieren muss.  Dieser
                Wert ist per Voreinstellung leer, was bedeutet, dass
                Subversion nicht versucht die HTTP Anfragen durch
                einen Proxy Computer zu leiten, sondern versucht die
                Zielmaschine direkt zu erreichen.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-port</literal></term>
            <listitem>
              <para>Dies legt fest, welche Portnummer auf der Proxy
                Maschine zu verwenden ist.  Per Voreinstellung ist
                diese Option leer.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-username</literal></term>
            <listitem>
              <para>Dies legt den Anmeldungsnamen für die Proxy
                Maschine fest.  Per Voreinstellung ist diese Option
                leer.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-password</literal></term>
            <listitem>
              <para>Dies legt das Passwort für die Proxy Maschine
                fest. Per Voreinstellung ist diese Option leer.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-timeout</literal></term>
            <listitem>
              <para>Dies gibt an, wieviele Sekunden auf die Antwort
                des Servers gewartet wird.  Wenn sie Probleme mit
                Subversion haben, weil Fehler wegen
                Zeitüberschreitungen aufgrund einer langsamen
                Netzwerkverbindung auftreten, dann sollten sie den
                Wert dieser Option hinaufsetzen.  Der voreingestellte
                Wert ist <literal>0</literal>, was die
                darunterliegende HTTP Bibliothek, nämlich Neon,
                anweist ihre eigenen Standardwerte zu verwenden.<para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-compression</literal></term>
            <listitem>
              <para>Dies gibt an, ob Subversion versuchen soll
                Netzwerk Anfragen an DAV-fähige Server zu
                komprimieren.  Der Standardwert ist
                <literal>yes</literal> (obwohl die Komprimierung nur
                durchgeführt wird, wenn diese Fähigkeit in der
                Netzwerkebene einkompiliert ist).  Setzen sie diese
                Option auf <literal>no</literal> um die Kompression
                abzuschalten, zum Beispiel für die Fehlersuche
                (debugging) in der Netwerk Übertragung.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>neon-debug-mask</literal></term>
            <listitem>
              <para>Dies ist eine Ganzzahlmaske, welche die
                darunterliegende HTTP Bibliothek, also Neon, benutzt
                um festzulegen welcher Typ für die Ausgabe von
                Informationen zur Fehlersuche benutzt wird.  Der
                Standardwert ist <literal>0</literal>, was jegliche
                Fehlersuch Information unterdrückt.  Mehr
                Informationen darüber, wie Subversion Gebrauch von
                Neon macht, finden sie unter <xref linkend="svn-ch-8"
                />.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-authority-files</literal></term>
            <listitem>
              <para>Dies ist eine durch Strichpunkte getrennte Liste
                von Pfaden zu Dateien, die Zertifikate der
                Zertifizierungsstellen enthalten welche vom Subversion
                Clienten akzeptiert werden, wenn über HTTPS auf das
                Projektarchiv zugegriffen wird.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-trust-default-ca</literal></term>
            <listitem>
              <para>Setzen sie diese Variable auf
                <literal>yes</literal>, wenn sie wollen, dass
                Subversion automatisch die Zertifizierungsstellen
                akzeptiert, die standardmässig mit OpenSSL geliefert
                werden. (ca im Optonsnamen steht für certificate
                authorities).
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-client-cert-file</literal></term>
            <listitem>
              <para>Wenn ein Host (oder eine Gruppe von Hosts) ein SSL
                Zertifikat des Clienten verlangen, dann wird
                normalerweise die Eingabe des Pfades zu ihrem
                Zertifikat verlangt.  Wenn sie diese Option auf eben
                diesen Pfad setzen, dann kann der Client von
                Subversion das Zertifikat automatisch finden, ohne
                eine Eingabe zu verlangen.  Es gibt keinen Standard
                dafür, wo die Zertifikate auf der Platte abgelegt
                werden &mdash; Subversion wird die Zertifikate von
                jedem Pfad holen den sie angeben.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-client-cert-password</literal></term>
            <listitem>
              <para>Wenn ihre Datei mit den SSL Clienten Zertifikaten
                mit einer Passphrase verschlüsselt ist, dann wird
                Subversion jedesmal die Eingabe der Passphrase
                verlangen, wenn das Zertifikat benutzt wird.  Wenn sie
                das lästig finden, (und sie kein Problem damit haben
                die Passphrase in der <filename>servers</filename>
                Datei zu speichern), dann können sie die Passphrase in
                dieser Variable hinterlegen.  Es wird keine Eingabe
                mehr von ihnen verlangt werden.</para>
            </listitem>
          </varlistentry>
        </variablelist>

      </sect3>
      <sect3 id="svn-ch-7-sect-1.3.2">
        <title>Config</title>

        <para>Die <filename>config</filename> Datei enthält den Rest
          der momentan verfügbaren Laufzeit Optionen für Subversion
          &mdash; also diejenigen, die nicht mit dem Netzwerk
          zusammenhängen.  Es sind derzeit nur einige wenige Optionen
          in Verwendung, aber in Vorbereitung auf zukünftige
          Erweiterungen sind diese ebenfalls in Abschnitten
          zusammengefasst.</para>

        <para>Der <literal>auth</literal> Abschnitt enthält
          Einstellungen im Zusammenhang mit der Authentifizierung und
          den Berechtigungen für das Projektarchiv.  Dies
          umfasst:</para>

        <variablelist>
          <varlistentry>
            <term><literal>store-auth-creds</literal></term>
            <listitem>
              <para>Dies gibt an, ob Subversion Authentifizierungs
                Informationen, welche die BenutzerInnen als Antwort
                auf Authentifizierungs Anforderungen des Servers
                eingeben zwischenspeichern soll oder nicht.  Der
                Standardwert ist <literal>yes</literal>.  Setzen sie
                diesen Wert auf <literal>no</literal> um die
                Zwischenspeicherung auf der Platte abzuschalten.  Sie
                können diese Option für einen einzelnen Aufruf von
                Subversion überschreiben, indem sie
                <option>--no-auth-cache</option> als Kommandozeilen
                Parameter angeben (für Subkommandos, die diese Option
                unterstützen).  Weitere Informationen finden sie unter
                <xref linkend="svn-ch-6-sect-2.2" />.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Der <literal>helpers</literal> Abschnitt kontrolliert
          welche externen Programme Subversion verwendet um seine
          Aufgaben zu erfüllen.  Gültige Optionen in diesem Abschnitt
          sind:</para>

        <variablelist>
          <varlistentry>
            <term><literal>editor-cmd</literal></term>
            <listitem>
              <para>Dies gibt das Programm an, das Subversion
                verwenden soll, um die Eingabe für Log-Nachrichten
                während einer Übertragung entgegenzunehmen. Wenn sie
                <command>svn commit</command> ohne eine der Optionen
                <option>--message</option> (<option>-m</option>) oder
                <option>--file</option> (<option>-F</option>)
                verwenden.  Dieses Programm wird auch für das
                <command>svn propedit</command> Kommando verwendet
                &mdash; eine temporäre Datei mit dem aktuellen Wert
                der Eigenschaft die bearbeitet werden soll wird
                erstellt und die Veränderung wird wird direkt im
                Editor durchgeführt (siehe <xref
                linkend="svn-ch-7-sect-2" />).  Der Standardwert für
                diese Option ist leer.  Wenn die Option nicht
                angegeben wird, dann durchsucht Subversion die
                Umgebungsvariablen <literal>SVN_EDITOR</literal>,
                <literal>VISUAL</literal>, und
                <literal>EDITOR</literal> (in dieser Reihenfolge) nach
                einem Wert für das Editor Programm.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff-cmd</literal></term>
            <listitem>
              <para>Dies gibt den absoluten Pfad eines Programmes zur
                Feststellung von Unterschieden von Dateiinhalten (Diff
                Programm) an, das benutzt wird, wenn Subversion die
                <quote>Differenz</quote> ausgibt (z.B. wenn das
                <command>svn diff</command> Kommando aufgerufen wird).
                Standardmässsig verwendet Subversion eine interne
                Diff-Bibliothek &mdash; wenn sie diese Option setzen,
                dann wird diese Aufgabe an das externe Programm
                übertragen.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-cmd</literal></term>
            <listitem>
              <para>Dies gibt den absoluten Pfad eines
                Drei-Weg-Diff-Programmes an.  Subversion benutzt
                dieses Programm, um Ihre Änderungen mit den
                Änderungen, die vom Projektarchiv empfangen wurden
                zusammenzuführen.  Standardmässsig verwendet
                Subversion eine interne Diff-Bibliothek &mdash; wenn
                sie diese Option setzen, dann wird diese Aufgabe an
                das externe Programm übertragen.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-has-program-arg</literal></term>
            <listitem>
              <para>Dieser Schalter sollte auf <literal>true</literal>
                gesetzt werden, wenn das Programm, das in der
                <literal>diff3-cmd</literal> Option angegeben wurde
                einen <option>--diff-program</option>
                Kommandozeilen-Parameter akzeptiert.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Der <literal>tunnels</literal> Abschnitt erlaubt Ihnen
          die Definition neuer Tunnel-Schemata für
          <command>svnserve</command> and <literal>svn://</literal>
          Klienten Verbindungen.  Für weitere Details siehe <xref
          linkend="svn-ch-6-sect-3.3"/>.</para>

        <para>Der <literal>miscellany</literal> Abschnitt enthält
          alles, was nicht bereits den anderen Abschnitten zugeordnet
          ist.
          <footnote>
            <para>Anyone for potluck dinner?</para>
          </footnote>
          Hier finden Sie:</para>

        <variablelist>
          <varlistentry>
            <term><literal>global-ignores</literal></term>
            <listitem>
              <para>Wenn das <command>svn status</command> Kommando
                aufgerufen wird, dann listet Subversion Dateien und
                Verzeichnisse ohne Versionkontrolle gemeinsam mit
                denen unter Versionskontrolle auf und kennzeichnet sie
                mit <literal>?</literal> (siehe <xref
                linkend="svn-ch-3-sect-4.3.1" />).  Manchmal kann es
                lästig sein, dass diese Einheiten &mdash;
                z.B. Objektdateien, die aus der Compilierung eines
                Programmes stammen &mdash; angezeigt werden.  Die
                <literal>global-ignores</literal> Option ist eine
                durch Leerraum (whitespace) getrennte Liste von
                Angaben, welche die Namen von Dateien und
                Verzeichnissen beschreibt, die Subversion nicht
                anzeigen soll (ausser sie stehen explizit unter
                Versionskontrolle).  Die Voreinstellung ist
                <literal>*.o *.lo *.la #*# .*.rej *.rej .*~ *~
                .#*</literal>.</para>

              <para>Sie könnten diese Option für einen einzelnen
                Aufruf von <command>svn status</command>
                überschreiben, indem sie den
                <option>--no-ignore</option> Kommandozeilen-Schalter
                benutzen.  Für Informationen über eine exaktere
                Einstellung der zu ignorierenden Objekten siehe <xref
                linkend="svn-ch-7-sect-2.3.3" />.</para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term><literal>enable-auto-props</literal></term>
            <listitem>
              <para>Dies weist Subversion an automatisch Eigenschaften
                für neu hinzugefügte bzw importierte Dateien zu
                erstellen.  Standardmässig steht diese Option auf
                <literal>no</literal>, sodass <literal>yes</literal>
                angegeben werden muss um Auto-props
                einzuschalten.</para>

              <para>Der <literal>auto-props</literal> Abschnitt
                steuert die Fähigkeit des Subversion Clienten
                automatisch Eigenschaften für neu hinzugefügte bzw
                importierte Dateien zu erstellen.  Er enthält beliebig
                viele Schlüssel-Wert Paare in der Form <literal>MUSTER
                = EIGENSCHNAME=EIGENSCHWERT</literal> wobei
                <literal>MUSTER</literal> ein Dateimuster ist, das
                einer Gruppe von Dateinamen entspricht und der Rest
                der Zeile ist die Eigenschaft und der dazugehörige
                Wert.  Entspricht ein Dateinamen mehreren
                Dateimustern, dann werden für diese Datei mehrere
                Eigenschaften gesetzt &mdash; allerdings ist nicht
                sichergestellt, dass die auto-props in der Reihenfolge
                angewendet werden, in der sie in der
                Konfigurationsdatei stehen, sodass sie nicht festlegen
                können, dass eine Regel eine andere
                <quote>überschreibt</quote>.  Sie können einige
                Beispiele für die Verwendung von auto-props in der
                <filename>config</filename> Datei finden.
                Schlussendlich dürfen sie nicht vergessen
                <literal>enable-auto-props</literal> auf
                <literal>yes</literal> zu setzen, damit die auto-probs
                auch verwendet werden.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>log-encoding</literal></term>
            <listitem>         
              <para>Diese Variable setzt den Standard-Zeichenkodierung
                für Log-Nachrichten.  Es ist eine dauerhafte
                Einstellung für die <option>--encoding</option> Option
                (siehe <xref linkend="svn-ch-9-sect-1.1"/>.)  Das
                Projektarchiv von Subversion speichert Log-Nachrichten
                in UTF8 und nimmt an, dass ihre Log-Nachrichten der
                Ländereinstellung ihres Betriebssystems entsprechen.
                Wenn ihre Log-Nachrichten eine anderere
                Zeichenkodierung verwenden, dann sollten sie diese
                hier angeben.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>use-commit-times</literal></term>
            <listitem>         
              <para>Normalerweise entspricht der Zeitstempel der
                Dateien in ihrer Arbeitskopie dem Zeitpunkt, an dem
                die Datei das letzte Mal verwendet wurde &mdash;
                entweder von ihrem Editor oder einem
                <command>svn</command> Subkommando.  Dies ist
                üblicherweise sinnvoll für Leute, die Software
                entwickeln, weil Build-Systeme oft den Zeitstempel
                benutzen, um festzustellen, welche Datein neu erstellt
                (recompiliert) werden müssen.</para>

              <para>Andererseits gibt es Situationen, in denen es nett
                ist, wenn die Zeitstempel für die Dateien in der
                Arbeitskopie den Zeitpunkt angeben, an dem diese
                zuletzt im Projektarchiv geändert wurden.  Das
                <command>svn export</command> Kommando setzt immer
                diese <quote>zuletzt-übertragen Zeitstempel</quote> in
                den Dateibäumen die es erzeugt.  Wenn sie diese
                Variable auf <literal>yes</literal> setzen, dann
                setzen auch die Kommandos <command>svn
                checkout</command>, <command>svn update</command>,
                <command>svn switch</command>, and <command>svn
                revert</command> den Zeitpunkt der letzen Übertragung
                an das Projektarchiv auf allen Dateien, die sie
                behandeln.</para>
            </listitem>
          </varlistentry>
          
	  <!-- ###TODO add description of other options shown in example
          registry file, e.g., log-encoding, etc. -->
        </variablelist>

      </sect3>

    </sect2>
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 2:  PROPERTIES                                      *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-2">
    <title>Eigenschaften</title>

    <para>Wir haben bereits im Detail besprochen, wie Subversion
      verschiedene Versionen von Datein und Verzeichnissen im
      Projektarchiv speichert und wiederfindet.  Ganze Kapitel wurden
      für diese zentrale Funktion von Subversion verwendet und selbst,
      wenn der Funktionsumfang hier enden würde, wäre Subversion aus
      der Sicht der Versionskontrolle ein vollständiges Werkzeug.
      Aber es ist noch nicht aus.</para>

    <para>Zusätzlich zu der Versionskontrolle für Verzeichnisse und
      Dateien, bietet Subversion Schnittstellen um zu den
      Verzeichnissen und Dateien, die unter Versionskontrolle stehen
      auch Metadaten zu speichern.  Wir bezeichnen diese Metadaten als
      <firstterm>Eigenschaften</firstterm>.  Sie können sich diese als
      eine Tabelle mit zwei Spalten vorstellen bei der zu jeder
      Einheit ihrer Arbeitskopie Eigenschaftsnamen mit beliebigen
      Werten verbunden werden können.  Generell gesagt können die
      Namen und Werte der Eigenschaften darstellen was immer Sie
      wollen mit der Einschränkung, dass es sich bei den Namen um
      menschenlesbaren Text handeln muss.  Und das Beste daran ist,
      dass diese Eigenschaften genauso unter Versionskontrolle stehen,
      wie der Inhalt der Dateien.  Sie können diese Eigenschaften
      ganauso einfach ändern, übertragen und Änderungen rückgängig
      machen wie den Änderungen am Inhalt.  Und Sie erhalten die
      Änderung von anderen Personen wenn sie ihre Arbeitskopie
      aktualisieren.</para>

    <sidebar>
      <title>Andere Eigenschaften in Subversion</title>

      <para>Eigenschaften erscheinen auch an anderen Stellen in
        Subversion.  Genauso wie Dateien und Verzeichnisse mit Namen
        und Werten für Eigenschaften versehen werden können, genauso
        kann jede Revision als Ganzes mit beliebigen Eigenschaften
        verbunden werden.  Die gleichen Einschränkungen gelten &mdash;
        menschenlesbarer Text für die Namen und beliebiger (auch
        binärer) Inhalt für die Werte &mdash; ausser die Eigenschaften
        stehen nicht unter Versionskontrolle.  Siehe <xref
        linkend="svn-ch-5-sect-1.2" /> für mehr Informationen zu
        diesen Eigenschaften ohne Versionskontrolle.</para>
    </sidebar>

    <para>In diesem Abschnitt werden wir die Werkzeuge für die
      Unterstützung von Eigenschaften besprechen.  Wir werden die
      <command>svn</command> Subkommandos zum bearbeiten der
      Eigenschaften beleuchten und wie Änderungen an den Eigenschaften
      den normalen Arbeitsablauf von Subversion beeinflussen und
      wollen Sie davon überzeugen, dass diese Eigenschaften in
      Subversion Ihren Umgang mit Versionskontrolle verbessern
      können.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.1">
      <title>Warum Eigenschaften?</title>

      <para>Eigenschaften können eine sehr sinnvolle Ergänzung ihrer
        Arbeitskopie darstellen.  Subversion selbst benutzt
        Eigenschaften um spezielle Informationen zu verwalten und als
        Kennzeichnung, dass spezielle Abläufe notwendig wind.
        Gleichermassen können Sie Eigenschaften für ihre eigenen
        Zwecke einsetzen.  Natürlich kann alles was mit Eigenschaften
        gemacht wird auch mit regulären Dateien unter
        Versionskontrolle erreicht werden, aber betrachten Sie
        folgendes Beispiel für den Einsatz von Eigenschaften.</para>

      <para>Sagen wir Sie wollen eine Website entwerfen, die viele
        digitale Fotos enthält, die mit einer Überschrift und einem
        Zeitstempel angezeigt werden sollen.  Nun wechseln diese Fotos
        ständig, sodass Sie soviel wie möglich automatisieren möchten.
        Diese Fotos sind ziemlich gross, sodass Sie &mdash; wie bei
        solchen Webauftritten üblich &mdash; den BesucherInnen
        kleinere Vorschaubilder anbieten wollen.  Sie können dies mit
        traditionellen Datein bewerkstelligen.  Sie können zum
        Beispiel die Dateien <filename>image123.jpg</filename> und
        <filename>image123-thumbnail.jpg</filename> nebeneinander in
        einem Verzeichnis stehen haben.  Oder wenn Sie die Dateinamen
        gleich halten wollen können Sie ein getrenntes Verzeichnis für
        die Vorschaubilder verwenden wie zum Beispiel
        <filename>thumbnails/image123.jpg</filename>.  Sie können auch
        die Überschriften und Zeitstempel in ähnlicher Weise speichern
        &mdash; wiederum getrennt von der eigentlichen Bilddatei.  So
        wird allerdings der Dateibaum ziemlich aufgeblasen und wächst
        mit jedem neuen Foto das hinzugefügt wird um ein
        mehrfaches.</para>

     <para>Betrachten Sie nun das Gleiche unter Verwendung von
        Eigenschaften in Subversion.  Angenommen, sie haben eine
        einzelne Bilddatei <filename>image123.jpg</filename> und
        setzen für diese Datei Eigenschaften mit den Namen
        <literal>Ueberschrift</literal>,
        <literal>Zeitstempel</literal> und sogar
        <literal>Vorschaubild</literal>.  Nun sieht ihre Arbeitskopie
        viel aufgeräumter aus &mdash; eigentlich sieht es so aus, als
        ob es nur Bilddateien enthalten würde.  Aber ihre
        Automatisations Skripte wissen es besser.  Diese wissen, dass
        sie <command>svn</command> (oder noch besser die
        Programmsprachen Bindungen von Subversion &mdash; siehe <xref
        linkend="svn-ch-8-sect-2.3" />) benutzen können, um die
        zusätzlichen Informationen für ihren Webauftritt zu
        ermitteln.</para>

      <para>Wie (und ob) Sie Eigenschaften in Subversion nutzen ist
        Ihre Entscheidung.  Wie erwähnt verwendet Subversion seine
        eigenen Eigenschaften, die wir später in diesem Kapitel
        besprechen werden.  Zuerst wollen wir uns anschauen, wie wir
        das <command>svn</command> Programm verwenden können um
        Eigenschaften zu bearbeiten.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.2">
      <title>Eigenschaften bearbeiten</title>

      <para>Das <command>svn</command> Kommando bietet mehrere Wege um
        Eigenschaften zu Dateien und Verzeichnissen hinzuzufügen bzw
        diese zu bearbeiten.  Für Eigenschaften mit kurzen,
        menschenlesbaren Werten ist es wahrscheinlich am einfachsten
        diese für das <command>propset</command> Subkommando direkt
        auf der Kommandozeile anzugeben.</para>

      <screen>
$ svn propset copyright '(c) 2003 Red-Bean Software' calc/button.c
property 'copyright' set on 'calc/button.c'
$
</screen>
       
      <para>Wir die Flexibilität beworben, die Subversion für die
        Werte von Eigenschaften bietet.  Wenn sie mehrzeilige Texte
        oder auch binäre Werte haben, dann werden Sie diese nicht auf
        der Kommandozeile übergeben wollen.  Daher unterstützt das
        <command>propset</command> Subkommando die Option
        <option>--file</option> (<option>-F</option>) um eine Datei
        anzugeben, die den Wert für die Eigenschaft enthält.</para>

      <screen>
$ svn propset license -F /path/to/LICENSE calc/button.c
property 'license' set on 'calc/button.c'
$
</screen>

      <para>Zusätzlich zum <command>propset</command> Kommando
        unterstützt <command>svn</command> das
        <command>propedit</command> Kommando Dieses benutzt den
        eingestellten Editor (siehe <xref
        linkend="svn-ch-7-sect-1.3.2" />) um Eigenschaften
        hinzuzufügen oder zu bearbeiten.  Wenn Sie das Kommando
        ausführen, dann startet <command>svn</command> den Editor und
        übergibt die aktellen Werte der Eigenschaft in einer
        temporären Datei (oder eine leere Datei, wenn neue
        Eigenschaften hinzugefügt werden).  Dann bearbeiten Sie die
        Werte solange in ihrem Editor, bis Sie ihren Vorstellungen
        entsprechen, speichern diese ab und verlassen den Editor.
        Wenn Subversion feststellt, dass der Wert der Eigenenschaft
        verändert wurde, dann übernimmt es den neuen Wert.  Wenn Sie
        den Editor verlassen, ohne Änderungen vorzunehmen, dann bleibt
        die Eigenschaft unverändert.</para>

      <screen>
$ svn propedit copyright calc/button.c  ### exit the editor without changes
No changes to property 'copyright' on 'calc/button.c'
$
</screen>

      <para>Wir sollten anmerken, dass <command>svn</command> bei
        Subkommandos, die mit Eigenschaften arbeiten gleichzeitig
        mehrere Pfade gleichzeitig verarbeiten kann.  Dies erlaubt es
        die Eigenschaften für ganze Dateigruppen mit einem einzigen
        Kommando durchzuführen.  Beispielsweise können Sie folgendes
        machen:</para>

      <screen>
$ svn propset copyright '(c) 2002 Red-Bean Software' calc/*
property 'copyright' set on 'calc/Makefile'
property 'copyright' set on 'calc/button.c'
property 'copyright' set on 'calc/integer.c'
&hellip;
$
</screen>

      <para>All das Hinzufügen und Ändern von Eigenschaften würde
        nicht viel Sinn machen, wenn es nicht leicht wäre die
        gespeicherten Werte zu bekommen.  Daher bietet
        <command>svn</command> zwei Subkommandos um die Namen und
        Werte von Eigenschaften, die zu Dateien und Verzeichnissen
        gespeichert sind anzuzeigen.  Das <command>svn
        proplist</command> Kommando listet die Namen der Eigenschaften
        die für einen Pfad existieren.  Wenn sie die Namen für die
        Eigenschaften eines Objektes kennen, können sie die Werte
        einzeln mit <command>svn propget</command> abrufen.  Dieses
        Kommando wird für den gewünschten Pfad (oder eine Gruppe von
        Pfaden) den Wert der Eigenschaften auf der Standardausgabe
        anzeigen.</para>

      <screen>
$ svn proplist calc/button.c
Properties on 'calc/button.c':
  copyright
  license
$ svn propget copyright calc/button.c
(c) 2003 Red-Bean Software
</screen>

      <para>Es gibt auch eine Variation des
        <command>proplist</command> Kommandos, das sowohl die Namen,
        als auch die Werte für alle Eigenschaften auflistet.
        Verwenden Sie einfach die <option>--verbose</option>
        (<option>-v</option>) Option.</para>

      <screen>
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : ================================================================
Copyright (c) 2003 Red-Bean Software.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions 
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions, and the recipe for Fitz's famous
red-beans-and-rice.
&hellip;
</screen>

      <para>Das letzte Subkommando im Zusammenhang mit Eigenschaften
        ist <command>propdel</command>.  Da Subversion die das
        Speichern von leeren Werten erlaubt können Eigenschaften nicht
        mit <command>propedit</command> oder
        <command>propset</command> entfernt werden.  Zum Beispiel hat
        folgendes <emphasis>nicht</emphasis> den gewünschten
        Effekt:</para>

      <screen>
$ svn propset license '' calc/button.c
property 'license' set on 'calc/button.c'
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : 
$
</screen>

      <para>Sie müssen das <command>propdel</command> Kommando
        verwenden um Eigenschafen wirklich zu löschen.  Die Syntax ist
        ähnlich den anderen Kommandos für Eigenschaften:</para>

      <screen>
$ svn propdel license calc/button.c
property 'license' deleted from ''.
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
$
</screen>

      <para>Nun, da Sie vertraut sind mit allen
        eigenschaften-bezogenen Kommandos von <command>svn</command>
        wollen wir besprechen, wie Änderungen der Eigenschaften den
        normalen Arbeitsablauf von Subversion beeinflussen.  Wie wir
        früher erwähnten stehen Eigenschaften von Dateien und
        Verzeichnisse ebenso unter Versionskontrolle, wie der Inhalt
        von Dateien.  Deshalb bietet Subversion die gleichen
        Möglichkeiten um die Änderung von anderen Personen mit den
        eigenen Änderungen &mdash; reibungslos, oder mit Konflikten
        &mdash; zusammenführen.</para>

      <sidebar>
        <title>Änderungen von Versions-Eigenschaften</title>

        <para>Erinnern Sie sich an die Eigenschaften ohne
          Versionskontrolle?  Sie können diese ebenfalls mit
          <command>svn</command> ändern.  Fügen Sie einfach den
          <option>--revprop</option> Parameter auf der Kommandozeile
          hinzu und geben Sie an, welche Eigenschaft Sie ändern
          wollen.  Da Revisionen global sind, brauchen Sie in diesem
          Fall keinen Pfad angeben, solange Sie sich in der
          Arbeitskopie des Projektarchives befinden, deren Revision
          sie ändern wollen.  Beispielsweise könnten sie die
          Log-Nachricht einer bestehenden Revision ändern wollen.
          <footnote>
            <para>Rechtschreibfehler, unsaubere Gramatik einfach
              <quote>falsche Aussagen</quote> in Log-Nachrichten sind
              wahrscheinlich der häufigste Grund für die Verwendung
              der <option>--revprop</option> Option.</para>
          </footnote></para>

        <screen>
$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop
property 'svn:log' set on repository revision '11'
$
</screen>

        <para>Beachte, dass die Möglichkeit zur Änderung dieser
          Eigenschaften ohne Versionskontrolle explizit von der
          Administration des Projektarchives freigegeben werden muss
          (siehe <xref linkend="svn-ch-5-sect-2.1" />).  Da diese
          Eigenschaften nicht unter Versionskontrolle stehen besteht
          die Gefahr, dass Information verlorengeht, wenn Sie nicht
          sorgfältig mit den Änderungen umgehen.  Die Administration
          des Projektarchives kann Methoden einfügen, um solche
          Verluste zu vermeiden und standardmässig ist die Änderung
          von Eigenschaften ohne Versionskontolle
          ausgeschaltet.</para>

      </sidebar>

      <para>Und wie beim Dateiinhalt sind Änderungen an den
        Eigenschaften vorerst nur lokal, erst mit der Übertragung
        durch <command>svn commit</command> an das Projektarchiv
        werden sie dauerhaft.  Ihre Änderungen an Eigenschaften können
        Sie ebenfalls leicht zurückgenommen werden &mdash;
        <command>svn revert</command> stellt den Zustand für Dateien
        und Verzeichnisse vor der Bearbeitung wieder her. Das betrifft
        sowohl den Inhalt, als auch die Eigenschaften.  Sie können
        interessante Informationen über den Status ihrer Dateien und
        Verzeichnisse erhalten, indem Sie die Kommandos <command>svn
        status</command> und <command>svn diff</command>
        aufrufen.</para>

      <screen>
$ svn status calc/button.c
 M     calc/button.c
$ svn diff calc/button.c
Property changes on: calc/button.c
___________________________________________________________________
Name: copyright
   + (c) 2003 Red-Bean Software

$
</screen>

      <para>Beachten Sie, dass das <command>status</command>
        Subkommando das <literal>M</literal> in der zweiten Spalte
        anstatt in der ersten anzeigt.  Dies deshalb, weil die
        Eigenschaften von <filename>calc/button.c</filename> geändert
        wurden, aber nicht der Inhalt.  Hätten wir beides geändert,
        dann würde das <literal>M</literal> auch in beiden Spalten
        aufscheinen (siehe <xref linkend="svn-ch-3-sect-4.3.1"
        />).</para>

      <sidebar>
        <title>Konflikte bei Eigenschaften</title>

        <para>Genauso wie beim Datei-Inhalt können lokale Änderungen
          im Konflikt mit Änderungen von anderen Personen stehen.
          Wenn Sie ihre Arbeiskopie aktualisieren und Änderungen von
          Eigenschaften unter Versionskontrolle empfangen, die mit
          ihren eigenen Kollidieren, wird Subversion dies melden und
          das Objekt mit dem Konflikt-Status versehen.</para>
 
        <screen>
% svn update calc
M  calc/Makefile.in
 C calc/button.c
Updated to revision 143.
$ 
</screen>
         
        <para>Subversion wird in dem Verzeichnis, in dem das Objekt
          mit dem Konflikt-Status liegt eine Datei mit der
          <filename>.prej</filename> Erweiterung anlegen, welche die
          Details des Konfliktes enthält.  Sie sollten den Inhalt
          dieser Datei studieren um festzustellen, wie Sie den
          Konflikt beseitigen können.  Bis der Konflikt aufgelöst ist,
          sehen Sie für dieses Objekt ein <literal>C</literal> in der
          zweiten Spalte der <command>svn status</command> Ausgabe und
          Versuche die lokalen Änderungen zu übertragen werden
          fehlschlagen.</para>
 
        <screen>
$ svn status calc
 C     calc/button.c
?      calc/button.c.prej
$ cat calc/button.c.prej 
prop 'linecount': user set to '1256', but update set to '1301'.
$
</screen>
 
        <para>Um Konflikte von Eigenschaften aufzulösen, stellen Sie
          einfach sicher, dass die kollidierte Eigenschaft die Werte
          enthält, die sie enthalten soll und benutzen Sie dann das
          <command>svn resolved</command> Kommando, um Subversion
          mitzuteilen, dass das Problem von Ihnen aufgelöst
          wurde.</para>

      </sidebar>

      <para>Ihnen wird die nicht standardisierte Art aufgefallen sein,
        in der Subversion momentan Unterschiede bei Eigenschaften
        anzeigt.  Sie können trotzdem <command>svn diff</command>
        verwenden und die Ausgabe umleiten, um eine brauchbare
        Patch-Datei zu erstellen.  Das <command>patch</command>
        Programm wird Eigenschafts-Patches ignorieren &mdash; eine
        Regel besagt, dass <command>patch</command> alles ignoriert,
        was es nicht versteht.  Dies bedeutet unglücklicherweise, dass
        Sie die Eigenschaften-Änderungen händisch durchführen müssen,
        um einen Patch, der von <command>svn diff</command> erstellt
        wurde vollständig anzuwenden.</para>

      <para>Wie Sie sehen, hat die Änderung von Eigenschaften keinen
        besonderen Einfluss auf den typischen Arbeitsablauf von
        Subversion.  Die generellen Aufgaben von Aktualisieren der
        Arbeitskopie, Überprüfen des Status von Dateien und
        Verzeichnissen, Anzeigen von Änderungen die Sie gemacht haben
        und Übertragen dieser Änderungen an das Projektarchiv wurden
        durch die Anwesenheit von Eigenschaften nicht verändert.  Das
        <command>svn</command> Progamm hat einige zusätzliche
        Subkommandos um Eigenschaften zu bearbeiten, aber das ist die
        einzige Abweichung.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.3">
      
      <title>Spezielle Eigenschaften</title>

      <para>Subversion hat keine spezielle Vorschriften betreffend der
        Eigenschaften &mdash; Sie können diese für jeden Zweck
        verwenden.  Subversion erwartet nur, dass Sie keine
        Eigenschaftsnamen verwenden, die mit dem Präfix
        <literal>svn:</literal> beginnen.  Dies ist der Namensraum den
        es für seinen eigenen Bedarf reserviert hat.  Tatsächlich
        definiert Subversion wichtige Eigenschaften, die magische
        Auswirkungen auf die Dateien und Verzeichnisse haben denen
        diese zugeordnet wurden.  In diesem Abschnitt werden wir den
        Schleier lüften und beschreiben, wie diese
        Spezialeigenschaften ihr Leben ein bischen einfacher machen
        können.</para>
      
      <sect3 id="svn-ch-7-sect-2.3.1">
        <title><literal>svn:executable</literal></title>
 
        <para>Die <literal>svn:executable</literal> Eigenschaft wird
          benutzt um das Ausführungsrecht-Bit (execute permission bit)
          einer Datei unter Versionskontrolle auf eine
          halbautomatisierte Weise zu verwalten.  Diese Eigenschaft
          hat keine definierten Werte &mdash; die blosse Anwesenheit
          der Eigenschaft bedeutet den Wunsch, dass Subversion das
          Ausführungsrecht-Bit gesetzt halten soll.  Das Entfernen
          dieser Eigenschaft gibt die Kontrolle über das
          Ausführungsrecht-Bit wieder komplett an das Betriebssystem
          zurück.</para>

        <para>Bei vielen Betriebssystemen ist die Möglichkeit eine
          Datei als Kommando auszuführen an die Existenz des
          Ausführungsrecht-Bits gebunden.  Standardmässig ist dieses
          Bit nicht gesetzt und muss ausdrücklich vergeben werden,
          wenn es benötigt wird.  In einer Arbeitskopie wird
          allerdings auch für bestehende Dateien eine neue Datei
          angelegt, wenn im Zuge der Aktualisierung eine Änderung
          empfangen wird.  Das heisst, dass Sie das
          Ausführungsrecht-Bit für eine Datei gesetzt haben, dass
          dieses Bit aber wieder verlorengeht, wenn die Datei bei
          einer Aktualisierung geändert wird.  Daher bietet Subversion
          die <literal>svn:executable</literal> Eigenschaft um das
          Ausführungsrecht-Bit gesetzt zu halten.</para>

        <para>Diese Eigenschaft hat keine Auswirkungen auf
          Dateisysteme die das Konzept des Ausführungsrecht-Bits nicht
          kennen wie zum Beispiel FAT32 und NTFS.
          <footnote>
            <para>Die Windows Dateisysteme benutzen die
              Dateierweiterung (wie <literal>.EXE</literal>,
              <literal>.BAT</literal>, und <literal>.COM</literal>) um
              ausführbare Datein zu kennzeichnen bzw zu
              erkennen.</para>
          </footnote>
          Obwohl es keine definierten Werte gibt, wird Subversion den
          Wert auf <literal>*</literal> stellen, wenn die Eigenschaft
          gesetzt wird.  Diese Eigenschaft kann nur auf Dateien
          angewendet werden, nicht jedoch auf Verzeichnisse.</para>

      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.2">
        <title><literal>svn:mime-type</literal></title>
        
        <para>Die <literal>svn:mime-type</literal> Eigenschaft bietet
          viele Einsatzmöglichkeiten in Subversion.  Neben der
          Speicherung der Multipurpose Internet Mail Extensions (MIME)
          Klasse steuert der Wert dieser Eigenschaft das Verhalten von
          Subversion selbst.</para>

        <para>Zum Beispiel, wenn die <literal>svn:mime-type</literal>
          Eigenschaft einer Datei auf einen nicht-text MIME Typ
          gesetzt ist (üblicherweise ein Typ, der nicht mit
          <literal>text/</literal> beginnt, obwohl es Ausnahmen gibt),
          nimmt Subversion an, dass der Dateiinhalt binär &mdash; also
          nicht menschenlesbar &mdash; ist.  Eine der Annehmlichkeiten
          die Subversion üblicherweise bietet ist das kontextbezogene
          zeilenweise Zusammenführen von Änderungen die vom Server
          während einer Aktualisierung empfangen werden.  Aber für
          Dateien, deren Inhalt scheinbar aus Binärdaten besteht, gibt
          es kein Konzept von <quote>Zeilen</quote>.  Daher versucht
          Subversion für diese Dateien kein kontextbezogenes
          Zusammenführen während der Aktualisierung.  Stattdessen wird
          jedesmal, wenn in der Arbeitskopie eine Binärdatei lokal
          geändert wurde und für die eine Aktualisierung vom Server
          empfangen wird die lokale Datei auf eine
          <filename>.orig</filename> Erweiterung umbenannt und
          Subversion speichert die eine neue Datei in der
          Arbeitskopie, welche die empfangenen Änderungen enthält,
          aber nicht ihre eigenen lokalen Änderungen.  Dieses
          Verhalten dient der Absicherung gegen fehlerhafte Versuche
          eines kontextbezogenen Zusammenführens für Dateien, für die
          das einfach nicht möglich ist.</para>

        <para>Wenn die <literal>svn:mime-type</literal> Eigenschaft
          gesetzt ist, dann verwendet das Subversion Apache Modul
          diesen Wert um den <literal>Content-type:</literal> HTTP
          Header damit zu belegen, wenn auf eine GET Anforderung
          geantwortet wird.  Dies gibt einen entscheidenden Hinweis
          darauf, wie die Dateien angezeigt werden sollen, wenn Sie
          das Projektarchiv mit einem Web-Browser durchsehen.</para>

      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.3">
        <title><literal>svn:ignore</literal></title>

        <para>Die <literal>svn:ignore</literal> Eigenschaft enthält
          eine Liste von Dateimustern die von bestimmten Subversion
          Operationen ignoriert werden.  Dies ist wahrscheinlich die
          am häufigsten benutzte Spezialeigenschaft von Subversion.
          Sie arbeitet zusammen mit der
          <literal>global-ignores</literal> Option der
          Laufzeit-Konfiguration (siehe <xref
          linkend="svn-ch-7-sect-1.3.2" />) um Dateien und
          Verzeichnisse heruszufiltern, die nicht unter
          Versionskontrolle stehen.  Dies betrifft Kommandos wie
          <command>svn status</command>, <command>svn add</command>
          und <command>svn import</command>.</para>

        <para>Das Prinzip hinter der <literal>svn:ignore</literal>
          Eigenschaft ist schnell erklärt.  Subversion erwartet nicht,
          dass alle Dateien und Unterverzeichnisse in einer
          Arbeitskopie unter Versionskontrolle stehen.  Diese müssen
          explizit mit dem <command>svn add</command> oder
          <command>svn import</command> Kommandos unter die Verwaltung
          von Subversion gestellt werden.  Als Folge gibt es oftmals
          Ressourcen, die nicht unter Versionskontrolle stehen.</para>

        <para>Nun, das <command>svn status</command> Kommando zeigt
          als Teil seiner Ausgabe auch alle Dateien und
          Unterverzeichnisse an, die nicht unter Versionskontrolle
          stehen, sofern sie nicht schon von der
          <literal>global-ignores</literal> Option (oder den
          einprogrammierten Standardwerten) ausgefiltert werden.  Dies
          geschieht, damit Sie sehen, ob sie eventuell vergessen haben
          eine Ressource unter Versionskontrolle zu stellen.</para>

       <para>Aber Subversion kann nicht die Namen aller Ressourcen
          erraten, die ignoriert werden sollen, bwohl es sehr oft die
          gleichen Dinge sind die in <emphasis>jeder</emphasis>
          Arbeitskopie ignoriert werden sollen.  Alle diese
          Dateimuster in die anmeldungsspezifische
          Laufzeit-Konfiguration einzutragen ist nicht nur lästig,
          sondern birgt die Gefahr mit den Erfordernissen von anderen
          ausgecheckten Arbeitskopien zu kollidieren.</para>

        <para>Die Lösung besteht darin, die zu ignorierenden
          Dateimuster, die speziell für eine einzelne Ressource sind
          und meist das Erscheinen in einem Verzeichnis betreffen, mit
          dem Verzeichnis selbst zu speichern.  Geläufige Beispiele
          für Ressourcen, die nicht unter Versionskontrolle stehen
          sollen und die grundsätzlich ausschliesslich in einem
          bestimmten Verzeichnis vorkommen und gerne hier aufscheinen,
          ist die Ausgabe von Programmkompilierungen.  Oder &mdash; um
          ein Beispiel zu verwenden, das besser zu diesem Buch passt
          &mdash; die HTML, PDF oder PostScript Dateien, die als
          Ergebnis der Umformung einiger DocBook XML Dateien in ein
          gefälligeres Format entstehen.</para>

        <sidebar>
          <title>Zu ignorierende Dateimuster für CVS Anwender</title>
        
          <para>Die <literal>svn:ignore</literal> Eigenschaft von
            Subversion ist in Syntax und Funktion der CVS
            <filename>.cvsignore</filename> Datei sehr ähnlich.
            Tatsächlich können Sie bei der Migration einer CVS
            Arbeitskopie nach Subversion den Inhalt der
            <filename>.cvsignore</filename> Datei als Eingabedatei für
            das <command>svn propset</command> Kommando
            verwenden:</para>
       
          <screen>
$ svn propset svn:ignore -F .cvsignore .
property 'svn:ignore' set on '.'
$
</screen>        

          <para>Trotzdem gibt es einige Unterschiede in der Art, wie
            CVS und Subversion die zu ignorierenden Dateimuster
            behandeln.  Die beiden Systeme verwenden die Dateimuster
            für die zu ignorierenden Dateien zu unterschiedlichen
            Zeitpunkten und es gibt geringfügige Unterschiede, auf was
            sich die Dateimuster beziehen.  Subversion versteht auch
            nicht die besondere Bedeutung von <literal>!</literal> für
            das Zurücksetzen in den Zustand, dass überhaupt keine zu
            ignorierenden Dateimuster vorhanden sind.</para>

        </sidebar>

        <para>Für diese Zwecke ist die <literal>svn:ignore</literal>
          Eigenschaft vorgesehen.  Der Wert ist eine mehrzeilige
          Sammlung von Dateimustern &mdash; ein Muster pro Zeile.  Die
          Eigenschaft wird dem Verzeichnis zugeordnet für das Sie die
          Dateimuster anwenden wollen.
          <footnote>
            <para>Die Dateimuster sind ausschliesslich für dieses
              Verzeichnis &mdash; sie werden nicht rekursiv für die
              Unterverzeichnisse verwendet.</para>
          </footnote>
          Nehmen wir beispielsweise die folgende Ausgabe von
          <command>svn status</command>:</para>

       <screen>
$ svn status calc
 M     calc/button.c
?      calc/calculator
?      calc/data.c
?      calc/debug_log
?      calc/debug_log.1
?      calc/debug_log.2.gz
?      calc/debug_log.3.gz
</screen>

        <para>In diesem Beispiel haben Sie die Eigenschaften von
          <filename>button.c</filename> geändert, aber in ihrer
          Arbeitskopie gibt es einige Dateien, die nicht unter
          Versionskontrolle stehen: Das letzte
          <filename>calculator</filename> Programm, das Sie aus ihrem
          Quellcode kompiliert haben, eine Quellcode-Datei namens
          <filename>data.c</filename> und einige
          Debugging-Protokolldateien.  Nun wissen Sie, dass ihr
          Erstellungs-System (build system) immer als Ergebnis das
          <filename>calculator</filename> Programm generiert.
          <footnote>
            <para>Ist das nicht der Zweck eines Build Systems?</para>
          </footnote>
          Und Sie wissen, dass ihre Testumgebung immer solche
          Debugging-Protokolldateien zurücklässt.  Diese Umstände
          treffen auf alle Arbeitskopien zu und nicht nur auf dieses
          eine Verzeichnis.  Und Sie wissen, dass Sie kein Interesse
          haben, diese Dinge jedesmal zu sehen, wenn sie <command>svn
          status</command> aufrufen.  Also verwenden Sie <command>svn
          propedit svn:ignore calc</command> um einige zu ignorierende
          Dateimuster zum <filename>calc</filename> Verzeichnis
          hinzuzufügen.  Zum Beispiel könnten Sie folgendes als neuen
          Wert für die <literal>svn:ignore</literal> Eigenschaft
          hinzufügen:</para>

        <programlisting>
calculator
debug_log*
</programlisting>

        <para>Nachdem Sie diese Eigenschaft hinzugefügt haben, wird
          eine lokale Eigenschaftsänderung für das
          <filename>calc</filename> Verzeichnis angezeigt.  Aber
          beachten Sie, was sich sonst noch in der <command>svn
          status</command> Ausgabe geändert hat:</para>

        <screen>
$ svn status
 M     calc
 M     calc/button.c
?      calc/data.c
</screen>

        <para>Nun, all der unnötige Müll ist verschwunden.  Natürlich
          sind die Dateien nach wie vor in ihrer Arbeitskopie.
          Subversion erinnert Sie nur nicht mehr daran, dass sie zwar
          vorhanden sind, aber nicht unter Versionskontrolle stehen.
          Und nun, da all die uninteressanten Störungen aus der
          Ausgabe entfernt wurden, bleiben aussagekräftigere Angaben
          zurück &mdash; zum Beispiel die Quellcode-Datei die
          möglicherweise vergessen wurde unter die Versionskontrolle
          zu stellen.</para>

        <para>Wenn Sie die ignorierten Dateien trotzdem sehen wollen,
          können Sie die <command>--no-ignore</command> Option
          verwenden:</para>

<screen>
$ svn status --no-ignore
 M     calc/button.c
I      calc/calculator
?      calc/data.c
I      calc/debug_log
I      calc/debug_log.1
I      calc/debug_log.2.gz
I      calc/debug_log.3.gz
</screen>

        <para>Die Liste mit den zu ignorierenden Dateimustern wird
          auch von <command>svn add</command> und <command>svn
          import</command> verwendet.  Beide Operationen stellen eine
          Gruppe von Dateien und Verzeichnissen unter die
          Versionskontrolle von Subversion.  Anstatt nun zu verlangen,
          dass jede Datei bzw jeder Verzeichnisbaum explizit angeführt
          werden müssen um unter Versionskontrolle zu stehen,
          verwendet Subversion die Dateimuster der zu ignorierenden
          Dateien um festzustellen, welche Dateien ignoriert werden
          sollen, wenn sie Teil einer grösseren rekursiven Übernahme
          in die Versionskontrolle sind.</para>
   
      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.4">
        <title><literal>svn:keywords</literal></title>

        <para>Subversion besitzt die Fähigkeit um
          <firstterm>Schlüsselworte</firstterm> (keywords) im Inhalt
          einer Datei unter Versionskontrolle mit nützlicher
          dynamischer Information über die Datei selbst zu ersetzen.
          Schlüsselworte beschreiben gewöhnlich Informationen für den
          Zeitpunkt als die Datei zum letzten Mal geändert wurde.  Da
          sich diese Information jedesmal ändert, wenn die Datei
          verändert wird, und zwar genaugenommen
          <emphasis>nachdem</emphasis> sich die Datei geändert hat,
          ist es für jeden Prozess &mdash; mit Ausnahme der
          Versionskontrolle selbst &mdash; mühsam diese Information
          auf dem letzten Stand zu halten.  Würde diese Aufgabe
          Menschen überlassen, dann würde die Information unweigerlich
          veralten.</para>

        <para>Sagen wir, Sie haben ein Dokument, in welchem Sie das
          Datum der letzen Änderung anzeigen wollen.  Sie können jeden
          Autor und jede Autorin dieses Dokuments damit belasten auch
          den Teil der das Änderungsdatum enthält zu aktualisieren,
          bevor die Änderungen übertragen werden.  Aber früher oder
          später wird dies jemand vergessen.  Stattdessen können Sie
          einfach Subversion beauftragen eine Schlüsselwort-Ersetzung
          für das <literal>LastChangedDate</literal> Schlüsselwort
          durchzuführen.  Sie bestimmen mit einem
          <firstterm>Schlüsselwort-Anker</firstterm> die Stelle, wo
          das Schlüsselwort im Dokument eingefügt werden soll.  Dieser
          Anker besteht aus einer Zeichenkette in der Form
          <literal>$</literal><replaceable>SchlüsselwortName</replaceable><literal>$</literal></para>

        <para>Subversion definiert eine Liste von möglichen
          Schlüsselworten für diese Ersetzung.  Die Liste enthält die
          folgenden fünf Schlüsselworte, wobei einige davon
          Abkürzungen haben, die Sie auch verwenden können:</para>

        <variablelist>
          <varlistentry>
            <term><literal>LastChangedDate</literal></term>
            <listitem>
              <para>Dieses Schlüsselwort beschreibt das Datum der
                letzen Änderung im Projektarchiv und könnte so
                aussehen: <literal>$LastChangedDate: 2002-07-22
                21:42:37 -0700 (Mon, 22 Jul 2002) $</literal>.  Es
                kann mit <literal>Date</literal> abgekürzt
                werden.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LastChangedRevision</literal></term>
            <listitem>
              <para>Dieses Schlüsselwort beschreibt die letzte
                Revision, in der die Datei im Projektarchiv geändert
                wurde und könnte so aussehen:
                <literal>$LastChangedRevision: 144 $</literal>.  Es
                kann mit <literal>Rev</literal> abgekürzt
                werden.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LastChangedBy</literal></term>
            <listitem>
              <para>Dieses Schlüsselwort beschreibt den letzen
                Benutzer, der eine Änderung für diese Datei an das
                Projektarchiv übertragen hat und könnte so aussehen:
                <literal>$LastChangedBy: harry $</literal>.  Es kann
                mit <literal>Author</literal> abgekürzt werden.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>HeadURL</literal></term>
            <listitem>
              <para>Dieses Schlüsselwort beschreibt die vollständige
                URL zur letzten Version der Datei im Projektarchiv und
                könnte so aussehen: <literal>$HeadURL:
                http://svn.collab.net/repos/trunk/README $</literal>.
                Es kann mit <literal>URL</literal> abgekürzt
                werden.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>Id</literal></term>
            <listitem>
              <para>Dieses Schlüsselwort ist eine komprimierte
                Kombination der anderen Schlüsselworte und könnte so
                aussehen: <literal>$Id: calc.c 148 2002-07-28
                21:30:43Z sally $</literal>.  Dies würde bedeuten,
                dass die letze Änderung der Datei
                <filename>calc.c</filename> am späten Abend des
                28. Juli 2002 mit der Revision 148 durch die
                Benutzerin <literal>sally</literal> durchgeführt
                wurde.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Wenn Sie nur den Schlüsselwort-Anker in den Text ihrer
          Datei einfügen geschieht noch gar nichts besonderes.
          Subversion wird nicht versuchen Textersetzungen in einem
          Dateiinhalt durchzuführen, solange dies nicht ausdrücklich
          angeordnet wird.  Nach alledem möchten Sie vielleicht ein
          Dokument
          <footnote>
            <para>&hellip; oder vielleicht einen Abschnitt in einem
              Buch &hellip;</para>
          </footnote> 
          darüber schreiben, wie Schlüsselworte zu verwenden sind und
          Sie wollen natürlich nicht, dass Subversion ihre hübschen
          Beispiele der noch nicht ersetzen Schlüsselwort-Anker
          verändert!</para>

        <para>Um Subversion mitzuteilen, ob Schlüsselworte für eine
          bestimmte Datei ersetzt werden sollen oder nicht, verwenden
          wir wieder die eigenschaftsbezogenen Subkommandos.  Die
          <literal>svn:keywords</literal> Eigenschaft einer Datei
          unter Versionskontrolle bestimmt, welche Schlüsselworte für
          diese Datei ersetzt werden sollen.  Der Wert der Eigenschaft
          ist eine durch Leerschritte getrennte Liste von
          Schlüsselwort-Namen oder deren Abkürzungen aus der vorigen
          Tabelle.</para>

        <para>Wenn Sie zum Beispiel eine Datei unter Versionskontrolle
          mit dem Namen <filename>wetter.txt</filename> haben, die so
          aussieht:</para>

        <programlisting>
Hier ist der letzte Bericht von der Wetterfront.
$LastChangedDate$
$Rev$
Die Cumulus-Wolken entfernen sich mit der Ankunft des Sommers.
</programlisting>
        
        <para>Wenn die <literal>svn:keywords</literal> Eigenschaft für
          diese Datei nicht gesetzt wird, dann wird Subversion auch
          nichts besonderes machen.  Nun schalten wir die Ersetzung
          für das <literal>LastChangedDate</literal> Schlüsselwort
          ein.</para>

        <screen>
$ svn propset svn:keywords "LastChangedDate Author" wetter.txt
property 'svn:keywords' set on 'wetter.txt'
$
</screen>        

        <para>Sie haben nun eine lokale Änderung der Eigenschaften für
          die Datei <filename>wetter.txt</filename> durchgeführt.  Sie
          werden noch immer keine Änderungen am Inhalt der Datei
          feststellen können (ausser Sie haben selbst welche gemacht,
          bevor Sie die Eigenschaft gesetzt haben).  Beachten Sie,
          dass die Datei einen Schlüsselwort-Anker für das
          <literal>Rev</literal> Schlüsselwort enthält, wir aber
          bisher dieses Schlüsselwort noch nicht in den
          Eigenschaftwert aufgenommen haben.  Subversion ignoriert
          glücklicherweise Anforderungen zur Ersetzung von
          Schlüsselworten, die in der Datei nicht vorkommen und
          ersetzt keine Schlüsselworte die nicht im Wert der
          <literal>svn:keywords</literal> Eigenschaften gesetzt
          wurden.</para>

        <sidebar>
          <title>Schlüsselworte und Schein-Differenzen</title>

          <para>Das sichtbare Resultat einer Schlüsselwort-Ersetzung
            mag zu der Annahme führen, dass jede Version einer Datei
            mit diesem Merkmal sich von der vorhergehenden Version
            zumindest in dem Bereich unterscheidet, in dem der
            Schlüsselwort-Anker gesetzt wurde.  Dies ist jedoch nicht
            der Fall.  Während durch <command>svn diff</command>
            lokale Änderungen ermittelt werden und bevor diese lokalen
            Änderungen mit <command>svn commit</command> an das
            Projektarchiv übertragen werden, entfernt
            (<quote>zurück-ersetzt</quote>) Subversion alle
            Schlüsselworte die vorher ersetzt wurden.  Dies führt
            dazu, dass die im Projektarchiv gespeicherten Versionen
            nur jene Änderungen enthalten, die von der bearbeitenden
            Person vorgenommen wurden.</para>

        </sidebar>

        <para>Unmittelbar nachdem Sie die Änderung der Eigenschaft
          übertragen haben wird Subversion in ihrer Arbeitsdatei den
          Ersetzungs-Text aktualisieren.  Statt des
          Schlüsselwort-Ankers <literal>$LastChangedDate$</literal>
          sehen Sie das ersetzte Ergebnis.  Dieses Ergebnis enthält
          auch den Namen des Schlüsselwortes sowie weitere Zeichen und
          wird mit dem Dollarzeichen (<literal>$</literal>) begrenzt.
          Und wie wir vorhergesagt haben wurde das
          <literal>Rev</literal> Schlüsselwort nicht ersetzt, weil wir
          dies nicht angeordnet hatten.</para>

        <screen>
Hier ist der letzte Bericht von der Wetterfront.
$LastChangedDate: 2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002) $
$Rev$
Die Cumulus-Wolken entfernen sich mit der Ankunft des Sommers.
</screen>
        
        <para>Wenn nun eine andere Person Änderungen für die Datei
          <filename>wetter.txt</filename> überträgt, dann wird Ihre
          Kopie der Datei den gleichen Ersatztext zeigen wie davor
          &mdash; bis Sie ihre Arbeitskopie aktualisieren.  Dann
          werden die Schlüsselworte in ihrer
          <filename>wetter.txt</filename> Datei wieder mit
          Informationen ersetzt, welche den Stand der aktuellsten
          Übertragung für diese Datei wiederspiegeln.</para>

      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.5">
        <title><literal>svn:eol-style</literal></title>

        <para><!-- *TODO* bin nicht sicher, ob ich den folgenden satz
          richtig verstehe -->Unless otherwise noted using a versioned
          file's <literal>svn:mime-type</literal> property, Subversion
          assumes the file contains human-readable data.  Solange
          nichts anderes erwähnt wird, geht Subversion bei der
          Verwendung der <literal>svn:mime-type</literal> Eigenschaft
          für eine Datei davon aus, dass es sich um einen
          menschen-lesbaren Inhalt handelt.  Allgemein gesprochen
          benutzt Subversion diese Information nur um festzustellen,
          ob bei dieser Datei Unterschiede kontextbezogen ermittelt
          werden können.  Ansonsten arbeitet Subversion
          byteweise.</para>
        
        <para>Das bedeutet, dass Subversion standardmässig den
          <firstterm>end-of-line (EOL)</firstterm> also
          Zeilenende-Markierungen, ihrer Dateien keine Beachtung
          schenkt.  Leider benutzen die verschiedenen Betriebssysteme
          unterschiedliche Marken, um das Ende einer Textzeile zu
          markieren.  Zum Beispiel wird das Zeilenende auf der
          Windows-Plattform üblicherweise durch das
          ASCII-Kontrollzeichen-Paar &mdash; Wagenrücklauf
          (<literal>CR</literal> carriage return) und Zeilenschaltung
          (<literal>LF</literal> line feed) markiert.  Unix-Software
          dagegen benutzt nur das <literal>LF</literal> Zeichen um das
          Zeilenende festzulegen.</para>

        <para>Nicht alle Werkzeuge auf den verschiedenen
          Betriebssystemen können mit einem Zeilenende-Format umgehen,
          das vom <firstterm>muttersprachlichen Endestil</firstterm>
          des Betriebssystems auf dem sie laufen abweicht.
          Gebräuchliche Ergebnisse sind, dass Unix-Programme die
          <literal>CR</literal> Zeichen von Windows-Dateien als
          reguläres Zeichen behandeln (üblicherweise als
          <literal>^M</literal> angezeigt) und dass Windows-Programme
          alle Zeilen einer Unix-Datei als eine einzige riesige Zeile
          betrachten, weil keine Wagenrücklauf/Zeilenschaltung
          Kombination (also <literal>CRLF</literal>) gefunden wurde
          um das Zeilenende zu markieren.</para>

        <para>Diese Empfindlichkeit gegenüber fremden EOL-Markierungen
          kann für Leute, die Dateien zwischen verschiedenen
          Betriebssystemen austauschen schnell frustrierend werden.
          Gehen wir zum Beispiel von einer Programm-Quelldatei aus,
          die sowohl auf Windows, als auch auf Unix-Systemen
          bearbeitet wird.  Wenn auf beiden Plattformen Werkzeuge
          verwendet werden, welche die den gleichen Zeilenende-Stil
          haben, dann wird es zu keinen Schwierigkeiten kommen.</para>

        <para>In der Praxis scheitern aber viele Werkzeuge, wenn sie
          eine Datei mit fremden EOL-Markierungen sauber lesen sollen,
          oder sie konvertieren die Zeilenende-Marken in den eigenen
          Zeilenende-Stil wenn die Datei gespeichert wird.  Wenn
          ersteres der Fall ist, dann muss ein externes
          Konvertierungs-Programm (wie <command>dos2unix</command>
          oder das dazugehörige Gegenstück
          <command>unix2dos</command>) verwendet werden, um die Datei
          für die Bearbeitung vorzubereiten.  Der zweite Fall benötigt
          keine spezielle Vorbereitung.  Aber in beiden Fällen
          entsteht eine Datei, die sich vom Original unterscheidet und
          zwar genaubetrachtet in jeder Zeile!  Bevor die Änderungen
          übertragen werden, gibt es zwei Möglichkeiten.  Entweder
          wird ein Konvertierungs-Programm verwendet, um den
          ursprünglichen Zeilenende-Stil wieder herzustellen oder die
          Datei wird mit den neuen EOL-Marken übertragen.</para>

        <para>Szenarien wie diese haben zur Folge, dass Zeit vergeudet
          wird, um unnötige Änderungen an übertragenen Dateien
          vorzunehmen.  Vergeudete Zeit ist schmerzlich genug, aber
          wenn durch die Übertragung jede Zeile in einer Datei
          geändert wird, dann erschwert dies die Ermittlung welche
          Zeilen nun wirklich relevante Änderungen enthalten
          erheblich.  Wo wurde dieser oder jener Fehler wirklich
          behoben?  In welcher Zeile hat sich der Syntaxfehler
          eingeschlichen?</para>

        <para>Die Lösung für dieses Problem ist die
          <literal>svn:eol-style</literal> Eigenschaft.  Wenn diese
          Eigenschaft auf einen gültigen Wert gesetzt ist, dann
          benutzt Subversion diesen Wert um zu entscheiden, welche
          spezielle Behandlung auf die Datei anzuwenden ist, damit der
          Zeilenende-Stil nicht mit jeder Übertragung, die von einem
          unterschiedlichen Betriebssystem kommt wechselt.  Gültige
          Werte sind:</para>

        <variablelist>
          <varlistentry>
            <term><literal>native</literal></term>
            <listitem>
              <para>Dies legt fest, dass die Datei die EOL-Marken
                enthält, die auf dem Betriebssystem auf dem Subversion
                läuft heimisch (üblich) sind.  In anderen Worten, wenn
                auf einer Windows-Maschine eine Arbeitskopie auscheckt
                wird, die eine Datei enthält, deren
                <literal>svn:eol-style</literal> Eigenschaft auf
                <literal>native</literal> gesetzt ist, dann wird die
                Datei <literal>CRLF</literal> als
                Zeilenende-Markierung enthalten.  Wenn die gleiche
                Arbeitskopie auf einem Unix-System ausgecheckt wird,
                dann wird die gleiche Datei <literal>LF</literal> als
                EOL-Marker enthalten.</para>

              <para>Beachten Sie, dass Subversion derzeit die Dateien
                im Projektarchiv &mdash; unabhängig vom Betriebssystem
                &mdash; ausschliesslich mit <literal>LF</literal> als
                EOL-Marke abspeichert.  Dies ist grundsätzlich
                transparent, denken wir.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>CRLF</literal></term>
            <listitem>
              <para>Dies bedeutet, dass die Datei die
                <literal>CRLF</literal> Abfolge als EOL-Markierung
                enthält &mdash; unabhängig vom verwendeten
                Betriebssystem.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LF</literal></term>
            <listitem>
              <para>Dies bedeutet, dass die Datei das
                <literal>LF</literal> Zeichen als EOL-Marke enthält
                &mdash; unabhängig vom verwendeten
                Betriebssystem.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>CR</literal></term>
            <listitem>
              <para>Dies bedeutet, dass die Datei das
                <literal>CR</literal> Zeichen als EOL-Marke enthält
                &mdash; unabhängig vom verwendeten Betriebssystem.
                Dieser Zeilenende-Stil ist nicht sehr verbreitet.  Er
                wurde auf älteren Macintosh-Plattformen verwendet (auf
                denen Subversion niemals gelaufen ist).</para>
            </listitem>
          </varlistentry>
        </variablelist>
        
      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.6">
        <title><literal>svn:externals</literal></title>

        <para>Die <literal>svn:externals</literal> Eigenschaft enthält
          Anweisungen für Subversion, um ein versioniertes Verzeichnis
          mit einem oder mehreren zusätzlichen ausgecheckten
          Arbeitskopien zu versorgen.<!-- *TODO* überprüfen/querlesen
          --> Für weitere Informationen zu diesem Schlüsselwort und
          seiner Verwendung siehe <xref
          linkend="svn-ch-7-sect-3"/>.</para>

      </sect3>
    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.4">
      <title>Automatisches setzen von Eigenschaften</title>

      <para>Eigenschaften sind eine mächtige Eigenschaft von
        Subversion, die als Schlüssel zu vielen Fähigkeiten von
        Subversion dient, die in diesem oder anderen Kapiteln
        diskutiert werden &mdash; Unterstützung für
        Unterschiedserkennung (diff) und Zusammenführung (merge) von
        Texten, Schlüsselwort-Ersetzung, Zeilenende-Übersetzung, usw.
        Aber um den vollen Nutzen von Eigenschaften zu geniessen,
        müssen diese auf den richtigen Dateien und Verzeichnissen
        gesetzt werden.  Unglücklicherweise kann dieser Schritt leicht
        vergessen werden, speziell deswegen, weil eine fehlende
        Eigenschaft üblicherweise nicht in einem augenscheinlichen
        Fehlerzustand (verglichen mit dem Scheitern beim Hinzufügen
        einer Datei zur Versionskontrolle) resultiert.  Damit
        Eigenschaften dort verwendet werden, wo sie benötigt werden,
        bietet Subversion Reihe von nützichen Hilfestellungen.</para>

      <para>Wenn sie eine Datei mit <command>svn add</command> oder
        <command>svn import</command>unter Versionskontrolle stellen,
        verwendet Subversion eine sehr einfache Heuristik um
        festzustellen, ob der Dateiinhalt menschen-lesbar ist oder
        nicht.  Wenn zweiteres der Fall ist, dann wird Subversion
        automatisch die <literal>svn:mime-type</literal> Eigenschaft
        auf <literal>application/octet-stream</literal> setzen (das
        ist der generische <quote>dies ist eine Ansammlung von
        Bytes</quote> MIME-Typ).  Wenn die Erkennung von Subversion
        fehlerhaft ist, oder wenn Sie die
        <literal>svn:mime-type</literal> Eigenschaft genauer
        definieren wollen &mdash; zum Beispiel
        <literal>image/png</literal> oder
        <literal>application/x-shockwave-flash</literal> &mdash;
        können Sie die Eigenschaft selbstverständlich entfernen oder
        verändern.</para>

      <para>Subversion bietet auch die auto-props Fähigkeit, mit der
        Sie Dateinamen-Muster auf Eigenschaftennamen und -werte
        abbilden können.  Diese Abbildung wird in der
        Laufzeit-Konfiguration eingestellt.  Diese betreffen wiederrum
        das Hinzfügen und Importieren und können nicht nur die
        standardmässig ausgewählten MIME-Typen von Subversion während
        dieser Aktionen überschreiben, sondern damit können auch
        zusätzliche Eigenschaften gesetzt werden.  Zum Beispiel
        könnten Sie eine Abbildung erstellten, die besagt, dass
        Subversion jedesmal, wenn eine JPEG-Datei &mdash; eine Datei
        die dem Dateimuster <literal>*.jpg</literal> entspricht
        &mdash; hinzugefügt wird, die <literal>svn:mime-type</literal>
        Eigenschaft für diese Datei auf <literal>image/jpeg</literal>
        setzen soll.  Oder bei jeder Datei, die auf
        <literal>*.cpp</literal> passt, soll
        <literal>svn:eol-style</literal> auf <literal>native</literal>
        und <literal>svn:keywords</literal> auf <literal>Id</literal>
        gesetzt werden.  Die Unterstützung von auto-props ist
        wahrscheinlich das geschickteste der Werkzeuge von Subversion
        im Zusammenhang mit Eigenschaften.  Siehe <xref
        linkend="svn-ch-7-sect-1.3.2"/> für weitere Informationen, wie
        diese Unterstützung konfiguriert wird.</para>

    </sect2>     
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 3:  EXTERNALS DEFINITIONS                           *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-3">
    <title>Externe Definitionen</title>
    
    <para>Manchmal ist es nützlich, eine Arbeitskopie zu erstellen,
      die aus einer Anzahl von verschiedenen <!-- *TODO* -->Checkouts
      zusammengesetz ist.  Zum Beispiel können Sie wollen, dass
      verschiedene Unterverzeichnisse aus verschiedenen Orten des
      Projektarchives kommen, oder möglicherweise sogar überhaupt aus
      verschiedenen Projektarchiven.  Sie können natürlich ein solches
      Szenario händisch erreichen, indem Sie <command>svn
      checkout</command> verwenden um die spezielle Art von
      Verschachtelung zu bekommen, die Sie wünschen.  Aber wenn diese
      Anordnung wichtig für alle ist, die Ihr Projektarchiv nützen,
      dann müssen alle anderen die gleichen <!-- *TODO* checkout -->
      Checkout-Operationen durchführen wie Sie.</para>

    <para>Glücklicherweise bietet Subversion Unterstützung für
      <firstterm>externe Definitionen</firstterm>.  Eine externe
      Definition ist eine Abbildung eines lokalen Verzeichnisses auf
      eine URL &mdash; und möglicherweise auf eine bestimmte Revision
      &mdash; einer versionierten Ressource.  In Subversion können Sie
      externe Definitionen gruppenweise deklarieren, indem Sie
      <literal>svn:externals</literal> verwenden.  Sie können diese
      Eigenschaft mit <command>svn propset</command> oder <command>svn
      propedit</command> erstellen bzw verändern (siehe <xref
      linkend="svn-ch-7-sect-2.1"/>).  Die Eigenschaft kann auf jedem
      versionierten Verzeichnis gesetzt werden und der Wert ist eine
      mehrzeilige Tabelle von Unterverzeichnissen (relativ zu dem
      versionierten Verzeichnis auf das die Eigenschaft angewendet
      wird) auf der einen Seite und eine voll qualifizierte, absolute
      URL für die Stelle im Projektarchiv auf der anderen
      Seite.</para>

    <screen>
$ svn propget svn:externals calc
third-party/sounds             http://sounds.red-bean.com/repos
third-party/skins              http://skins.red-bean.com/repositories/skinproj
third-party/skins/toolkit -r21 http://svn.red-bean.com/repos/skin-maker
</screen>

    <para>Das Angenehme der <literal>svn:externals</literal>
      Eigenschaft ist, dass sie &mdash; einmal auf einem versionierten
      Verzeichnis gesetzt &mdash; bei jedem Checkout mit übertragen
      wird und alle anderen automatisch davon profitieren.  Anders
      gesagt, sobald sich jemand die Mühe gemacht hat die
      verschachtelten Checkouts zu definieren, müssen sich die anderen
      nicht mehr darum kümmern &mdash; Subversion wird, nach dem 
      auschecken der Original-Arbeitskopie, auch die externen
      Arbeitskopien auschecken.</para>

    <para>Erinnern Sie sich an das vorige Beispiel einer externen
      Definition. Wenn jemand eine Arbeitskopie von
      <filename>calc</filename> auscheckt, dann checkt Subversion auch
      die Einheiten aus, die es in der externen Definition gefunden
      hat.</para>

    <screen>
$ svn checkout http://svn.example.com/repos/calc
A  calc
A  calc/Makefile
A  calc/integer.c
A  calc/button.c
Checked out revision 148.

Fetching external item into calc/third-party/sounds
A  calc/third-party/sounds/ding.ogg
A  calc/third-party/sounds/dong.ogg
A  calc/third-party/sounds/clang.ogg
&hellip;
A  calc/third-party/sounds/bang.ogg
A  calc/third-party/sounds/twang.ogg
Checked out revision 14.

Fetching external item into calc/third-party/skins
&hellip;
</screen>

    <para>Wenn Sie die externe Definition ändern müssen, dann können
      Sie dies mit den regulären Subkommandos zum Bearbeiten von
      Eigenschaften erledigen.  Wenn Sie eine Änderung der
      <literal>svn:externals</literal> Eigenschaft übertragen, dann
      wird Subversion beim nächsten <command>svn update</command> die
      ausgecheckten Einheiten mit der geänderten externen Definition
      synchronisieren.  Das gleiche wird passieren, wenn andere Ihre
      Arbeitskopie aktualisieren und Ihre Änderungen an der externen
      Definition erhalten.</para>

    <para>Das <command>svn status</command> Kommando erkennt ebenfalls
      externe Definitionen und zeigt <literal>X</literal> als
      Statuscode für <quote>deplazierte</quote> Unterverzeichnisse in
      welche externe Einheiten ausgecheckt wurden und zeigt dann
      normal den Status der externen Einheiten innerhalb des
      Unterverzeichnisses an.</para>

    <para>Die Unterstützung, die derzeit für externe Definitionen in
      Subversion existiert, kann allerdings auch ein bischen
      missverständlich sein.  Die Arbeitskopien, die mittels der
      externen Definitionen erstellt werden sind nämlich nicht mit der
      primären Arbeitskopie (also die Arbeitskopie, an dessen
      versioniertem Verzeichniss die <literal>svn:externals</literal>
      Eigenschaft gesetzt wurde) verbunden.  Subversion wird nur mit
      <quote>nicht-deplazierten</quote> Arbeitskopien wirklich voll
      arbeiten.  Zum Beispiel, wenn Sie Änderungen, die Sie an einer
      oder mehreren Dateien einer externen Arbeitskopie gemacht haben,
      übertragen wollen, dann müssen Sie <command>svn commit</command>
      für diese Arbeitskopien explizit aufrufen &mdash; bei der
      Übertragung der primären Arbeitskopie werden externe
      Arbeitskopien nicht berücksichtigt.</para>

    <para>Da die externe Definition absolute URLS verwendet, hat des
      beim Verschieben oder Kopieren des Verzeichnisses, an das die
      externe Definition gebunden ist, keine Auswirkung auf das was
      exerne Arbeitskopie ausgecheckt wird (das relative lokale
      Unterverzeichnis, das Ziel der Operation ist, verschiebt sich
      also gemeinsam mit dem umbenannten Verzeichnis in dem es
      liegt). Dies kann unter bestimmten Situationen verwirrend
      &mdash; wenn nicht frustrierend &mdash; sein.  Zum Beispiel,
      wenn Sie externe Definitionen in einem Verzeichnis Ihrer
      Haupt-Entwicklungslinie (<filename>/trunk</filename>) verwenden,
      die auf andere Bereiche der gleichen Linie verweisen und dann
      <command>svn copy</command> verwenden um eine Zweiglinie an der
      neuen Position <filename>/branches/my-branch</filename> zu
      erstellen.  Die externen Definitionen in Ihrer neuen Zweiglinie
      werden weiterhin auf die versionierten Ressourcen in
      <filename>/trunk</filename> verweisen.  Beachten Sie auch, dass,
      wenn Sie die Projektarchiv-URL ihrer Arbeitskopie mit
      <command>svn switch --relocate</command> anpassen müssen,
      externe Definitionen <emphasis>nicht</emphasis> mitgeändert
      werden.</para>

  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 4:  VENDOR BRANCHES                                 *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-4">
    <title>Lieferanten Zweiglinie</title>

    <para>Speziell wenn Sie Software entwickeln, sind die Daten, die
      von der Versionskontrolle verwalten werden, häufig eng an die
      Daten von jemand anderen gebunden oder hängen möglicherweise
      unmittelbar davon ab.  Allgemein kann es für Ihr Projekt
      erforderlich sein diese externen Daten so aktuell wie möglich zu
      halten ohne die Stabilität des eigenen Projektes zu gefährden.
      Dieses Szenario kommt immer dann ins Spiel, wenn die
      Information, die von einer Personengruppe erstellt wird eine
      direkte Auswirkung auf das hat was eine andere Gruppe
      erzeugt.</para>

    <para>Zum Beispiel könnte eine Software erstellt werden, die eine
      Bibliothek von dritter Seite (third-party library) verwendet.
      Subversion hat eine derartige Beziehung mit der Portierbaren
      Laufzeit-Bibliothek von Apache &mdash; Apache Portable Runtime
      library (siehe <xref linkend="svn-ch-8-sect-2.1" />).  Der
      Quellcode von Subversion ist &mdash; in Hinblick auf die
      Möglichkeiten zur Portierung &mash; voll abhängig von der
      APR-Bibliothek.  In früheren Stadien der Enwicklung von
      Subversion hat das Projekt jede Änderung der API nachvollzogen
      und klebte an der <quote>blutjungen<!-- *TODO* taufrischen
      --></quote> sich ständig ändernden Entwicklungsversion.  Nun da
      beide, APR und Subversion, gereifter sind, versucht Subversion
      nur gut getestete und stabile Versionen der APR-Bibliothek
      synchron zu halten.</para>

    <para>Wenn nun Ihr Projekt von einer externen Quelle abhängt, dann
      gibt es mehrere Möglichkeiten diese Information mit Ihrer
      eigenen zu synchronisieren.  Am umständlichsten ist es mündliche
      oder schriftliche Anweisungen an diejenigen zu geben, die
      Beiträge zu Ihrem Projekt liefern um sicherzustellen, dass alle
      die gleiche Version der Information von Dritter Seite haben.
      Wenn die Information von Dritter Seite in einem Projektarchiv von
      Subversion verwaltet wird, dann können Sie auch die externen
      Definitionen von Subversion verwenden um eine bestimmte Version
      in Ihrer eigenen Arbeitskopie <quote>festzunageln</quote> (siehe
      <xref linkend="svn-ch-7-sect-3" />).</para>

    <para>Aber manchmal sollen eigene Änderungen an den Informationen
      von Dritter Seite im eigenen Versions-Kontroll-System verwaltet
      werden.  Um zum Beispiel der Software-Entwicklung
      zurückzukommen, kann es notwendig sein Änderungen an der
      Bibliotek von Dritter Seite zu machen um diese an die eigenen
      Bedürfnisse anzupassen.  Diese Änderungen können neue Funktionen
      enthalten oder Fehlerbereinigungen und müssen intern verwaltet
      werden, bis sie Bestandteil eines neuen offiziellen
      Veröffentlichung der Information von Dritter Seite werden.  Oder
      die Änderungen werden niemals an die externe Quelle
      zurückgegeben und dienen nur der Anpassung an spezielle eigene
      Bedürfnisse.</para>
 
    <para>Nun stehen Sie einer interessanten Situation gegenüber.  Ihr
      Projekt kann die eigenen Änderungen an den externen Daten
      getrennt verwalten indem Patch-Dateien oder vollkommen
      selbständigte alternative Versionen zur Verfügung gestellt
      werden.  Dies wird aber schnell zu Problemen bei der Wartung
      führen und benötigt Mechanismen um Ihre eigenen Änderungen auf
      die externen Daten anzuwenden und notwendigerweise eine
      Wiederherstellung dieser Änderungen nach jeder neuen Übernahme
      der externen Quellen.</para>

    <para>Die Lösung für dieses Problem ist die Verwendung einer
      <firstterm>Lieferanten-Zweiglinie</firstterm>.  Eine
      Lieferanten-Zweiglinie ist ein Verzeichnis, das die Informationen
      enthält, die von Dritter Seite zur Verfügung gestellt werden.
      Jede Version der externen Quelle, die Sie in Ihr Projekt
      übernehmen wollen heisst
      <firstterm>Lieferanten-Tropfen</firstterm>.</para>

    <para>Lieferanten-Zweiglinien bieten zwei wichtige Vorteile.
      Erstens speichern sie den aktuellen Lieferanten-Tropfen in ihrem
      Versions-Kontroll-System.  Die Mitglieder Ihres Projektes müssen
      sich nicht darum kümmern, ob sie die richtige Version der
      Information von Dritter Seite haben sondern empfangen die
      korrekte Version als Teil der regulären Aktualisierung ihrer
      Arbeitskopie.  Zweitens benötigen Sie keine (schlimmstenfalls
      händischen) Abläufe mehr um die eigenen Änderungen an den
      richtigen Stellen vorzunehmen, da die externen Daten eine Platz
      in Ihrem eigenen Projektarchiv haben.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-4.1">
      <title>Allgemeine Verwaltung einer Lieferanten-Zweiglinie</title>

      <para>Im Allgemeinen verläuft die Verwaltung einer
        Lieferanten-Zweiglinie folgendermassen.  Sie erzeugen ein
        Top-Level Verzeichnis (zum Beispiel
        <filename>/vendor</filename>) um die Lieferanten-Zweiglinie
        aufzunehmen.  Dann importieren Sie den Quellcode von Dritter
        Seite in ein Unterverzeichnis dieses Top-Level Verzeichnisses
        und kopieren dann dieses Unterverzeichnis an eine passende
        Stelle in Ihren Haupt-Entwicklungszweig (zum Beispiel
        <filename>/trunk</filename>).  Sie führen Ihre lokalen
        Änderungen immer im Haupt-Entwicklungszweig durch.  Mit jeder
        neuen Veröffentlichung des externen Quellcodes übernehmen Sie
        diese in die Lieferanten-Zweiglinie und führen die Änderungen
        daran mit <filename>/trunk</filename> zusammen. Dabei lösen
        Sie die Konflikte auf, die sich zwischen den lokalen Änderunge
        und den übernommenen externen Änderungen ergeben
        können.</para>

      <para>Vielleicht hilft ein Beispiel den Ablauf zu erklären.  Wir
        benutzen ein Szenario, bei dem ein Entwicklungsteam ein
        Rechenprogramm entwickelt, das gegen eine Bibliothek von
        Dritter Seite gebunden ist, die Arithmetik mit Komplexen
        Zahlen zur Verfügung stellt und
        <filename>libcomplex</filename> heisst.  Wir beginnen mit der
        Erstellung der Lieferanten-Zweiglinie und dem Import des
        ersten Lieferanten-Tropfen.  Wir nennen das Verzeichnis für
        die Lieferanten-Zweiglinie <filename>libcomplex</filename> und
        unsere Code-Tropfen gehen ein Unterverzeichnis dieser
        Lieferanten-Zweiglinie das wir <filename>current</filename>
        nennen.  Da <command>svn import</command> alle benötigten
        Elternverzeichnisse automatisch erzeugt, können wir beide
        Schritte mit einem einzigen Kommando erledigen.</para>

      <screen>
$ svn import /path/to/libcomplex-1.0 \
             http://svn.example.com/repos/vendor/libcomplex/current \
             -m 'importing initial 1.0 vendor drop'
&hellip;
</screen>
    
      <para>Wir haben nun die aktuelle Version des libcomplex
        Quellcodes in <filename>/vendor/libcomplex/current</filename>.
        Jetzt markieren wir diese Version (siehe <xref
        linkend="svn-ch-4-sect-6" />) und kopieren sie in den
        Haupt-Entwicklungszweig.  Dieser Kopiervorgang wird ein neues
        Verzeichnis <filename>libcomplex</filename> in unserem
        existierenden <filename>calc</filename> Projektverzeichnis
        erstellen.  In dieser Kopie der Lieferanten-Daten werden wir
        unsere Änderungen vornehmen.</para>
    
      <screen>
$ svn copy http://svn.example.com/repos/vendor/libcomplex/current  \
           http://svn.example.com/repos/vendor/libcomplex/1.0      \
           -m 'tagging libcomplex-1.0'
&hellip;
$ svn copy http://svn.example.com/repos/vendor/libcomplex/1.0  \
           http://svn.example.com/repos/calc/libcomplex        \
           -m 'bringing libcomplex-1.0 into the main branch'
&hellip;
</screen>

      <para>Wir checken unseren Projekt Hauptzweig &mdash; welcher nun
        die Kopie des Lieferanten-Tropfen enthält &mdash; aus und
        beginnen den Quellcode von libcomplex zu bearbeiten.  Bevor
        wir es richtig bemerken, sind unsere Änderungen an libcomplex
        komplett im Rechenprogramm integriert.
        <footnote>
          <para>Und natürlich absolut fehlerfrei!</para>
        </footnote>
      </para>

      <para>Einige Wochen später veröffentlicht die
        Entwicklungsgemeinschaft von libcomplex eine neue Version
        ihrer Bibliothek &mdash; Version 1.1 &mdash; die einige
        Eigenschaften und Funktionen enthält, die wir gerne hätten.
        Wir wollen auf diese neue Version aktualisieren, aber ohne die
        eigenen Änderungen zu verlieren, die wir an der alten Version
        vorgenommen haben.  Eigentlich wollen wir unsere Basisversion
        von libcomplex 1.0 durch eine Kopie von libcomplex 1.1
        ersetzen und dann die eigenen Änderungen die wir an der
        Bibliothek gemancht haben auf die neue Version überführen.
        Aber wir nähern uns dem Problem jetzt aber aus der anderen
        Richtung, indem wir die Änderungen, die zwischen den Versionen
        1.0 und 1.1 an libcomplex vorgenommen wurden auf unsere
        abgeänderte Kopie übertragen.</para>
      
      <para>Um die Aktualisierung vorzunehmen checken wir eine neue
        Kopie der Lieferanten-Zweigline aus und ersetzen den Code im
        <filename>current</filename> Verzeichnis mit dem neuen
        Quellcode von libcomplex 1.1.  Wir überschreiben bestehende
        Dateien indem wir zum Beispiel den Entwicklungs-Tarball von
        libcomplex 1.1 entpacken.  Das Ziel ist es, dass das
        <filename>current</filename> ausschliesslich den Quellcode von
        libcomplex 1.1 enthält und sicherzustellen, dass der ganze
        Quellcode unter Versionskontrolle steht.  Natürlich mit so
        wenig Turbulenzen wie möglich in der
        Versionsgeschichte.</para>

      <para>Nachdem wir den Quellcode der Version 1.0 von libcomplex
        mit der Version 1.1 ersetzt haben, wird <command>svn
        status</command> Dateien anzeigen die lokale Änderungen
        aufweisen und möglicherweise solche, die nicht versioniert
        sind oder fehlen.  Wenn wir das gemacht haben, was wir
        vorhatten, dann sind die nicht versionierten Datein nur
        diejenigen, die in der Version 1.1 von libcomplex neu
        hinzugekommen sind &mdash; wir stellen diese mit <command>svn
        add</command> unter Versionskontrolle.  Die fehlenden Dateien
        sind diejenigen, die es zwar in Version 1.0 gab, aber nicht
        mehr in Version 1.1 und für diese rufen wir das <command>svn
        remove</command> auf.  Wenn schlussendlich unser
        <filename>current</filename> Arbeitsverzeichnis dem Quellcode
        von libcomplex 1.1 entspricht übertragen wir die Änderungen
        die notwendig waren um diesen Zustand herzustellen ins
        Projektarchiv.</para>

      <para>Unser <filename>current</filename> Zweig enthält nun den
        neuen Lieferanten-Tropfen.  Wir markieren die neue Version (in
        der gleichen Art, wie wir vorher die Version 1.0 des
        Lieferanten-Tropfen markiert haben) und führen die
        Unterschiede zwischen den beiden markierten Versionen mit
        unserer Haupt-Entwicklungslinie zusammen.</para>

      <screen>
$ cd working-copies/calc
$ svn merge http://svn.example.com/repos/vendor/libcomplex/1.0      \
            http://svn.example.com/repos/vendor/libcomplex/current  \
            libcomplex
&hellip; # resolve all the conflicts between their changes and our changes
$ svn commit -m 'merging libcomplex-1.1 into the main branch'
&hellip;
</screen>

      <para>Im einfachsten Fall entspricht die neue externe Quellcode
        aus der Sicht der Datei- und Verzeichnisstruktur einfach der
        alten Version.  Keine der Dateien mit dem Quellcode von
        libcomplex wurden gelöscht, umbenannt oder an einen anderen
        Ort verschoben &mdash; die neue Version enthält im Vergleich
        zur alten Version nur Änderungen im Text.  In einer perfekten
        Welt sollten sich die Änderungen sauber und ohne
        Komplikationen oder Konflikte übertragen lassen.</para>

     <para>Aber es ist nicht immer so einfach. In Wahrheit ist es
       allgemein üblich, dass Quelldateien in einer neuen
       Veröffentlichung an einen anderen Ort verschoben wurden.  Das
       erschwert die Sicherstellung, dass unsere Änderungen für die
       neue Version des Quellcodes auch wirklich gültig sind und kann
       schnell dazu führen, dass wir unsere Änderungen in der neuen
       Version händisch wieder herstellen müssen.  Da Subversion die
       Geschichte einer gegebenen Datei kennt &mdash; inclusive aller
       vorigen Ablageorte &mdash; wird das einpflegen der neuen
       Version wesentlich vereinfacht.  Aber wir sind verantwortlich
       dafür, dass wir Subversion mitteilen, wie sich das Datei-Layout
       von Lieferanten-Tropfen zu Lieferanten-Tropfen geändert
       hat.</para>

    </sect2>

    <!-- TODO: Try to clarify some of the steps for svn_load_dirs.pl
         (Garrett sez they've been "glossed over".  Also, consider
         another section on bypassing svn_load_dirs.pl altogether and
         running with just svn merge, now that it ignores ancestry. -->

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-4.2">
      <title><command>svn_load_dirs.pl</command></title>

      <para>Lieferanten-Tropfen, bei denen mehr als nur einige wenige
        Dateien gelöscht, hinzugefügt oder verschoben wurden,
        erschweren den Ablauf der Aktualisierung bei jeder neuen
        Version aus der externen Quelle.  Daher bietet Subversion das
        <command>svn_load_dirs.pl</command> Skript zur Unterstützung
        dieses Prozesses.  Dieses Skript automatisiert die wichtigsten
        Schritte, die wir in der allgmeinen Verwaltung von
        Lieferanten-Zweiglinien erwähnt haben um die Fehlerquellen
        möglichst gering zu halten.  Sie sind nach wie vor
        verantwortlich für die Durchführung der Kommandos zum
        Zusammenführen der neuen Version der externen Quelle mit ihrem
        Haupt-Entwicklungszweig, aber
        <command>svn_load_dirs.pl</command> kann Ihnen helfen, dass
        Sie dieses Ziel schneller und leichter erreichen.</para>

      <para>Kurz gesagt, ist <command>svn_load_dirs.pl</command> eine
        Erweiterung zu <command>svn import</command> mit folgenden
        wichtigen Fähigkeiten:</para>

      <itemizedlist>
        <listitem>
          <para>Es kann jederzeit aufgerufen werden, um ein
            bestehendes Verzeichnis im Projektarchiv so anzupassen,
            dass die Struktur einem externen Verzeichnis entspricht.
            Dazu werden alle notwendigen Aktionen zum Hinzufügen,
            Löschen und auch zum Verschieben durchgeführt.</para>
        </listitem>
        <listitem>
          <para>Es beachtet komplizierte Folgen von Operationen,
            zwischen denen Subversion eine zwischenzeitliche
            Übertragung benötigt &mdash; zum Beispiel bevor ein
            Verzeichnis oder eine Datei ein zweites mal umbenannt
            werden kann.</para>
        </listitem>
        <listitem>
          <para>Es kann optional das neu importierte Verzeichnis mit
            einer Namensmarke versehen.</para>
        </listitem>
        <listitem>
          <para>Es kann optional verschiedene Eigenschaften zu Dateien
            und Verzeichnissen hinzufügen, die einem angegebenen
            regulären Ausdruck entsprechen.</para>
        </listitem>
      </itemizedlist>

      <para><command>svn_load_dirs.pl</command> hat drei
        verpflichtende Argumente.  Das erste Argument die URL zum
        Basisverzeichnis im Projektarchiv.  Diesem Argument folgt die
        URL &mdash; relativ zum ersten Argument &mdash; in welche der
        Lieferanten-Tropfen importiert wird.  Das dritte Argument
        schliesslich ist das lokale Verzeichnis, das importiert werden
        soll.  Angewendet auf unser voriges Beispiel könnte ein
        typischer Aufruf von <command>svn_load_dirs.pl</command>
        folgendermassen aussehen:</para>

      <screen>
$ svn_load_dirs.pl http://svn.example.com/repos/vendor/libcomplex \
                   current                                        \
                   /path/to/libcomplex-1.1
&hellip;
</screen>

      <para>Sie können <command>svn_load_dirs.pl</command> beauftragen
        den neuen Lieferanten-Tropfen mit einer Marke zu versehen,
        indem auf der Kommandozeile die <option>-t</option> Option mit
        dem gewünschten Namen angegeben wird.  Diese Marke ist eine
        weitere URL relativ zum ersten Argument.</para>

      <screen>
$ svn_load_dirs.pl -t libcomplex-1.1                              \
                   http://svn.example.com/repos/vendor/libcomplex \
                   current                                        \
                   /path/to/libcomplex-1.1
&hellip;
</screen>

      <para>Wenn Sie <command>svn_load_dirs.pl</command> aufrufen,
        vergleicht es den Inhalt ihres existierenden
        Lieferanten-Tropfen in <quote>current</quote> mit dem
        gewünschten neuen Lieferanten-Tropfen.  Im einfachsten Fall
        gibt es keine Dateien, die nur in einer Version existieren,
        aber nicht in der anderen.  Wenn es jedoch Abweichungen im
        Datei-Layout zwischen den Versionen gibt, wird
        <command>svn_load_dirs.pl</command> rückfragen, wie Sie die
        Differenzen auflösen wollen.  Sie haben beispielsweise die
        Möglichkeit dem Skript mitzuteilen, dass Sie wissen, dass die
        Datei <filename>math.c</filename> in Version 1.0 von
        libcomplex umbenannt wurde auf
        <filename>arithmetic.c</filename> in libcomplex 1.1. Alle
        Abweichungen, die nicht durch Verschiebungen erklärt werden,
        werden als reguläre Hinzufügung oder Löschung
        behandelt.</para>

      <para>Das Skript akzeptiert auch eine separate
        Konfigurations-Datei, um Eigenschaften für Dateien oder
        Verzeichnisse zu setzen, die einem angegebenen regulären
        Ausdruck entsprechen, die dem Projektarchiv
        <emphasis>hinzugefügt</emphasis> werden.  Diese
        Konfigurations-Datei wird mit der <option>-p</option> Option
        an <command>svn_load_dirs.pl</command> übergeben.  Jede Zeile
        der Konfigurations-Datei ist ein Set von zwei oder vier
        Werten, die durch Leerraum getrennt sind: ein regulärer
        Ausdruck im Perl-Stil, um den Pfad anzugeben für den die Werte
        gelten, ein Kontroll-Schlüsselwort (entweder
        <literal>break</literal> oder <literal>cont</literal>) und
        dann optional ein Eigenschafts-Name und der dazugehörige
        Wert.</para>

      <screen>
\.png$              break   svn:mime-type   image/png
\.jpe?g$            break   svn:mime-type   image/jpeg
\.m3u$              cont    svn:mime-type   audio/x-mpegurl
\.m3u$              break   svn:eol-style   LF
.*                  break   svn:eol-style   native
</screen>

      <para>Für jeden hinzugefügten Pfad werden der Reihe nach die
        regulären Ausdrücke durchgegangen und die
        Eigenschaftsänderungen durchgeführt, wenn der reguläre
        Ausdruck mit dem Pfadnamen zusammenpasst bis die
        Kontroll-Angabe <literal>break</literal> (was nichts anderes
        bedeutet, als dass keine weiteren Eigenschaftsänderungen für
        diesen Pfad vorgenommen werden sollen) gefunden wird.  Wenn
        die Kontroll-Angabe <literal>cont</literal> &mdash; eine
        Abkürzung für <literal>continue</literal> &mdash; angegeben
        wurde, dann wird die Suche mit der nächsten Zeile der
        Konfigurations-Datei fortgesetzt.</para>

      <para>Jeder Leerraum innerhalb der regulären Ausdrücke,
        Eigenschafen oder Werte muss entweder mit einfachen oder
        doppelten Anführungszeichen eingeschlossen werden.  Sie können
        Anführungszeichen, die nicht zum einschliessen von Leerraum
        verwendet werden mit einem Backslash (<literal>\</literal>)
        maskieren.  Der Backslash maskiert Anführungszeichen nur beim
        analysieren der Konfigurations-Datei, also maskieren sie keine
        anderen Zeichen, wenn es nicht für den regulären Ausdruck
        notwendig ist.</para>

    </sect2>
  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
