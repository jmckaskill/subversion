<chapter id="svn-ch-2">
  <title>Grunnleggende konsepter</title>

  <simplesect>
    <para>Dette kapittelet er en kort, lettvint introduksjon til 
      Subversion.
      Hvis du er ny innen versjonskontroll, er dette kapittelet 
      definitivt for deg.
      Vi begynner med en diskusjon om generelle konsepter innen 
      versjonskontroll, jobber oss gjennom de spesifikke id&#233;ene bak 
      Subversion, og viser noen enkle eksempler p&#229; bruk av 
      Subversion.</para>
    
    <para>Selv om eksemplene i dette kapittelet viser personer som deler 
      samlinger av kildekode til programmer, husk at Subversion kan 
      behandle alle typer filsamlinger &#8212; det er ikke begrenset til &#229; 
      hjelpe dataprogrammerere.</para>
  </simplesect>
  
  
  <sect1 id="svn-ch-2-sect-1" > 
    <title>Depotet</title>
    
    <para>Subversion er et sentralisert system for &#229; dele informasjon.
      Dens kjerne er et depot, som er et sentralt lager av data.
      Depotet lagrer informasjon i form av et 
      <firstterm>filsystemtre</firstterm> &#8212; et typisk hierarki av filer 
      og kataloger.
      Ethvert antall <firstterm>klienter</firstterm> kobler seg til 
      depotet, og leser eller skriver deretter til disse filene.
      Ved &#229; skrive data, gj&#248;r klientenen informasjonen tilgjengelig for 
      andre; ved &#229; lese data henter klienten informasjon fra andre. 
      <xref linkend="svn-ch-2-dia-1"/> illustrerer dette.</para>

    <figure id="svn-ch-2-dia-1">
      <title>Et typisk klient/tjener-system</title>
      <graphic fileref="images/ch02dia1.png"/>
    </figure>
    
    <para>S&#229; hvorfor er dette interessant?
      S&#229; langt h&#248;res dette ut som definisjonen av en typisk filtjener.
      Og det stemmer, depotet <emphasis>er</emphasis> en slags 
      filtjener, men den er ikke det du vanligvis kommer ut for.
      Det som gj&#248;r Subversiondepotet spesielt er at <emphasis>det husker 
      hver eneste forandring</emphasis> noensinne skrevet til det: Hver 
      forandring til hver eneste fil, og til og med forandringer i selve 
      katalogtreet, som opprettelser, slettinger og ommb&#248;bleringer p&#229; 
      filer og kataloger.</para>

    <para>N&#229;r en klient leser data fra depotet, ser den vanligvis bare 
      den siste versjonen av filsystemtreet.
      Men klienten har ogs&#229; muligheten til &#229; se 
      <emphasis>tidligere</emphasis> tilstander av filsystemet.
      For eksempel, en klient kan sp&#248;rre historiske sp&#248;rsm&#229;l som:
      <quote>Hva inneholdt denne katalogen forrige onsdag?</quote> eller 
      <quote>Hvem var den siste personen som forandret denne filen, og 
      hvilke forandringer gjorde de?</quote>
      Dette er typen sp&#248;rsm&#229;l som er hjertet av ethvert 
      <firstterm>versjonskontrollsystem</firstterm>:
      Systemer som er designet for &#229; lagre og f&#248;lge forandringer i data 
      over tid.</para></sect1>

  <sect1 id="svn-ch-2-sect-2">
    <title>Versjoneringsmodeller</title>

    <para>Hovedm&#229;let for et versjonskontrollsystem er &#229; muliggj&#248;re 
      samarbeidsredigering og deling av data.
      Men forskjellige systemer bruker forskjellige strategier for &#229; 
      oppn&#229; dette.</para>
    
    <sect2 id="svn-ch-2-sect-2.1">
      <title>Problemet med fildeling</title>
      
      <para>Alle versjonskontrollsystemer m&#229; l&#248;se det samme fundamentale 
        problemet:
        Hvordan vil systemet tillate brukere &#229; dele informasjon, men 
        forhindre dem fra &#229; tr&#229;kke hverandre p&#229; t&#230;rne?
        Det er alt for lett for brukere &#229; overskrive hverandres 
        forandringer i depotet ved en ulykke.</para>

      <para>Tenk over scenariet vist i <xref linkend="svn-ch-2-dia-2"/>.
        Sett at vi har to arbeidskolleger, Harry og Sally.
        De bestemmer seg begge for &#229; redigere den samme filen i depotet 
        samtidig.
        Hvis Harry lagrer hans forandringer til depotet f&#248;rst, er det 
        (noen &#248;yeblikk senere) mulig at Sally feilaktig overskriver dem 
        med hennes egen nye versjon av filen.
        Selv om Harrys versjon av filen ikke vil v&#230;re tapt for alltid 
        (fordi systemet husker hver eneste forandring), vil alle 
        forandringene Harry gjorde <emphasis>ikke</emphasis> v&#230;re med i 
        Sallys nyere versjon av filen, fordi hun s&#229; aldri Harrys 
        forandringer til &#229; begynne med.
        Harrys arbeid er fortsatt borte &#8212; eller i det minste borte fra 
        den siste versjonen av filen &#8212; og sannsynligvis ved en ulykke.
        Dette er definitivt en situasjon vi vil unng&#229;!</para>

      <figure id="svn-ch-2-dia-2">
        <title>Problemet som m&#229; unng&#229;s</title>
        <graphic fileref="images/ch02dia2.png"/>
      </figure>

      </sect2>
    
    <sect2 id="svn-ch-2-sect-2.2">
      <title><quote>L&#229;s-rediger-l&#229;s opp</quote>-l&#248;sningen</title>
      
      <para>Mange versjonskontrollsystemer bruker en modell av typen
        <firstterm>l&#229;s-rediger-l&#229;s opp</firstterm> n&#229;r de tar for seg 
        dette problemet.
        I et s&#229;nt system tillater depotet bare en person &#229; forandre en 
        fil om gangen.
        F&#248;rst m&#229; Harry <quote>l&#229;se</quote> filen f&#248;r han kan begynne med 
        &#229; gj&#248;re forandringer i den.
        L&#229;sing av en fil er mye likt det &#229; l&#229;ne en bok p&#229; biblioteket;
        hvis Harry har l&#229;st en fil kan ikke Sally gj&#248;re forandringer i 
        den.
        Hvis hun pr&#248;ver &#229; l&#229;se filen, vil ikke depotet tillate dette.
        Alt hun kan gj&#248;re er &#229; lese filen, og vente p&#229; at Harry gj&#248;r seg 
        ferdig med sine forandringer og slippe l&#229;sen han har satt opp.
        Etter at Harry l&#229;ser opp filen, er hans tur over, og n&#229; kan 
        Sally ta sin runde med l&#229;sing og redigering.
        <xref linkend="svn-ch-2-dia-3"/> demonstrerer denne enkle 
        l&#248;sningen.</para>
      
      <figure id="svn-ch-2-dia-3">
        <title><quote>L&#229;s-rediger-l&#229;s opp</quote>-l&#248;sningen</title>
        <graphic fileref="images/ch02dia3.png"/>
      </figure>
      
      <para>Problemet med <quote>l&#229;s-rediger-l&#229;s opp</quote>-metoden er 
        at den er ganske restriktiv, og blir ofte en hindring for 
        brukerne:</para>

      <itemizedlist>
        <listitem><para>
            <emphasis>L&#229;sing kan medf&#248;re administrative 
            problemer.</emphasis>
            
            Noen ganger hender det at Harry l&#229;ser en fil og glemmer den.
            I mellomtiden, fordi Sally fortsatt venter p&#229; &#229; f&#229; redigere 
            filen, har hun hendene bundet.
            Og s&#229; drar Harry p&#229; ferie.
            N&#229; m&#229; Sally f&#229; en administrator til &#229; fjerne Harrys l&#229;s.
            Situasjonen ender opp med &#229; for&#229;rsake mange forsinkelser og 
            bortkastet tid.</para></listitem>
        
        <listitem><para>
            <emphasis>L&#229;sing kan for&#229;rsake un&#248;dvendig 
            serialisering.</emphasis>

            Hva hvis Harry redigerer begynnelsen av en tekstfil, og 
            Sally vil rett og slett bare redigere slutten av den samme 
            filen?
            Disse forandringene overlapper ikke i det hele tatt.
            De kan enkelt redigere filen samtidig, og ingen stor skade 
            vil skje, s&#229;fremt forandringene ble flettet fint sammen.
            Det er ingen vits i at de m&#229; vente p&#229; tur i denne 
            situasjonen.</para></listitem>
    
        <listitem><para>
            <emphasis>L&#229;sing kan skape en falsk f&#248;lelse av 
            trygghet.</emphasis>

            Tenk deg at Harry l&#229;ser og redigerer fil A, mens Sally 
            samtidig redigerer fil B.
            Tenk deg ogs&#229; at A og B er avhengig av hverandre, og 
            forandringene er hver for seg inkompatible med hverandre.
            Plutselig virker ikke A og B sammen mer.
            L&#229;sesystemet var ikke i stand til &#229; forhindre problemet &#8212; 
            men skapte likevel en falsk f&#248;lelse av trygghet.
            Det er lett for Harry og Sally &#229; tenke seg at ved &#229; l&#229;se 
            filer, starter hver av dem en trygg, isolert oppgave, og 
            dermed forhindrer dem fra &#229; diskutere deres inkompatible 
            forandringer p&#229; et tidligere tidspunkt.</para></listitem>
      </itemizedlist>

      </sect2>

    <sect2 id="svn-ch-2-sect-2.3">
      <title><quote>Kopier-rediger-flett</quote>-l&#248;sningen</title>
      
      <para>Subversion, CVS og andre versjonskontrollsystemer bruker en 
        modell av typen <firstterm>kopier-rediger-flett</firstterm> som 
        et alternativ til l&#229;sing.
        I denne modellen kontakter klienten til hver bruker og lager en 
        personlig <firstterm>arbeidskopi</firstterm> &#8212; et lokalt speil 
        av depotets filer og kataloger.
        Brukere arbeider s&#229; parallellt ved &#229; modifisere deres private 
        kopier.
        Til slutt blir de private kopiene flettet inn i en ny, endelig 
        versjon.
        Versjonskontrollsystemet hjelper ofte til med flettingen, men 
        til slutt er det et menneske som er ansvarlig for &#229; la det skje 
        skikkelig.</para>
      
      <para>Her er et eksempel.
        Si at Harry og Sally hver for seg lager arbeidskopier av det 
        samme prosjektet, kopiert fra depotet.
        De arbeider samtidig, og gj&#248;r forandringer til den samme filen A 
        innenfor sine kopier.
        Sally lagrer hennes forandringer til depotet f&#248;rst.
        N&#229;r Harry pr&#248;ver &#229; lagre sine forandringer senere, informerer 
        depotet ham om at hans fil A er <firstterm>utdatert</firstterm>.
        Med andre ord, filen A i depotet har p&#229; en eller annen m&#229;te 
        forandret seg siden han kopierte den sist.
        S&#229; Harry ber klienten hans om &#229; <firstterm>flette</firstterm> 
        alle nye forandringer fra depotet inn i hans arbeidskopi av fil 
        A.
        Sjansene for at Sallys forandringer ikke overlapper med hans 
        egne er store; s&#229; n&#229;r begges forandringer er lagt inn i filen, 
        lagrer han hans egen arbeidskopi til depotet. <xref 
        linkend="svn-ch-2-dia-4"/> og <xref linkend="svn-ch-2-dia-5"/> 
        viser denne prosessen.</para>

      <figure id="svn-ch-2-dia-4">
        <title><quote>Kopier-rediger-flett</quote>-l&#248;sningen</title>
        <graphic fileref="images/ch02dia4.png"/>
      </figure>
      
      <figure id="svn-ch-2-dia-5">
        <title><quote>Kopier-rediger-flett</quote>-l&#248;sningen 
          (forts.)</title>
        <graphic fileref="images/ch02dia5.png"/>
      </figure>

      <para>Men hva hvis Sallys forandringer 
        <emphasis>likevel</emphasis> overlapper med Harrys forandringer?
        Hva da?
        Denne situasjonen kalles en <firstterm>konflikt</firstterm>, og 
        er vanligvis ikke mye til problem.
        N&#229;r Harry ber klienten hans om &#229; flette sammen de nyeste 
        forandringene i depotet inn i hans arbeidskopi, blir det vist at 
        hans kopi av fil A er i konflikt:
        Han vil v&#230;re i stand til &#229; se begge settene av konfliktskapende 
        forandringer, og velge mellom dem manuelt.
        Legg merke til at programvare ikke kan l&#248;se konflikter 
        automatisk; bare mennesker er i stand til &#229; forst&#229; og gj&#248;re de 
        n&#248;dvendige intelligente valgene,
        N&#229;r Harry har l&#248;st de overlappende forandringene manuelt &#8212; 
        kanskje etter en diskusjon med Sally &#8212; kan han trygt lagre den 
        flettede filen tilbake til depotet.</para>

      <para><quote>kopier-rediger-flett</quote>-modellen kan h&#248;res litt 
        kaotisk ut, men i praksis g&#229;r det ekstremt glatt.
        Brukere kan jobbe parallellt, og aldri vente p&#229; hverandre.
        N&#229;r de arbeider p&#229; de samme filene, viser det sef at mesteparten 
        av de samtidige forandringene ikke overlapper i det hele tatt; 
        konflikter er sjeldne.
        Og tiden det tar &#229; l&#248;se konflikter er langt mindre enn tiden 
        tapt med et l&#229;sesystem.</para>

      <para>Til sist koker det ned til en kritisk faktor:
        Brukerkommunikasjon.
        N&#229;r brukerne kommuniserer d&#229;rlig, &#248;ker antallet av b&#229;de <!-- &#164; 
        -->syntaktiske og <!-- &#164; -->semantiske konflikter.
        Ingen systemer kan tvinge brukerne til &#229; kommunisere perfekt, og 
        ingen systemer kan oppdage <!-- &#164; -->semantiske konflikter.
        S&#229; det er ikke mye poeng i &#229; bli lurt av et falskt l&#248;fte om at 
        et l&#229;sesystem p&#229; en eller annen m&#229;te vil forhindre konflikter;
        i praksis ser l&#229;sing ut til &#229; vanskeliggj&#248;re mer enn noenting 
        annet.</para>
      
    </sect2>
    
  </sect1>
  
  <!-- How svn implements the philosophy -->
  <sect1 id="svn-ch-2-sect-3">
    <title>Subversion i aksjon</title>
    
    <para>Det er p&#229; tide &#229; g&#229; fra det abstrakte til det konkrete.
      I denne seksjonen vil vi vise reelle eksempler p&#229; bruk av 
      Subversion.</para>

    <sect2 id="svn-ch-2-sect-3.1">
      <title>Arbeidskopier</title>
      
      <para>Du har allerede lest om arbeidskopier; n&#229; skal vi 
        demonstrere hvordan Subversion-klienten lager og bruker 
        dem.</para>
      
      <para>En arbeidskopi i Subversion er et vanlig katalogtre p&#229; ditt 
        lokale system, og inneholder en samling av filer.
        Du kan redigere disse filene s&#229;nn som du vil, og hvis det er 
        kildekode, kan du kompilere programmet fra dem p&#229; den vanlige 
        m&#229;ten.
        Arbeidskopien din er ditt eget private arbeidsomr&#229;de:
        Subversion vil aldri legge inn andre folks forandringer, heller 
        ikke gj&#248;re dine egne forandringer tilgjengelig for andre f&#248;r du 
        eksplisitt ber den om &#229; gj&#248;re det.</para>

      <para>Etter at du har gjort noen forandringer i filene i 
        arbeidskopien og sjekket at de virker skikkelig, gir Subversion 
        deg kommandoer til &#229; <quote>publisere</quote> dine forandringer 
        til de andre personene som arbeider med deg p&#229; prosjektet ditt 
        (ved &#229; skrive til depotet).
        Hvis andre personer publiserer deres egne forandringer, gir 
        Subversion deg kommandoer for &#229; flette desse forandringene inn i 
        din arbeidskopi (ved &#229; lese fra depotet).</para>

      <para>En arbeidskopi inneholder ogs&#229; noen ekstra filer, opprettet 
        og vedlikeholdt av Subversion, for &#229; hjelpe seg med &#229; utf&#248;re 
        disse kommandoene.
        Hver katalog i arbeidskopien inneholder en underkatalog kalt 
        <filename>.svn</filename>, ogs&#229; kjent som arbeidskopiens 
        <firstterm>administrative katalog</firstterm>.
        Filene i hver administrative katalog hjelper Subversion til &#229; se 
        hvilke som som inneholder upubliserte forandringer, og hvilke 
        filer som er utdatert i forhold til andres arbeid.</para>
      
      <para>Et typisk Subversiondepot inneholder ofte filene (eller 
        kildekoden) for flere prosjekter;
        vanligvis har hvert prosjekt sin egen underkatalog i depotets 
        filsystemtre.
        Med dette arrangementet vil en brukers arbeidskopi samsvare med 
        et spesielt subtre av depotet.</para>
      
      <para>For eksempel, tenk deg at du har et depot som best&#229;r av to 
        programprosjekter, <literal>paint</literal> og 
        <literal>calc</literal>.
        Hvert prosjekt bor i hver sin toppkatalog, som vist i <xref 
        linkend="svn-ch-2-dia-6"/>.</para>

      <figure id="svn-ch-2-dia-6">
        <title>Depotets filsystem</title>
        <graphic fileref="images/ch02dia6.png"/>
      </figure>
      
      <para>For &#229; f&#229; en arbeidskopi, m&#229; du f&#248;rst <firstterm>hente 
        ut</firstterm> et del av et katalogtre fra depotet.
        (Uttrykket <quote>hente ut</quote> kan h&#248;res ut som det har noe 
        &#229; gj&#248;re med l&#229;sing eller reservering av ressurser, men det har 
        ikke det;
        det lager bare en privat kopi av prosjektet for deg.)
        For eksempel, hvis du henter ut <filename>/calc</filename>, vil 
        du f&#229; en arbeidskopi som dette:</para>

<screen>
$ svn checkout http://svn.example.com/repos/calc
A  calc
A  calc/Makefile
A  calc/integer.c
A  calc/button.c

$ ls -A calc
Makefile  integer.c  button.c  .svn/
</screen>

      <para>Listen av bokstaven A indikerer at Subversion legger til et 
        antall elementer til arbeidskopien din.
        Du har n&#229; en personlig kopi av depotets 
        <filename>/calc</filename>-katalog, med en ekstra komponent &#8212; 
        <filename>.svn</filename> &#8212; som inneholder den ekstra 
        informasjonen som Subversion trenger, som tidligere 
        nevnt.</para>

      <sidebar id="svn-ch-2-sidebar-1">
        <title>Depot-URLer</title>

        <para>Subversiondepot kan bli aksessert gjennom ved hjelp av 
          mange forskjellige metoder &#8212; p&#229; en lokal disk, eller gjennom 
          diverse nettverksprotokoller.
          Beliggenheten til et depot er imidlertid alltid en URL.
          Tabell 2-1 viser hvordan forskjellige URL-skjemaer st&#229;r i 
          forhold til de forskjellige aksessmetodene.</para>

        <table id="svn-ch-2-table-1">
          <title>URLer for tilgang til et depot</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Skjema</entry>
                <entry>Tilgangsmetode</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>file:///</literal></entry>
                <entry>direkte depottilgang (p&#229; lokal disk)</entry>
              </row>
              <row>
                <entry><literal>http://</literal></entry>
                <entry>tilgang via WebDAV-protokollen til en 
                  Apache-server som kjenner til Subversion</entry>
              </row>
              <row>
                <entry><literal>https://</literal></entry>
                <entry>samme som <literal>http://</literal>, men med 
                  SSL-kryptering.</entry>
              </row>
              <row>
                <entry><literal>svn://</literal></entry>
                <entry>tilgang gjennom en tilpasset protokoll til en 
                <literal>svnserve</literal>-tjener</entry>
              </row>
              <row>
                <entry><literal>svn+ssh://</literal></entry>
                <entry>samme som <literal>svn://</literal>, men gjennom 
                  en SSH-tunnel.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
 
        <para>For det meste bruker Subversions URLer den vanlige 
          syntaksen, og tillater tjenernavn og portnummere &#229; bli 
          spesifisert som en del av adressen.
          Husk at tilgangsmetoden <literal>file:</literal> bare er 
          gyldig for plasseringer p&#229; den samme tjeneren som klienten &#8212; 
          faktisk, i overenskommelse med konvensjonen m&#229; delen som 
          best&#229;r av tjenernavnet enten v&#230;re <literal>localhost</literal> 
          eller ikke v&#230;re der i det hele tatt:</para>
 
        <screen>
$ svn checkout file:///sti/til/depot
&#8230;
$ svn checkout file://localhost/sti/til/depot
&#8230;
</screen>

        <para>I tillegg trenger brukere av 
          <literal>file:</literal>-skjemaet p&#229; Windows-plattformer &#229; 
          bruke en uoffisiell <quote>standard</quote> syntaks for &#229; f&#229; 
          tilgang til depot som er p&#229; den samme maskinen, men p&#229; en 
          annen disk enn klientens arbeidsdisk for &#248;yeblikket.
          En av de to f&#248;lgende syntaksene for URL-stier vil virke n&#229;r 
          <literal>X</literal> er disken som depotet ligger p&#229;:</para>

        <screen>
C:\&gt; svn checkout file:///X:/path/to/repos
&#8230;
C:\&gt; svn checkout "file:///X|/path/to/repos"
&#8230;
</screen>
 
        <para>I den andre syntaksen m&#229; du kapsle inn URLen s&#229; den 
          verticale stolpen (<quote>|</quote>) ikke blir tolket som et 
          r&#248;r.</para>

        <para>Legg merke til at en URL bruker ordin&#230;re skr&#229;streker selv 
          om den i den lokale (ikke-URL) formen av en sti p&#229; Windows 
          brukes omvendte skr&#229;streker.</para>

      </sidebar>

      <para>Tenk at du gj&#248;r forandringer til 
        <filename>button.c</filename>.
        Siden <filename>.svn</filename>-katalogen husker filens 
        modifiseringsdato og originale innhold, kan Subversion se at du 
        har forandret filen.
        Men Subversion gj&#248;r ikke dine forandringer offentlige f&#248;r du 
        eksplisitt forteller den &#229; gj&#248;re det.
        Prosessen &#229; publisere dine forandringer er vanligvis omtalt som 
        &#229; <firstterm>legge inn</firstterm> (eller <firstterm>sjekke 
        inn</firstterm>) forandringer til depotet.</para>

      <para>For &#229; publisere dine forandringer til andre, kan du bruke 
        Subversions <command>commit</command>-kommando:</para>

<screen>
$ svn commit button.c
Sending        button.c
Transmitting file data .
Committed revision 57.
</screen>

      <para>N&#229; er dine forandringer til <filename>button.c</filename> 
        lagt inn i depotet;
        hvis en annen bruker henter ut en arbeidskopi av 
        <filename>/calc</filename>, vil de se dine forandringer i den 
        seneste versjonen av filen.</para>

      <para>Tenk deg at du har en samarbeidspartner, Sally, som hentet 
        ut en arbeidskopi av <filename>/calc</filename> samtidig med 
        deg.
        N&#229;r du legger inn din forandring til 
        <filename>button.c</filename>, er Sallys arbeidskopi uforandret;
        Subversion modifiserer bare arbeidskopier etter brukerens 
        &#248;nske.</para>

      <para>For &#229; f&#229; hennes prosjekt oppdatert, kan Sally be Subversion 
        om &#229; <firstterm>oppdatere</firstterm> hennes arbeidskopi, ved &#229; 
        bruke Subversionkommandoen <command>update</command>.
        Dette vil legge inn dine forandringer inn i hennes arbeidskopi, 
        s&#229; vel som andres som har v&#230;rt lagt inn i depotet siden hun 
        hentet det ut.</para>

<screen>
$ pwd
/home/sally/calc

$ ls -A 
.svn/ Makefile integer.c button.c

$ svn update
U button.c
</screen>

      <para>Utdataene fra kommandoen <command>svn update</command> 
        indikerer at Subversion oppdaterte innholdet av 
        <filename>button.c</filename>.
        Legg merke til at Sally trengte ikke &#229; spesifisere hvilke filer 
        som skulle oppdateres, Subversion bruker informasjonen i 
        <filename>.svn</filename>-katalogen sammen med annen informasjon 
        i depotet for &#229; bestemme hvilke filer som trenger en 
        oppdatering.</para>
      
    </sect2>
    
    
    <sect2 id="svn-ch-2-sect-3.2">
      <title>Revisjoner</title>

      <para>En <command>svn commit</command>-operasjon kan publisere 
        forandringer til ethvert antall filer og kataloger som en 
        enkeltst&#229;ende atomisk transaksjon.
        I arbeidskopien din kan du forandre filenes innhold, opprette, 
        slette, skifte navn og kopiere filer og kataloger, og s&#229; legge 
        inn det komplette settet med forandringer som en enhet.</para>

      <para>I depotet blir hver innlegging behandlet som en atomisk 
        transaksjon:
        Enten blir alle forandringene lagt inn, eller s&#229; blir ingen lagt 
        inn.
        Subversion pr&#248;ver &#229; beholde denne atomiteten stilt opp mot 
        programkr&#230;sj, systemkr&#230;sj, nettverksproblemer og andre brukeres 
        aktiviteter.</para>

      <para>Hver gang depotet aksepterer en innlegging, lager dette en 
        ny tilstand i filsystemtreet, kalt en 
        <firstterm>revisjon</firstterm>.
        Hver revisjon blir tildelt et unikt naturlig tall, ett st&#248;rre en 
        nummeret p&#229; den forrige revisjonen.
        Den f&#248;rste revisjonen i et nyopprettet depot er nummerert null, 
        og inneholder ingenting annet enn en tom rotkatalog.</para>
      
      <para><xref linkend="svn-ch-2-dia-7"/> illustrerer en fin m&#229;te &#229; 
        visualisere depotet p&#229;.
        Tenk deg en rekke av revisjonsnumre som starter p&#229; 0 og strekker 
        seg fra venstre til h&#248;yre.
        Hvert revisjonsnummer har et filsystemtre hengende under seg, og 
        hvert tre er et <quote>&#248;yeblikksbilde</quote> av hvordan depotet 
        s&#229; ut etter hver innlegging.</para>
      
      <figure id="svn-ch-2-dia-7">
        <title>Depotet</title>
        <graphic fileref="images/ch02dia7.png"/>
      </figure>

      <sidebar>
        <title>Globale revisjonsnumre</title>
         
        <para>Ulikt mange av de andre versjonskontrollsystemene, gjelder 
          Subversions revisjonsnumre for <emphasis>hele tr&#230;r</emphasis>, 
          ikke individuelle filer.
          Hvert revisjonsnummer velger et helt tre, en spesiell tilstand 
          til depotet etter noen la inn en forandring.
          En annen m&#229;te &#229; tenke seg det er at revisjon N representerer 
          tilstanden til depotfilsystemet etter den Nte innleggingen.
          N&#229;r en Subversionbruker snakker om <quote>revisjon 5 av 
          <filename>foo.c</filename></quote>, mener de egentlig 
          <quote><filename>foo.c</filename> som den fremst&#229;r i revisjon 
          5.</quote>
          Legg merke til at vanligvis vil revisjonene N og M av en fil 
          <emphasis>ikke</emphasis> v&#230;re forskjellig!
          Fordi CVS bruker egne revisjonsnumre for hver fil, vil kanskje 
          CVS-brukere ta en kikk p&#229; <xref linkend="svn-ap-a"/> for flere 
          detaljer.</para>
      </sidebar>

      <para>Det er viktig &#229; notere seg at arbeidskopier ikke bestandig 
        samsvarer med en enkelt revisjon i depotet;
        de kan inneholde filer fra flere forskjellige revisjoner.
        For eksempel, tenk at du henter ut en arbeidskopi fra et depot 
        det den siste revisjonen er 4:</para>

<screen>
calc/Makefile:4
     integer.c:4
     button.c:4
</screen>

      <para>For &#248;yeblikket samsvarer arbeidskopien n&#248;yaktig med revisjon 
        4 i depotet.
        Men tenk deg s&#229; at du gj&#248;r en forandring til 
        <filename>button.c</filename>, og legger inn denne forandringen.
        Forutsatt at ingen andre innlegginger har skjedd, vil din 
        innlegging opprette reisjon 5 i depotet, og arbeidskopien din 
        vil se ut som dette:</para>

<screen>
calc/Makefile:4
     integer.c:4
     button.c:5
</screen>

      <para>S&#229; sier vi at p&#229; dette tidspunktet legger Sally inn en 
        forandring til <filename>integer.c</filename>, som lager 
        revisjon 6.
        Hvis du bruker <command>svn update</command> for &#229; oppdatere 
        arbeidskopien, vil den se ut som dette:</para>

<screen>
calc/Makefile:6
     integer.c:6
     button.c:6
</screen>

      <para>Sallys forandringer til <filename>integer.c</filename> vil 
        komme til syne i arbeidskopien din, og din forandring vil 
        fortsatt v&#230;re til stede i <filename>button.c</filename>.
        I dette eksempelet er teksten i <filename>Makefile</filename> 
        identisk i revisjon 4, 5 og 6, men Subversion vil merke kopien 
        av <filename>Makefile</filename> med revisjon 6 for &#229; indikere 
        at den gjelder fortsatt.
        S&#229;, etter at du gj&#248;r en ren oppdatering fra toppen av 
        arbeidskopien din, vil den vanligvis samsvare til en eksakt 
        revisjon i depotet.</para>

    </sect2>
    
    
    <sect2 id="svn-ch-2-sect-3.3">
      <title>Hvordan arbeidskopier holder f&#248;lge med depotet</title>
      
      <para>For hver fil i en arbeidskatalog, lagrer Subversion to 
        essensielle deler informasjon i det administrative 
        <filename>.svn</filename>-omr&#229;det:</para>
      
      
      <itemizedlist>
        <listitem><para>Hvilken revisjon arbeidsfilen din er basert p&#229; 
            (dette kalles filens 
            <firstterm>arbeidsrevisjon</firstterm>), 
            og</para></listitem>
        
        <listitem><para>et tidsmerke fra n&#229;r den lokale kopien sist ble 
            oppdatert av depotet.</para></listitem>
      </itemizedlist>

      <para>Ved hjelp av denne informasjonen kan Subversion n&#229;r den 
        kommuniserer med depotet se hvilke fire tilstander en arbeidsfil 
        er i:</para>

      <variablelist>
        <varlistentry>
          <term>Uforandret, og oppdatert</term>

          <listitem><para>Filen er uforandret i arbeidskopien, og ingen 
          forandringer til denne filen er blitt lagt inn i depotet siden 
          siden arbeidskopien ble lagt inn.
          En <command>svn commit</command> p&#229; filen vil ikke gj&#248;re noe, 
          og en <command>svn update</command> p&#229; filen vil heller ikke 
          gj&#248;re noe.</para></listitem>
        </varlistentry>
        
        <varlistentry>
          <term>Forandret lokalt og samtidig gjeldende</term>
          
          <listitem><para>Filen er blit forandret i arbeidskopien, og 
          ingen foorandringer til denne filen er blitt lagt inn i 
          depotet siden stamrevisjonen.
          Det er lokale forandringer som ikke er blitt lagt inn i 
          depotet, s&#229; en <command>svn commit</command> av filen vil 
          lykkes i &#229; publisere forandringene dine, og en <command>svn 
          update</command> p&#229; filen vil ikke gj&#248;re noen 
          ting.</para></listitem>
        </varlistentry>
        
        <varlistentry>
          <term>Uforandret og utdatert</term>
          
          <listitem><para>Filen er ikke blitt forandret i arbeidskopien, 
          men har forandret seg i depotet.
          Filen m&#229; etterhvert bli oppdatert, for &#229; gj&#248;re den gjeldende 
          med den offentlige revisjonen.
          En <command>svn commit</command> p&#229; filen vil ikke gj&#248;re noe, 
          og en <command>svn update</command> p&#229; filen vil legge de 
          seneste forandringene inn i arbeidskopien 
          din.</para></listitem>
        </varlistentry>
        
        <varlistentry>
          <term>Forandret lokalt og samtidig utdatert</term>
          
          <listitem><para>Filen er blitt forandret b&#229;de i arbeidskopien 
          og depotet.
          En <command>svn commit</command> av filen vil feile med en 
          <quote>out-of-date</quote>-feilmelding.
          Filen m&#229; oppdateres f&#248;rst; en <command>svn 
          update</command>-kommando vil pr&#248;ve &#229; flette inn de offentlige 
          forandringene med de lokale forandringene.
          Hvis Subversion ikke kan fullf&#248;re flettingen automatisk p&#229; en 
          skikkelig m&#229;te, blir det opp til brukeren &#229; l&#248;se 
          konflikten.</para></listitem>
        </varlistentry>
      </variablelist>
      
      
      <para>Dette kan h&#248;res ut som mye &#229; holde greie p&#229;, men 
        <command>svn status</command>-kommandoen vil vise det tilstanden 
        til ethvert element i arbeidskopien din.
        For mer informasjon om denne kommandoen, se <xref 
        linkend="svn-ch-3-sect-4.3.1" />.</para>
     
    </sect2>
    
    <sect2 id="svn-ch-2-sect-3.4">
      <title>Begrensningene i blandede revisjoner</title>

      <para>Som et generelt prinsipp pr&#248;ver Subversion &#229; v&#230;re s&#229; 
        fleksibel som mulig.
        En spesiell type av fleksibilitet er muligheten til &#229; ha en 
        arbeidskopi som inneholder blandede revisjonsnumre.</para>

      <para>Til &#229; begynne med er det ikke sikkert det er helt klart 
        hvorfor denne typen fleksibilitet er &#229; betrakte som en fordel, 
        og ikke en svakhet.
        Etter &#229; ha fullf&#248;rt en innlegging i depotet, er de nylig 
        innlagte filene og katalogene i en nyere arbeidsrevisjon enn 
        resten av kopien.
        Det ser ut som litt av et rot.
        Som tidligere demonstrert, kan arbeidskopien alltid bli satt til 
        en enkelt arbeidsrevisjon ved &#229; kj&#248;re <command>svn 
        update</command>.
        Hvorfor vil noen <emphasis>med vilje</emphasis> &#248;nske seg en 
        blanding av arbeidsrevisjoner?</para>

      <para>Forutsatt at prosjektet ditt er komplekst nok, vil du 
        oppdage at det noen ganger er fint &#229; kunne 
        <quote>tilbakedatere</quote> deler av arbeidskopien til en 
        tidligere revisjon; du vil l&#230;re hvordan du gj&#248;r det i kapittel 
        3.
        Kanskje vil du pr&#248;ve en tidligere versjon av en delmodul, lagret 
        i en underkatalog, eller kanskje du vil utforske et antall 
        tidligere versjoner av en fil sett i forhold til det seneste 
        treet.</para>
        
      <para>Hvordan du enn gj&#248;r bruk av blandede revisjoner i 
        arbeidskopien, er det begrensninger i denne 
        fleksibiliteten.</para>

      <para>For det f&#248;rste kan du ikke legge inn sletting av en fil 
        eller katalog som ikke er fullstendig oppdatert.
        Hvis en nyere versjon av elementet eksisterer i depotet, vil 
        fors&#248;ket ditt p&#229; &#229; slette bli nektet, for &#229; forhindre deg &#229; 
        &#248;delegge ved en ulykke forandringer som du enda ikke har 
        sett.</para>

      <para>For det andre kan du ikke legge inn en metadata-forandring 
        til en katalog hvis den ikke er fullstendig oppdatert.
        Du vil f&#229; l&#230;re om &#229; legge til <quote>egenskaper</quote> til 
        elementer i kapittel 6.
        En katalogs arbeidsrevisjon definerer et spesifikt sett med 
        poster og egenskaper, og en innlegging av forandringer i en 
        egenskap for en utdatert katalog kan &#248;delegge egenskaper som du 
        enda ikke har sett.</para>

    </sect2>

  </sect1>

  <sect1 id="svn-ch-2-sect-4">
    <title>Oppsummering</title>
    
    <para>Vi har dekket flere fundamentale konsepter for Subversion i 
      dette kapitlet:</para>

    <itemizedlist>
      <listitem>
        <para>Vi har introdusert begrepene om et sentralt depot, 
          arbeidskopien til klienten, og rekken av revisjonstr&#230;r i 
          depotet.</para>
      </listitem>

      <listitem>
        <para>Vi har sett noen enkle eksempler p&#229; hvordan to 
          arbeidskollegaer kan bruke Subversion til &#229; publisere og motta 
          forandringer til og fra hverandre, ved &#229; bruke 
          <quote>kopier-rediger-flett</quote>-modellen.</para>
      </listitem>

      <listitem>
        <para>Vi har snakket litt om m&#229;ten Subversion f&#248;lger og 
          behandler informasjon i en arbeidskopi.</para>
      </listitem>


    </itemizedlist>
    
    <para>S&#229; langt skal du ha en god oversikt om hvordan Subversion 
      arbeider generelt sett.
      Bev&#230;pnet med kunnskap er du n&#229; klar til &#229; hoppe inn i neste 
      kapittel, som er en detaljert gjennomgang av Subversions 
      kommandoer og funksjoner.</para>
      
  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
vim: set textwidth=72 nowrap formatoptions+=w2 expandtab shiftwidth=2 tabstop=2 softtabstop=2 fileencoding=utf8 :
-->
