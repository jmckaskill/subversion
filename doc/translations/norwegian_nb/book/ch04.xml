<chapter id="svn-ch-4">
<!-- @ENGLISH {{{
<title>Branching and Merging</title>
@ENGLISH }}} -->
<title>Forgrening og fletting</title>

  <simplesect>

    <!-- @ENGLISH {{{
    <para>Branching, tagging, and merging are concepts common to
      almost all version control systems.  If you're not familiar with
      these ideas, we provide a good introduction in this chapter.  If
      you are familiar, then hopefully you'll find it interesting to
      see how Subversion implements these ideas.</para>
    @ENGLISH }}} -->
    <para>Forgrening (<quote>branching</quote>), merking 
      (<quote>tagging</quote>) og fletting (<quote>merging</quote>) er 
      konsepter felles for nesten alle versjonskontrollsystemer.
      Hvis du ikke er vant med disse id&#233;ene, gir vi en god introduksjon 
      i dette kapittelet.
      Hvis du kjenner til dem, finner du det forh&#229;pentligvis interessant 
      &#229; se hvordan Subversion har implementert disse id&#233;ene.</para>

    <!-- @ENGLISH {{{
    <para>Branching is a fundamental part of version control.  If
      you're going to allow Subversion to manage your data, then this
      is a feature you'll eventually come to depend on.  This chapter
      assumes that you're already familiar with Subversion's basic
      concepts (<xref linkend="svn-ch-2"/>).</para>
    @ENGLISH }}} -->
    <para>Forgreninger er en fundamental del av versjonskontroll.
      Hvis du skal tillate Subversion &#229; behandle dine data, er dette en 
      funksjon som du etterhvert kommer til &#229; basere deg mye p&#229;.
      Dette kapittelet g&#229;r ut i fra at du allerede er kjent med 
      Subversions grunnleggende konsepter (<xref 
      linkend="svn-ch-2"/>).</para>

  </simplesect>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 1 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-4-sect-1">
    <!-- @ENGLISH {{{
    <title>What's a Branch?</title> 
    @ENGLISH }}} -->
    <title>Hva er en forgrening?</title> 

    <!-- @ENGLISH {{{
    <para>Suppose it's your job to maintain a document for a division
      in your company, a handbook of some sort.  One day a different
      division asks you for the same handbook, but with a few parts
      'tweaked' for them, since they do things slightly
      differently.</para>
    @ENGLISH }}} -->
    <para>Tenk deg at det er din jobb &#229; vedlikeholde et dokument for en 
      avdeling i firmaet ditt, en h&#229;ndbok av et eller annet slag.
      En dag sp&#248;r en annen avdeling deg etter den samme h&#229;ndboken, men 
      med noen deler <quote>spesialtilpasset</quote> for dem, siden de 
      gj&#248;r ting litt forskjellig.</para>

    <!-- @ENGLISH {{{
    <para>What do you do in this situation?  You do the obvious thing:
      you make a second copy of your document, and begin maintaining
      the two copies separately.  As each department asks you to make
      small changes, you incorporate them into one copy or the
      other.</para>
    @ENGLISH }}} -->
    <para>Hva gj&#248;r du i denne situasjonen?
      Du gj&#248;r den opplagte tingen:
      Du lager en annen kopi av dokumentet og begynner &#229; vedlikeholde de 
      to kopiene separat.
      Etterhvert som hver avdeling ber deg om &#229; gj&#248;re sm&#229; forandringer, 
      legger du dem inn i den ene kopien eller den andre.</para>

    <!-- @ENGLISH {{{
    <para>You often want to make the same change to both copies.  For
      example, if you discover a typo in the first copy, it's very
      likely that the same typo exists in the second copy.  The two
      documents are almost the same, after all; they only differ in
      small, specific ways.</para>
    @ENGLISH }}} -->
    <para>Du vil ofte &#248;nske &#229; gj&#248;re den samme forandringen i begge 
      kopiene.
      Hvis du for eksempel finner en skrivefeil i den f&#248;rste kopien, er 
      det veldig sannsynlig at den samme trykkfeilen eksisterer i den 
      andre kopien.
      De to dokumentene er nesten like n&#229;r alt kommer til alt; 
      forskjellene er sm&#229; og spesifikke.</para>

    <!-- @ENGLISH {{{
    <para>This is the basic concept of a
      <firstterm>branch</firstterm>&mdash;namely, a line of
      development that exists independently of another line, yet still
      shares a common history if you look far enough back in time.  A
      branch always begins life as a copy of something, and moves on
      from there, generating its own history (see <xref
      linkend="svn-ch-4-dia-1"/>).</para>
    @ENGLISH }}} -->
    <para>Dette er det grunnleggende konseptet for en 
      <firstterm>forgrening</firstterm> &#8212; det vil si en utviklingslinje 
      som eksisterer uavhengig av en annen linje, men som likevel deler 
      en felles historie hvis du ser langt nok tilbake i tid.
      En forgrening begynner bestandig livet som en kopi av noe, og g&#229;r 
      videre derfra ved &#229; lage sin egen historie (se <xref 
      linkend="svn-ch-4-dia-1"/>).</para>

      <figure id="svn-ch-4-dia-1">
        <!-- @ENGLISH {{{
        <title>Branches of development</title>
        @ENGLISH }}} -->
        <title>Forgreninger av utviklingen</title>
        <graphic fileref="images/ch04dia1.png"/>
      </figure>

    <!-- @ENGLISH {{{
    <para>Subversion has commands to help you maintain parallel
      branches of your files and directories.  It allows you to create
      branches by copying your data, and remembers that the copies are
      related to one another.  It also helps you duplicate changes
      from one branch to another.  Finally, it can make portions of
      your working copy reflect different branches, so that you can
      <quote>mix and match</quote> different lines of development in
      your daily work.</para>
    @ENGLISH }}} -->
    <para>Subversion har kommandoer for &#229; hjelpe deg &#229; vedlikeholde 
      parallelle forgreninger av filene og katalogene dine.
      Den lar deg opprette forgreninger ved &#229; kopiere data, og husker at 
      kopiene er relatert til hverandre.
      Den hjelper deg ogs&#229; med &#229; duplisere forandringer fra en gren til 
      en annen.
      Til sist, den kan la porsjoner av arbeidskopien reflektere 
      forskjellige forgreninger, s&#229; du kan <quote>blande og 
      tilpasse</quote> forskjellige utviklingslinjer i ditt daglige 
      arbeid.</para>

  </sect1>
  
  <!-- ================================================================= -->
  <!-- ======================== SECTION 2 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-4-sect-2">
    <!-- @ENGLISH {{{
    <title>Using Branches</title> 
    @ENGLISH }}} -->
    <title>Bruke forgreninger</title> 

    <!-- @ENGLISH {{{
    <para>At this point, you should understand how each commit creates
      an entire new filesystem tree (called a <quote>revision</quote>)
      in the repository.  If not, go back and read about revisions in
      <xref linkend="svn-ch-2-sect-3.2"/>.</para>
    @ENGLISH }}} -->
    <para>P&#229; dette punktet skal du ha f&#229;tt forst&#229;elsen av hvordan hver 
      innlegging oppretter et helt nytt filsystemtre (kalt en 
      <quote>revisjon</quote>) i depotet.
      Hvis ikke, g&#229; tilbake og les om revisjoner i <xref 
      linkend="svn-ch-2-sect-3.2"/>.</para>

    <!-- @ENGLISH {{{
    <para>For this chapter, we'll go back to the same example from
      Chapter 2.  Remember that you and your collaborator, Sally, are
      sharing a repository that contains two projects,
      <filename>paint</filename> and <filename>calc</filename>.
      Notice that in <xref linkend="svn-ch-4-dia-2"/>, however, each
      project directory now contains subdirectories named
      <filename>trunk</filename> and <filename>branches</filename>.
      The reason for this will soon become clear.</para>
    @ENGLISH }}} -->
    <para>For dette kapittelet skal vi g&#229; tilbake til det samme 
      eksempelet fra kapittel 2.
      Du husker at du og din kollega Sally deler et depot som inneholder 
      to prosjekter &#8212; <filename>paint</filename> og 
      <filename>calc</filename>.
      Merk imidlertid at i <xref linkend="svn-ch-4-dia-2"/> inneholder 
      hver prosjektkatalog underkataloger kalt 
      <filename>trunk</filename> og <filename>branches</filename>.
      Grunnen til dette vil du snart f&#229; greie p&#229;.</para>
    
      <figure id="svn-ch-4-dia-2">
        <!-- @ENGLISH {{{
        <title>Starting repository layout</title>
        @ENGLISH }}} -->
        <title>Depotets utseende til &#229; begynne med</title>
        <graphic fileref="images/ch04dia2.png"/>
      </figure>

    <!-- @ENGLISH {{{
    <para>As before, assume that Sally and you both have working
      copies of the <quote>calc</quote> project.  Specifically, you
      each have a working copy of <filename>/calc/trunk</filename>.
      All the files for the project are in this subdirectory rather
      than in <filename>/calc</filename> itself, because your team has
      decided that <filename>/calc/trunk</filename> is where the
      <quote>main line</quote> of development is going to take
      place.</para>
    @ENGLISH }}} -->
    <para>Som tidligere, tenk deg at du og Sally begge har arbeidskopier 
      av <quote>calc</quote>-prosjektet.
      Mer spesifikt, dere har begge en arbeidskopi av 
      <filename>/calc/trunk</filename>.
      Alle filene for prosjektet er i denne underkatalogen istedenfor i 
      selve <filename>/calc</filename>, fordi teamet ditt har bestemt at 
      <filename>/calc/trunk</filename> er der <quote>hovedlinjen</quote> 
      av utviklingen skal foreg&#229;.</para>

    <!-- @ENGLISH {{{
    <para>Let's say that you've been given the task of performing a
      radical reorganization of the project.  It will take a long time
      to write, and will affect all the files in the project.  The
      problem here is that you don't want to interfere with Sally, who
      is in the process of fixing small bugs here and there.  She's
      depending on the fact that the latest version of the project (in
      <filename>/calc/trunk</filename>) is always usable.  If you
      start committing your changes bit-by-bit, you'll surely break
      things for Sally.</para>
    @ENGLISH }}} -->
    <para>La oss si at du har f&#229;tt oppgaven &#229; utf&#248;re en radikal 
      reorganisering av prosjektet.
      Det vil ta lang tid &#229; skrive, og vil p&#229;virke alle filene i 
      prosjektet.
      Problemet her er at du vil ikke forstyrre Sally, som er i full 
      gang med &#229; fikse sm&#229;feil her og der.
      Hun er avhengig av at den seneste versjonen av prosjektet (i 
      <filename>/calc/trunk</filename>) alltid fungerer.
      Hvis du starter med &#229; legge inn forandringene dine bit for bit, 
      vil du ganske sikkert &#248;delegge ting for Sally.</para>

    <!-- @ENGLISH {{{
    <para>One strategy is to crawl into a hole: you and Sally can stop
      sharing information for a week or two.  That is, start gutting
      and reorganizing all the files in your working copy, but don't
      commit or update until you're completely finished with the task.
      There are a number of problems with this, though.  First, it's
      not very safe.  Most people like to save their work to the
      repository frequently, should something bad accidentally happen
      to their working copy.  Second, it's not very flexible.  If you
      do your work on different computers (perhaps you have a working
      copy of <filename>/calc/trunk</filename> on two different
      machines), you'll need to manually copy your changes back and
      forth, or just do all the work on a single computer.  By that
      same token, it's difficult to share your changes-in-progress
      with anyone else.  A common software development <quote>best
      practice</quote> is to allow your peers to review your work as you
      go.  If nobody sees your intermediate commits, you lose
      potential feedback.  Finally, when you're finished with all your
      changes, you might find it very difficult to re-merge your final
      work with the rest of the company's main body of code.  Sally
      (or others) may have made many other changes in the repository
      that are difficult to incorporate into your working
      copy&mdash;especially if you run <command>svn update</command>
      after weeks of isolation.</para>
    @ENGLISH }}} -->
    <para>En strategi er &#229; krabbe inn i et hull; du og Sally kan stoppe 
      med &#229; dele informasjon for en uke eller to.
      Det vil si, starte med &#229; <!-- &#164; gutting --> omorganisere alle 
      filene i arbeidskopien din, men ikke legge inn eller oppdatere f&#248;r 
      du er helt ferdig med oppgaven.
      Men det er en del problemer med denne metoden.
      For det f&#248;rste er det ikke s&#230;rlig trygt.
      Folk flest liker &#229; lagre arbeidet sitt til depotet med jevne 
      mellomrom i tilfelle noe stygt skulle skje med arbeidskopien.
      For det andre er det ikke spesielt fleksibelt.
      Hvis du gj&#248;r arbeidet ditt p&#229; forskjellige PC-er (kanskje du har 
      en arbeidskopi av <filename>/calc/trunk</filename> p&#229; to 
      forskjellige maskiner) m&#229; du kopiere forandringene manuelt fram og 
      tilbake, eller gj&#248;re hele jobben p&#229; en enkelt maskin.
      P&#229; samme m&#229;te er det vanskelig &#229; dele forandringene dine som er 
      under utvikling med andre.
      Vanlig god praksis innen programutvikling er &#229; la dine kolleger f&#229; 
      se over arbeidet ditt mens du holder p&#229;.
      Hvis ingen ser innleggingene dine, g&#229;r du glipp av potensiell 
      respons.
      Til slutt, n&#229;r du er ferdig med alle forandringene dine, kan du 
      oppleve at det er veldig vanskelig &#229; flette sammen det endelige 
      resultatet ditt med resten av koden til firmaet.
      Sally (eller andre) kan ha gjort mange forandringer i depotet som 
      er vanskelig &#229; legge inn i arbeidskopien din &#8212; spesielt hvis du 
      kj&#248;rer <command>svn update</command> etter flere uker med 
      isolasjon.</para>

    <!-- @ENGLISH {{{
    <para>The better solution is to create your own branch, or line of
      development, in the repository.  This allows you to save your
      half-broken work frequently without interfering with others, yet
      you can still selectively share information with your
      collaborators.  You'll see exactly how this works later
      on.</para>
    @ENGLISH }}} -->
    <para>En bedre l&#248;sning er &#229; opprette din egen forgrening, eller 
      utviklingslinje, i depotet.
      Dette lar deg lagre det halvfungerende resultatet ditt med jevne 
      mellomrom uten &#229; blande det med arbeidet til andre, og samtidig 
      kan du velge ut informasjon som du vil dele med dine kolleger.
      Du vil etter hvert f&#229; se n&#248;yaktig hvordan dette fungerer.</para>

  <sect2 id="svn-ch-4-sect-2.1">
    <!-- @ENGLISH {{{
    <title>Creating a Branch</title> 
    @ENGLISH }}} -->
    <title>Opprette en forgrening</title>
      
      <!-- @ENGLISH {{{
      <para>Creating a branch is very simple&mdash;you make a copy of
        the project in the repository using the <command>svn
        copy</command> command.  Subversion is not only able to copy
        single files, but whole directories as well.  In this case,
        you want to make a copy of the
        <filename>/calc/trunk</filename> directory.  Where should the
        new copy live?  Wherever you wish&mdash;it's a matter of
        project policy.  Let's say that your team has a policy of
        creating branches in the <filename>/calc/branches</filename>
        area of the repository, and you want to name your branch
        <literal>my-calc-branch</literal>.  You'll want to create a
        new directory,
        <filename>/calc/branches/my-calc-branch</filename>, which
        begins its life as a copy of
        <filename>/calc/trunk</filename>.</para>
      @ENGLISH }}} -->
      <para>Det &#229; opprette en ny gren er veldig enkelt &#8212; du lager en 
        kopi av prosjektet i depotet ved &#229; bruke kommandoen <command>svn 
        copy</command>.
        Subversion er ikke bare i stand til &#229; kopiere enkle filer, men 
        ogs&#229; hele kataloger.
        I dette tilfellet vil du lage en kopi av 
        <filename>/calc/trunk</filename>-katalogen.
        Hvor skal den nye kopien v&#230;re?
        Hvor du vil &#8212; det er et sp&#248;rsm&#229;l om prosjektrutiner.
        La oss si at teamet ditt har som regel &#229; opprette forgreninger i 
        <filename>/calc/branches</filename>-omr&#229;det i depotet, og du vil 
        kalle grenen din <literal>my-calc-branch</literal>.
        Det du vil er &#229; lage en ny katalog, 
        <filename>/calc/branches/my-calc-branch</filename>, som begynner 
        livet som en kopi av <filename>/calc/trunk</filename>.</para>

      <!-- @ENGLISH {{{
      <para>There are two different ways to make a copy.  We'll
        demonstrate the messy way first, just to make the concept
        clear.  To begin, check out a working copy of the project's
        root directory, <filename>/calc</filename>:</para>
      @ENGLISH }}} -->
      <para>Det er to forskjellige m&#229;ter &#229; lage en kopi p&#229;.
        Vi vil demonstrere den rotete m&#229;ten f&#248;rst, bare for &#229; klargj&#248;re 
        konseptet.
        Til &#229; begynne med, hent ut en arbeidskopi av prosjektets 
        rotkatalog, <filename>/calc</filename>:</para>

<screen>
$ svn checkout http://svn.example.com/repos/calc bigwc
A  bigwc/trunk/
A  bigwc/trunk/Makefile
A  bigwc/trunk/integer.c
A  bigwc/trunk/button.c
A  bigwc/branches/
Checked out revision 340.
</screen>

      <!-- @ENGLISH {{{
      <para>Making a copy is now simply a matter of passing two
        working-copy paths to the <command>svn copy</command>
        command:</para>
      @ENGLISH }}} -->
      <para>For &#229; lage en kopi er det n&#229; bare &#229; angi to arbeidskopistier 
        til kommandoen <command>svn copy</command>:</para>

<screen>
$ cd bigwc
$ svn copy trunk branches/my-calc-branch
$ svn status
A  +   branches/my-calc-branch
</screen>

      <!-- @ENGLISH {{{
      <para>In this case, the <command>svn copy</command> command
        recursively copies the <filename>trunk</filename> working
        directory to a new working directory,
        <filename>branches/my-calc-branch</filename>.  As you can see
        from the <command>svn status</command> command, the new
        directory is now scheduled for addition to the repository.
        But also notice the <quote>+</quote> sign next to the letter
        A.  This indicates that the scheduled addition is a
        <emphasis>copy</emphasis> of something, not something new.
        When you commit your changes, Subversion will create
        <filename>/calc/branches/my-calc-branch</filename> in the
        repository by copying <filename>/calc/trunk</filename>, rather
        than resending all of the working copy data over the
        network:</para>
      @ENGLISH }}} -->
      <para>I dette tilfellet kopierer <command>svn copy</command> 
        katalogen <filename>trunk</filename> rekursivt til en ny 
        arbeidskatalog, <filename>branches/my-calc-branch</filename>.
        Som du kan se av kommandoen <command>svn status</command> er den 
        nye katalogen n&#229; klargjort for &#229; legges til i depotet.
        Men legg ogs&#229; merke til <quote>+</quote>-tegnet ved siden av 
        bokstaven A.
        Dette indikerer at den klargjorte tilleggingen er en 
        <emphasis>kopi</emphasis> av noe, og ikke noe nytt.
        N&#229;r du legger inn forandringene dine, vil Subversion lage 
        <filename>/calc/branches/my-calc-branch</filename> i depotet ved 
        &#229; kopiere <filename>/calc/trunk</filename> istedenfor &#229; sende 
        hele arbeidskopien over nettverket en gang til:</para>

<!-- &#164; -->
<screen>
$ svn commit -m "Creating a private branch of /calc/trunk."
Adding         branches/my-calc-branch
Committed revision 341.
</screen>

      <!-- @ENGLISH {{{
      <para>And now the easier method of creating a branch, which we
        should have told you about in the first place: <command>svn
        copy</command> is able to operate directly on two URLs.</para>
      @ENGLISH }}} -->
      <para>Og n&#229; den lettere m&#229;ten &#229; lage en gren, som vi skulle 
        fortalt deg om til &#229; begynne med: <command>svn copy</command> 
        kan operere direkte mot to URLer.</para>

<screen>
$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/branches/my-calc-branch \
      -m "Creating a private branch of /calc/trunk."

Committed revision 341.
</screen>

      <!-- @ENGLISH {{{
      <para>There's really no difference between these two methods.
        Both procedures create a new directory in revision 341, and
        the new directory is a copy of
        <filename>/calc/trunk</filename>.  This is shown in <xref
        linkend="svn-ch-4-dia-3"/>.  Notice that the second method,
        however, performs an <emphasis>immediate</emphasis> commit.
        <footnote> 
          <para>Subversion does not support
            cross-repository copying.  When using URLs with <command>svn
            copy</command> or <command>svn move</command>, you can only
            copy items within the same repository.</para>
        </footnote>
        It's an easier procedure, because it doesn't require you to
        check out a large mirror of the repository.  In fact, this
        technique doesn't even require you to have a working copy at
        all.</para>
      @ENGLISH }}} -->
      <para>Det er faktisk ingen forskjell p&#229; disse to metodene.
        Begge prosedyrene lager en ny katalog i revisjon 341, og den nye 
        katalogen er en kopi av <filename>/calc/trunk</filename>.
        Dette er vist i <xref linkend="svn-ch-4-dia-3"/>.
        Legg merke til at den andre metoden utf&#248;rer en 
        <emphasis>&#248;yeblikkelig</emphasis> 
        innlegging.<footnote><para>Subversion st&#248;tter ikke kopiering 
        mellom forskjellige depot.
        N&#229;r du bruker URLer med <command>svn copy</command> eller 
        <command>svn move</command> kan du bare kopiere elementer 
        innenfor det samme depotet.</para></footnote>
        Det er en lettere prosedyre, fordi det ikke kreves at du m&#229; 
        hente ut et stort speil av depotet.
        Faktisk trenger du med denne teknikken ikke en arbeidskopi i det 
        hele tatt.</para>
      
      <figure id="svn-ch-4-dia-3">
        <!-- @ENGLISH {{{
        <title>Repository with new copy</title>
        @ENGLISH }}} -->
        <title>Depot med ny kopi</title>
        <graphic fileref="images/ch04dia3.png"/>
      </figure>
      
      <sidebar>
        <!-- @ENGLISH {{{
        <title>Cheap Copies</title>
        @ENGLISH }}} -->
        <title>Billige kopier</title>
                
        <!-- @ENGLISH {{{
        <para>Subversion's repository has a special design.  When you
          copy a directory, you don't need to worry about the
          repository growing huge&mdash;Subversion doesn't actually
          duplicate any data.  Instead, it creates a new directory
          entry that points to an <emphasis>existing</emphasis> tree.
          If you're a Unix user, this is the same concept as a
          hard-link.  From there, the copy is said to be
          <quote>lazy</quote>.  That is, if you commit a change to one
          file within the copied directory, then only that file
          changes&mdash;the rest of the files continue to exist as
          links to the original files in the original
          directory.</para>
        @ENGLISH }}} -->
        <para>Et depot i Subversion har en spesiell design.
          N&#229;r du kopierer en katalog, trenger du ikke &#229; bekymre deg for 
          at depotet skal vokse seg stort &#8212; Subversion dupliserer 
          egentlig ingen data.
          Istedenfor lages det en ny katalogpost som peker til et 
          <emphasis>eksisterende</emphasis> tre.
          Hvis du er en Unixbruker, er dette det samme konseptet som en 
          hard lenke.
          <!-- &#164; -->Denne kopien kalles <quote>lat</quote>.
          Det vil si at hvis du legger inn en forandring til en fil i 
          den kopierte katalogen, forandrer bare denne filen seg &#8212; 
          resten av filene fortsetter &#229; eksistere som lenker til de 
          originale filene i den originale katalogen.</para>
      
        <!-- @ENGLISH {{{
        <para>This is why you'll often hear Subversion users talk
          about <quote>cheap copies</quote>.  It doesn't matter how
          large the directory is&mdash;it takes a very tiny, constant
          amount of time to make a copy of it.  In fact, this feature
          is the basis of how commits work in Subversion: each
          revision is a <quote>cheap copy</quote> of the previous
          revision, with a few items lazily changed within.  (To read
          more about this, visit Subversion's website and read about
          the <quote>bubble up</quote> method in Subversion's design
          documents.)</para>
        @ENGLISH }}} -->
        <para>Det er derfor du ofte vil h&#248;re Subversionbrukere snakke om 
          <quote>billige kopier</quote>.
          Det har ingenting &#229; si hvor stor en katalog er &#8212; det tar en 
          veldig liten, konstant mengde tid &#229; lage en kopi av den.
          Faktisk er denne egenskapen basisen for hvordan innlegginger 
          skjer i Subversion; hver revisjon er en <quote>billig 
          kopi</quote> av den forrige revisjonen, med noen f&#229; elementer 
          som forandrer seg p&#229; <quote>en lat m&#229;te</quote> i den.
          (For &#229; lese mer om dette, bes&#248;k Subversions hjemmeside og les 
          om <quote>bubble up</quote>-metoden i Subversions 
          designdokumenter.)</para>

        <!-- @ENGLISH {{{
        <para>Of course, these internal mechanics of copying and
          sharing data are hidden from the user, who simply sees
          copies of trees.  The main point here is that copies are
          cheap, both in time and space.  Make branches as often as
          you want.</para>
        @ENGLISH }}} -->
        <para>Selvf&#248;lgelig, denne interne mekanikken med kopiering og 
          deling av data er skjult for brukeren, som rett og slett bare 
          ser kopier av tr&#230;r.
          Hovedpoenget her er at kopier er billige, b&#229;de n&#229;r det gjelder 
          tid og plass.
          Lag forgreninger s&#229; ofte som du vil.</para>
      </sidebar>

    </sect2>
    
    <sect2 id="svn-ch-4-sect-2.2">
      <!-- @ENGLISH {{{
      <title>Working with Your Branch</title> 
      @ENGLISH }}} -->
      <title>Arbeide med grenen</title> 

      <!-- @ENGLISH {{{
      <para>Now that you've created a branch of the project, you can
        check out a new working copy to start using it:</para>
      @ENGLISH }}} -->
      <para>N&#229; som du har laget en gren av prosjektet, kan du hente ut 
        en ny arbeidskopi for &#229; starte bruken av den:</para>

<screen>
$ svn checkout http://svn.example.com/repos/calc/branches/my-calc-branch
A  my-calc-branch/Makefile
A  my-calc-branch/integer.c
A  my-calc-branch/button.c
Checked out revision 341.
</screen>

      <!-- @ENGLISH {{{
      <para>There's nothing special about this working copy; it simply
        mirrors a different directory in the repository.  When you
        commit changes, however, Sally won't ever see them when she
        updates.  Her working copy is of
        <filename>/calc/trunk</filename>.  (Be sure to read <xref
        linkend="svn-ch-4-sect-5"/> later in this chapter: the
        <command>svn switch</command> command is an alternate way of
        creating a working copy of a branch.)</para>
      @ENGLISH }}} -->
      <para>Det er ingenting spesielt med denne arbeidskopien; den 
        avspeiler simpelthen bare en annen katalog i depotet.
        Men n&#229;r du legger inn forandringer, vil ikke Sally se noen av 
        dem n&#229;r hun oppdaterer.
        Hennes arbeidskopi er fra <filename>/calc/trunk</filename>.
        (Pass p&#229; &#229; lese <xref linkend="svn-ch-4-sect-5"/> senere i dette 
        kapittelet:
        Kommandoen <command>svn switch</command> er en alternativ m&#229;te &#229; 
        lage en arbeidskopi av en forgrening.)</para>

      <!-- @ENGLISH {{{
      <para>Let's pretend that a week goes by, and the following
        commits happen:</para>
      @ENGLISH }}} -->
      <para>La oss late som om en uke g&#229;r, og de f&#248;lgende innlegginger 
        blir gjort:</para>

      <itemizedlist>
        <!-- @ENGLISH {{{
        <listitem><para>
          You make a change to
          <filename>/calc/branches/my-calc-branch/button.c</filename>,
          which creates revision 342.</para>
        </listitem>
        @ENGLISH }}} -->
        <listitem>
          <para>Du gj&#248;r en forandring i 
            <filename>/calc/branches/my-calc-branch/button.c</filename> 
            som lager revisjon 342.</para>
        </listitem>

        <!-- @ENGLISH {{{
        <listitem><para>
          You make a change to
          <filename>/calc/branches/my-calc-branch/integer.c</filename>,
          which creates revision 343.</para>
        </listitem>
        @ENGLISH }}} -->
        <listitem>
          <para>Du gj&#248;r en forandring i 
            <filename>/calc/branches/my-calc-branch/integer.c</filename> 
            som lager revisjon 343.</para>
        </listitem>

        <!-- @ENGLISH {{{
        <listitem><para>
          Sally makes a change to
          <filename>/calc/trunk/integer.c</filename>, which creates
          revision 344.</para>
        </listitem>
        @ENGLISH }}} -->
        <listitem>
          <para>Sally gj&#248;r en forandring i 
            <filename>/calc/trunk/integer.c</filename> som lager 
            revisjon 344.</para>
        </listitem>
      </itemizedlist>

      <!-- @ENGLISH {{{
      <para>There are now two independent lines of development, shown
        in <xref linkend="svn-ch-4-dia-4"/>, happening on
        <filename>integer.c</filename>.</para>
      @ENGLISH }}} -->
      <para>Det er n&#229; to uavhengige utviklingslinjer, vist i <xref 
        linkend="svn-ch-4-dia-4"/>, som skjer med 
        <filename>integer.c</filename>.</para>

      <figure id="svn-ch-4-dia-4">
        <!-- @ENGLISH {{{
        <title>The branching of one file's history</title>
        @ENGLISH }}} -->
        <title>Forgreningen av en fils historie</title>
        <graphic fileref="images/ch04dia4.png"/>
      </figure>

      <!-- @ENGLISH {{{
      <para>Things get interesting when you look at the history of
        changes made to your copy of
        <filename>integer.c</filename>:</para>
      @ENGLISH }}} -->
      <para>Ting blir interessante n&#229;r du ser p&#229; historien til 
        forandringene gjort i din kopi av 
        <filename>integer.c</filename>:</para>

<!-- &#164; Eksemplene tas seinere -->
<screen>
$ pwd
/home/user/my-calc-branch

$ svn log --verbose integer.c
------------------------------------------------------------------------
r343 | user | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   M /calc/branches/my-calc-branch/integer.c

* integer.c:  frozzled the wazjub.

------------------------------------------------------------------------
r341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   A /calc/branches/my-calc-branch (from /calc/trunk:340)

Creating a private branch of /calc/trunk.

------------------------------------------------------------------------
r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  changed a docstring.

------------------------------------------------------------------------
r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  adding this file to the project.

------------------------------------------------------------------------
</screen>

      <!-- @ENGLISH {{{
      <para>Notice that Subversion is tracing the history of your
        branch's <filename>integer.c</filename> all the way back
        through time, even traversing the point where it was copied.
        It shows the creation of the branch as an event in the
        history, because <filename>integer.c</filename> was implicitly
        copied when all of <filename>/calc/trunk/</filename> was
        copied.  Now look what happens when Sally runs the same
        command on her copy of the file:</para>
      @ENGLISH }}} -->
      <para>Legg merke til at Subversion g&#229;r gjennom historien av 
        forgreningens <filename>integer.c</filename> hele veien tilbake 
        gjennom tiden og krysser til og med punktet den ble kopiert.
        Opprettelsen av forgreningen vises som en hendelse i historien, 
        fordi <filename>integer.c</filename> ble kopiert <!-- &#164; -->i all 
        stillhet n&#229;r alt under <filename>/calc/trunk/</filename> ble 
        kopiert.
        Se n&#229; hva som skjer n&#229;r Sally kj&#248;rer den samme kommandoen p&#229; 
        hennes kopi av filen:</para>

<!-- &#164; -->
<screen>
$ pwd
/home/sally/calc

$ svn log --verbose integer.c
------------------------------------------------------------------------
r344 | sally | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  fix a bunch of spelling errors.

------------------------------------------------------------------------
r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  changed a docstring.

------------------------------------------------------------------------
r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  adding this file to the project.

------------------------------------------------------------------------
</screen>

      <!-- @ENGLISH {{{
      <para>Sally sees her own revision 344 change, but not the change
        you made in revision 343.  As far as Subversion is concerned,
        these two commits affected different files in different
        repository locations.  However, Subversion
        <emphasis>does</emphasis> show that the two files share a
        common history.  Before the branch-copy was made in revision
        341, they used to be the same file.  That's why you and Sally
        both see the changes made in revisions 303 and 98.</para>
      @ENGLISH }}} -->
      <para>Sally ser at hennes egen revisjon 344 forandrer seg, men 
        ikke forandringen som du gjorde i revisjon 343.
        Hva Subversion ang&#229;r, p&#229;virket disse to innleggingene 
        forskjellige filer p&#229; forskjellige plasseringer i depotet.
        Subversion viser imidlertid at de to filene deler en felles 
        historie.
        F&#248;r grenkopieringen ble gjort i revisjon 341 var de den samme 
        filen.
        Det er derfor b&#229;de du og Sally ser forandringene gjort i 
        revisjonene 303 og 98.</para>

    </sect2>

    <sect2 id="svn-ch-4-sect-2.3">
      <!-- @ENGLISH {{{
      <title>The Key Concepts Behind Branches</title> 
      @ENGLISH }}} -->
      <title>N&#248;kkelkonseptet bak forgreninger</title>

      <!-- @ENGLISH {{{
      <para>There are two important lessons that you should remember
        from this section.</para>
      @ENGLISH }}} -->
      <para>Det er to viktige <!-- &#164; -->ting du b&#248;r huske fra denne 
        seksjonen.</para>

      <orderedlist>
        <listitem>
          <!-- @ENGLISH {{{
          <para>Unlike many other version control systems,
            Subversion's branches exist as <emphasis>normal filesystem
            directories</emphasis> in the repository, not in an extra
            dimension.  These directories just happen to carry some
            extra historical information.</para>
          @ENGLISH }}} -->
          <para>Ulikt mange andre versjonskontrollsystemer eksisterer 
            Subversions forgreninger som <emphasis>vanlige 
            filsystemkataloger</emphasis> i depotet, ikke i en ekstra 
            dimensjon.
            Disse katalogene <!-- &#164; just happen -->inneholder bare noe 
            ekstra historisk informasjon.</para>
        </listitem>
        <listitem>
          <!-- @ENGLISH {{{
          <para>Subversion has no internal concept of a
            branch&mdash;only copies.  When you copy a directory, the
            resulting directory is only a <quote>branch</quote>
            because <emphasis>you</emphasis> attach that meaning to
            it.  You may think of the directory differently, or treat
            it differently, but to Subversion it's just an ordinary
            directory that happens to have been created by
            copying.</para>
          @ENGLISH }}} -->
          <para>Subversion har ikke noe internt begrep om en gren &#8212; bare 
            kopier.
            N&#229;r du kopierer en katalog, er den resulterende nye 
            katalogen bare en <quote>gren</quote> fordi 
            <emphasis>du</emphasis> legger denne meningen til den.
            Du kan tenke p&#229; denne katalogen p&#229; en spesiell m&#229;te eller 
            behandle den p&#229; forskjellig m&#229;te, men for Subversion er den 
            bare en vanlig katalog som tilfeldigvis er blitt opprettet 
            ved kopiering.</para>
        </listitem>
      </orderedlist>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 3 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-4-sect-3">
    <!-- @ENGLISH {{{
    <title>Copying Changes Between Branches</title>
    @ENGLISH }}} -->
    <title>Kopiere forandringer mellom forgreninger</title>

    <!-- @ENGLISH {{{
    <para>Now you and Sally are working on parallel branches of the
      project: you're working on a private branch, and Sally is
      working on the <firstterm>trunk</firstterm>, or main line of
      development.</para>
    @ENGLISH }}} -->
    <para>N&#229; arbeider du og Sally p&#229; parallelle grener i prosjektet:
      Du arbeider p&#229; en privat gren, og Sally jobber i 
      <firstterm>trunk</firstterm>, eller hovedlinjen av 
      utviklingen.</para>

    <!-- @ENGLISH {{{
    <para>For projects that have a large number of contributors, it's
      common for most people to have working copies of the trunk.
      Whenever someone needs to make a long-running change that is
      likely to disrupt the trunk, a standard procedure is to create a
      private branch and commit changes there until all the work is
      complete.</para>
    @ENGLISH }}} -->
    <para>For prosjekter som har et stort antall bidragsytere er det 
      vanlig for de fleste personer &#229; ha arbeidskopier av 
      <filename>trunk</filename>.
      N&#229;r noen m&#229; gj&#248;re forandringer som vil ta litt tid og som 
      sannsynligvis kommer til &#229; forstyrre <filename>trunk</filename>, 
      er standard prosedyre &#229; lage en privat gren og legge inn 
      forandringer der til alt arbeidet er fullf&#248;rt.</para>

    <!-- @ENGLISH {{{
    <para>So, the good news is that you and Sally aren't interfering
      with each other.  The bad news is that it's very easy to drift
      <emphasis>too</emphasis> far apart.  Remember that one of the
      problems with the <quote>crawl in a hole</quote> strategy is
      that by the time you're finished with your branch, it may be
      near-impossible to merge your changes back into the trunk
      without a huge number of conflicts.</para>
    @ENGLISH }}} -->
    <para>S&#229;, de gode nyhetene er at du og Sally ikke forstyrrer 
      hverandre.
      De d&#229;rlige nyhetene er at det er veldig lett &#229; drive 
      <emphasis>for</emphasis> langt avg&#229;rde.
      Husk at ett av problemene med <quote>krabbe inn i et 
      hull</quote>-strategien er at n&#229;r du er ferdig med grenen din, vil 
      det bli nesten umulig &#229; flette inn dine forandringer tilbake til 
      <filename>trunk</filename> uten et stort antall konflikter.</para>
    
    <!-- @ENGLISH {{{
    <para>Instead, you and Sally might continue to share changes as
      you work.  It's up to you to decide which changes are worth
      sharing; Subversion gives you the ability to selectively
      <quote>copy</quote> changes between branches.  And when you're
      completely finished with your branch, your entire set of branch
      changes can be copied back into the trunk.</para>
    @ENGLISH }}} -->
    <para>Istedenfor kan du og Sally fortsette med &#229; dele forandringer 
      mens du arbeider.
      Det er opp til deg &#229; bestemme hvilke forandringer som er verdt &#229; 
      dele; Subversion gir deg muligheten til &#229; selektivt 
      <quote>kopiere</quote> forandringer mellom grener.
      Og n&#229;r du er fullstendig ferdig med din gren, kan hele settet med 
      grenforandringer bli kopiert tilbake til 
      <filename>trunk</filename>.</para>
    

    <sect2 id="svn-ch-4-sect-3.1">
      <!-- @ENGLISH {{{
      <title>Copying Specific Changes</title>
      @ENGLISH }}} -->
      <title>Kopiere spesifikke forandringer</title>
      

      <!-- @ENGLISH {{{
      <para>In the previous section, we mentioned that both you and
        Sally made changes to <filename>integer.c</filename> on
        different branches.  If you look at Sally's log message for
        revision 344, you can see that she fixed some spelling errors.
        No doubt, your copy of the same file still has the same spelling
        errors.  It's likely that your future changes to this file will
        be affecting the same areas that have the spelling errors, so
        you're in for some potential conflicts when you merge your
        branch someday.  It's better, then, to receive Sally's change
        now, <emphasis>before</emphasis> you start working too heavily
        in the same places.</para>
      @ENGLISH }}} -->
      <para>I den forrige seksjonen nevnte vi at b&#229;de du og Sally gjorde 
        forandringer til <filename>integer.c</filename> p&#229; forskjellige 
        forgreninger.
        Hvis du ser p&#229; Sallys loggmelding for revisjon 344, kan du se at 
        hun forandret noen stavefeil.
        Din kopi av den samme filen har uten tvil de samme 
        skrivefeilene.
        Det er sannsynlig at dine fremtidige forandringer i denne filen 
        vil p&#229;virke de samme omr&#229;dene som skrivefeilene ligger i, s&#229; du 
        ligger an til &#229; f&#229; potensielle konflikter n&#229;r du en vakker dag 
        fletter inn grenen din.
        Da er det bedre &#229; motta Sallys forandringer n&#229;, 
        <emphasis>f&#248;r</emphasis> du starter med &#229; arbeide mye i det 
        samme omr&#229;det.</para>

      <!-- @ENGLISH {{{
      <para>It's time to use the <command>svn merge</command> command.
        This command, it turns out, is a very close cousin to the
        <command>svn diff</command> command (which you read about in
        Chapter 3).  Both commands are able to compare any two objects
        in the repository and describe the differences.  For example,
        you can ask <command>svn diff</command> to show you the exact
        change made by Sally in revision 344:</para>
      @ENGLISH }}} -->
      <para>Det er p&#229; tide &#229; bruke kommandoen <command>svn 
        merge</command>.
        Det skal vise seg at denne kommandoen er en veldig n&#230;r slektning 
        av <command>svn diff</command>-kommandoen (som du leste om i 
        kapittel 3).
        Begge kommandoene er i stand til &#229; sammenligne to vilk&#229;rlige 
        objekter i depotet og beskrive forskjellene.
        For eksempel kan du sp&#248;rre <command>svn diff</command> om &#229; vise 
        deg den eksakte forandringen gjort av Sally i revisjon 
        344:</para>

<screen>
$ svn diff -r 343:344 http://svn.example.com/repos/calc/trunk

Index: integer.c
===================================================================
--- integer.c	(revision 343)
+++ integer.c	(revision 344)
@@ -147,7 +147,7 @@
     case 6:  sprintf(info->operating_system, "HPFS (OS/2 or NT)"); break;
     case 7:  sprintf(info->operating_system, "Macintosh"); break;
     case 8:  sprintf(info->operating_system, "Z-System"); break;
-    case 9:  sprintf(info->operating_system, "CPM"); break;
+    case 9:  sprintf(info->operating_system, "CP/M"); break;
     case 10:  sprintf(info->operating_system, "TOPS-20"); break;
     case 11:  sprintf(info->operating_system, "NTFS (Windows NT)"); break;
     case 12:  sprintf(info->operating_system, "QDOS"); break;
@@ -164,7 +164,7 @@
     low = (unsigned short) read_byte(gzfile);  /* read LSB */
     high = (unsigned short) read_byte(gzfile); /* read MSB */
     high = high &lt;&lt; 8;  /* interpret MSB correctly */
-    total = low + high; /* add them togethe for correct total */
+    total = low + high; /* add them together for correct total */
 
     info->extra_header = (unsigned char *) my_malloc(total);
     fread(info->extra_header, total, 1, gzfile);
@@ -241,7 +241,7 @@
      Store the offset with ftell() ! */
 
   if ((info->data_offset = ftell(gzfile))== -1) {
-    printf("error: ftell() retturned -1.\n");
+    printf("error: ftell() returned -1.\n");
     exit(1);
   }
 
@@ -249,7 +249,7 @@
   printf("I believe start of compressed data is %u\n", info->data_offset);
   #endif
   
-  /* Set postion eight bytes from the end of the file. */
+  /* Set position eight bytes from the end of the file. */
 
   if (fseek(gzfile, -8, SEEK_END)) {
     printf("error: fseek() returned non-zero\n");
</screen>
      
      <!-- @ENGLISH {{{
      <para>The <command>svn merge</command> is almost exactly the
        same.  Instead of printing the differences to your terminal,
        however, it applies them directly to your working copy as
        <emphasis>local modifications</emphasis>:</para>
      @ENGLISH }}} -->
      <para><command>svn merge</command> gj&#248;r omtrent n&#248;yaktig det 
        samme.
        Istedenfor &#229; skrive forskjellene til terminalen din, blir de 
        lagt direkte til arbeidskopien din som <emphasis>lokale 
        modifikasjoner</emphasis>:</para>
    
<screen>
$ svn merge -r 343:344 http://svn.example.com/repos/calc/trunk
U  integer.c

$ svn status
M  integer.c
</screen>

      <!-- @ENGLISH {{{
      <para>The output of <command>svn merge</command> shows that your
        copy of <filename>integer.c</filename> was patched.  It now
        contains Sally's change&mdash;the change has been
        <quote>copied</quote> from the trunk to your working copy of
        your private branch, and now exists as a local modification.
        At this point, it's up to you to review the local modification
        and make sure it works correctly.</para>
      @ENGLISH }}} -->
      <para>Utdataene fra <command>svn merge</command> viser at din kopi 
        av <filename>integer.c</filename> ble patchet.
        N&#229; inneholder den Sallys forandring &#8212; forandringen er blitt 
        <quote>kopiert</quote> fra <filename>trunk</filename> til din 
        arbeidskopi p&#229; din private gren, og eksisterer n&#229; som en lokal 
        modifisering.
        P&#229; dette punktet er det opp til deg &#229; se over den lokale 
        modifiseringen og forsikre deg om at den fungerer 
        korrekt.</para>

      <!-- @ENGLISH {{{
      <para>In another scenario, it's possible that things may not have
        gone so well, and that <filename>integer.c</filename> may have
        entered a conflicted state.  You might need to resolve the
        conflict using standard procedures (see Chapter 3), or if you
        decide that the merge was a bad idea altogether, simply give up
        and <command>svn revert</command> the local change.</para>
      @ENGLISH }}} -->
      <para>I et annet scenario er det mulig at ting ikke gikk s&#229; bra og 
        at <filename>integer.c</filename> gikk inn i en 
        konflikttilstand.
        Du m&#229; kanskje l&#248;se konflikten ved hjelp av standard prosedyrer 
        (se kapittel 3), eller hvis du finner ut at flettingen egentlig 
        var en d&#229;rlig id&#233;, kan du rett og slett gi opp og kj&#248;re 
        <command>svn revert</command> p&#229; den lokale forandringen.</para>

      <!-- @ENGLISH {{{
      <para>But assuming that you've reviewed the merged change, you can
        <command>svn commit</command> the change as usual.  At that
        point, the change has been merged into your repository branch.
        In version control terminology, this act of copying changes
        between branches is commonly called
        <firstterm>porting</firstterm> changes.</para>
      @ENGLISH }}} -->
      <para>Men hvis vi g&#229;r ut i fra at du har sett over forandringen, 
        kan du bruke <command>svn commit</command> til &#229; legge inn 
        forandringen p&#229; vanlig m&#229;te.
        P&#229; dette tidpunktet er forandringen blitt flettet inn i din 
        depotgren.
        I versjonskontrollterminologi blir denne m&#229;ten &#229; kopiere 
        forandringer mellom forgreninger <!-- &#164; &#171;porting&#187; p&#229; norsk 
        blir&#160;&#8230; ??? Derfor tar jeg med den engelske betegnelsen 
        forel&#248;pig. -->p&#229; engelsk kalt 
        <foreignphrase>porting</foreignphrase>.
        <!-- &#164; Og derfor legger vi til litt. -->Det finnes ikke en 
        standardisert betegnelse for dette p&#229; norsk, s&#229; vi bruker i 
        denne boken uttrykket <quote>flette</quote>.</para>

      <!-- @ENGLISH {{{
      <para>When you commit the local modification, make sure your log
        message mentions that you're porting a specific change from
        one branch to another.  For example:</para>
      @ENGLISH }}} -->
      <para>N&#229;r du legger inn de lokale modifiseringene, b&#248;r du forsikre 
        deg om at loggmeldingen din nevner at du <!-- &#164; -->flyttet en 
        forandring fra en gren til en annen.
        For eksempel:</para>

<!-- &#164; -->
<screen>
$ svn commit -m "integer.c: ported r344 (spelling fixes) from trunk."
Sending        integer.c
Transmitting file data .
Committed revision 360.
</screen>

      <!-- @ENGLISH {{{
      <para>As you'll see in the next sections, this is a very
        important <quote>best practice</quote> to follow.</para>
      @ENGLISH }}} -->
      <para>Som du vil se i de neste seksjonene, er dette en veldig 
        viktig <!-- &#164; --><quote>god praksis</quote> &#229; f&#248;lge.</para>

      <sidebar>
        <!-- @ENGLISH {{{
        <title>Why Not Use Patches Instead?</title>
        @ENGLISH }}} -->
        <title>Hvorfor ikke bruke patcher istedenfor?</title>
        
        <!-- @ENGLISH {{{
        <para>A question may be on your mind, especially if you're a
          Unix user: why bother to use <command>svn merge</command> at
          all?  Why not simply use the operating system's
          <command>patch</command> command to accomplish the same job?
          For example:</para>
        @ENGLISH }}} -->
        <para>Et sp&#248;rsm&#229;l kan lure i bakhodet ditt, spesielt hvis du er 
          en Unixbruker:
          Hvorfor bry seg med &#229; bruke <command>svn merge</command> i det 
          hele tatt?
          Hvorfor ikke rett og slett bruke operativsystemets 
          <command>patch</command>-kommando for &#229; utf&#248;re den samme 
          jobben?
          For eksempel:</para>

<screen>
$ svn diff -r 343:344 http://svn.example.com/repos/calc/trunk &gt; patchfile
$ patch -p0  &lt; patchfile
Patching file integer.c using Plan A...
Hunk #1 succeeded at 147.
Hunk #2 succeeded at 164.
Hunk #3 succeeded at 241.
Hunk #4 succeeded at 249.
done
</screen>

        <!-- @ENGLISH {{{
        <para>In this particular case, yes, there really is no
          difference.  But <command>svn merge</command> has special
          abilities that surpass the <command>patch</command> program.
          The file format used by <command>patch</command> is quite
          limited; it's only able to tweak file contents.  There's no
          way to represent changes to <emphasis>trees</emphasis>, such
          as the addition, removal, or renaming of files and
          directories.  If Sally's change had, say, added a new
          directory, the output of <command>svn diff</command>
          wouldn't have mentioned it at all.  <command>svn
          diff</command> only outputs the limited patch-format, so
          there are some ideas it simply can't express.
          <footnote>
            <para>In the future, the Subversion project plans to use
              (or invent) an expanded patch format that describes
              tree-changes.</para>
          </footnote>
          The <command>svn merge</command> command, however, can express
          tree-changes by directly applying them to your working
          copy.</para>
        @ENGLISH }}} -->
        <para>Ja, i dette spesielle tilfellet er det egentlig ingen 
          forskjell.
          Men <command>svn merge</command> har spesielle evner som 
          overg&#229;r <command>patch</command>-programmet.
          Filformatet brukt av <command>patch</command> er ganske 
          begrenset; det er bare i stand til &#229; forandre innhold av 
          filer.
          Det er ingen m&#229;te &#229; representere forandringer til 
          <emphasis>tr&#230;r</emphasis>, som tillegginger, slettinger eller 
          navneskifter p&#229; filer og kataloger.
          Hvis Sallys forandring hadde, la oss si, lagt til en katalog, 
          ville utdataene fra <command>svn diff</command> ikke nevnt det 
          i det hele tatt.
          <command>svn diff</command> skriver bare ut det begrensede 
          patch-formatet, s&#229; det er noen <!-- &#164; -->forandringer det rett 
          og slett ikke kan vise.<footnote><para>I fremtiden planlegger 
          Subversionprosjektet &#229; bruke (eller finne opp) et utvidet 
          patchformat som beskriver treforandringer.</para></footnote>
          <command>svn merge</command>-kommandoen, derimot, kan uttrykke 
          treforandringer ved &#229; legge dem direkte inn i arbeidskopien 
          din.</para>

      </sidebar>
      
      <!-- @ENGLISH {{{
      <para>A word of warning: while <command>svn diff</command> and
        <command>svn merge</command> are very similar in concept, they
        do have different syntax in many cases.  Be sure to read about
        them in Chapter 9 for details, or ask <command>svn
        help</command>.  For example, <command>svn merge</command>
        requires a working-copy path as a target, i.e. a place where
        it should apply the tree-changes.  If the target isn't
        specified, it assumes you are trying to perform one of the
        following common operations:</para>
      @ENGLISH }}} -->
      <para>En liten advarsel:
        Selv om <command>svn diff</command> og <command>svn 
        merge</command> er veldig like i konsept, har de i mange 
        tilfeller forskjellig syntaks.
        <!-- &#164; Be sure -->Les om dem i kapittel 9 for detaljer, eller 
        sp&#248;r <command>svn help</command>.
        For eksempel krever <command>svn merge</command> en arbeidskopi 
        som et m&#229;l, det vil si en plass hvor den skal legge inn 
        treforandringene.
        Hvis m&#229;let ikke er spesifisert, g&#229;r den ut i fra at du pr&#248;ver &#229; 
        utf&#248;re en av de f&#248;lgende operasjonene:</para>

      <orderedlist>
        <listitem>
          <!-- @ENGLISH {{{
          <para>You want to merge directory changes into your current
            working directory.</para>
          @ENGLISH }}} -->
          <para>Du vil flette katalogforandringer inn i den gjeldende 
            arbeidskatalogen.</para>
        </listitem>
        <listitem>
          <!-- @ENGLISH {{{
          <para>You want to merge the changes in a specific file into
            a file by the same name which exists in your current working 
            directory.</para>
          @ENGLISH }}} -->
          <para>Du vil flette forandringene i en spesifikk fil inn i en 
            fil med det samme navnet som eksisterer i den gjeldende 
            arbeidskatalogen.</para>
        </listitem>
      </orderedlist>

      <!-- @ENGLISH {{{
      <para>If you are merging a directory and haven't specified a
        target path, <command>svn merge</command> assumes the first case
        above and tries to apply the changes into your current
        directory.  If you are merging a file, and that file (or a file
        by the same name) exists in your current working directory,
        <command>svn merge</command> assumes the second case and tries
        to apply the changes to a local file with the same name.</para>
      @ENGLISH }}} -->
      <para>Hvis du fletter en katalog og ikke har spesifisert en 
        m&#229;lsti, g&#229;r <command>svn merge</command> ut i fra det f&#248;rste 
        tilfellet og pr&#248;ver &#229; legge inn forandringene til den gjeldende 
        katalogen.
        Hvis du fletter en fil, og den filen (eller en fil med det samme 
        navnet) eksisterer i den gjeldende katalogen, g&#229;r <command>svn 
        merge</command> ut i fra det andre tilfellet og fors&#248;ker &#229; legge 
        inn forandringene til en lokal fil med det samme navnet.</para>
      
      <!-- @ENGLISH {{{
      <para>If you want changes applied somewhere else, you'll
        need to say so.  For example, if you're sitting in the parent
        directory of your working copy, you'll have to specify the
        target directory to receive the changes:</para>
      @ENGLISH }}} -->
      <para>Hvis du vil legge inn forandringer en annen plass, m&#229; du 
        fortelle dette.
        Hvis du for eksempel sitter i foreldrekatalogen til 
        arbeidskopien din, m&#229; du spesifisere m&#229;lkatalogen som skal motta 
        forandringene:</para>
      
<screen>
$ svn merge -r 343:344 http://svn.example.com/repos/calc/trunk my-calc-branch
U   my-calc-branch/integer.c
</screen>

    </sect2>

    <sect2 id="svn-ch-4-sect-3.2">
      <!-- @ENGLISH {{{
      <title>Best Practices for Merging</title>
      @ENGLISH }}} -->
      <title>Beste praksis for fletting</title>

      <sect3 id="svn-ch-4-sect-3.2.1">
        <!-- @ENGLISH {{{
        <title>Tracking Merges Manually</title>
        @ENGLISH }}} -->
        <title>F&#248;lge flettinger manuelt</title>

        <!-- @ENGLISH {{{
        <para>Merging changes sounds simple enough, but in practice it
          can become a headache.  The problem is that if you
          repeatedly merge changes from one branch to another, you
          might accidentally merge the same change
          <emphasis>twice</emphasis>.  When this happens, sometimes
          things will work fine.  When patching a file, Subversion
          typically notices if the file already has the change, and
          does nothing.  But if the already-existing change has been
          modified in any way, you'll get a conflict.</para>
        @ENGLISH }}} -->
        <para>Fletting av forandringer h&#248;res enkelt ut, men i praksis 
          kan det bli en hodepine.
          Problemet er at hvis du gjentatte ganger fletter forandringer 
          fra en gren til en annen, kan du ved en ulykke flette den 
          samme forandringen <emphasis>to ganger</emphasis>.
          N&#229;r dette skjer, vil det noen ganger g&#229; bra.
          N&#229;r en fil blir patchet vil Subversion vanligvis oppdage at 
          filen inneholder forandringen, og gj&#248;r ingenting.
          Men hvis den allerede eksisterende forandringen er blitt 
          forandret p&#229; en eller annen m&#229;te, vil du f&#229; en 
          konflikt.</para>

        <!-- @ENGLISH {{{
        <para>Ideally, your version control system should prevent the
          double-application of changes to a branch.  It should
          automatically remember which changes a branch has already
          received, and be able to list them for you.  It should use
          this information to help automate merges as much as
          possible.</para>
        @ENGLISH }}} -->
        <para>Ideelt sett b&#248;r versjonskontrollsystemet forhindre <!-- &#164; 
          -->fors&#248;ket p&#229; &#229; legge inn doble forandringer til en gren.
          Det b&#248;r huske automatisk hvilke forandringer en gren allerede 
          har mottatt, og b&#248;r v&#230;re i stand til &#229; liste dem ut for deg.
          Det b&#248;r bruke denne informasjonen til &#229; hjelpe til med &#229; 
          automatisere flettinger s&#229; mye som mulig.</para>

        <!-- @ENGLISH {{{
        <para>Unfortunately, Subversion is not such a system.  Like
          CVS, Subversion 1.0 does not yet record any information
          about merge operations.  When you commit local
          modifications, the repository has no idea whether those
          changes came from running <command>svn merge</command>, or
          from just hand-editing the files.</para>
        @ENGLISH }}} -->
        <para>Dessverre er ikke Subversion et s&#229;nt system.
          I likhet med CVS lagrer ikke Subversion 1.0 noen informasjon 
          om fletteoperasjoner.
          N&#229;r du legger inn lokale forandringer, har ikke depotet noen 
          id&#233; om hvorvidt disse forandringene kom fra en kj&#248;ring av 
          <command>svn merge</command>, eller fra en redigering av 
          filene for h&#229;nd.</para>

        <!-- @ENGLISH {{{
        <para>What does this mean to you, the user?  It means that
          until the day Subversion grows this feature, you'll have to
          track merge information yourself.  The best place to do this
          is in the commit log-message.  As demonstrated in the
          earlier example, it's recommended that your log-message
          mention a specific revision number (or range of revisions)
          that are being merged into your branch.  Later on, you can
          run <command>svn log</command> to review which changes your
          branch already contains.  This will allow you to carefully
          construct a subsequent <command>svn merge</command> command
          that won't be redundant with previously ported
          changes.</para>
        @ENGLISH }}} -->
        <para>Hva betyr dette for deg, brukeren?
          Det betyr at inntil den dagen Subversion f&#229;r denne funksjonen, 
          m&#229; du selv holde rede p&#229; fletteinformasjonen.
          Den beste plassen &#229; gj&#248;re dette er i selve loggmeldingen.
          Som demonstrert i det tidligere eksempelet, er det anbefalt at 
          loggmeldingen din nevner et spesifikt revisjonsnummer (eller 
          omr&#229;de av revisjoner) som blir flettet inn i grenen.
          Senere kan du kj&#248;re <command>svn log</command> for &#229; se over 
          hvilke forandringer forgreningen allerede inneholder.
          Dette vil la deg varsomt konstruere en etterf&#248;lgende 
          <command>svn merge</command>-kommando som ikke vil bli <!-- &#164; 
          -->overfl&#248;dig i forhold til tidligere <!-- &#164; -->flettede 
          forandringer.</para>

        <!-- @ENGLISH {{{
        <para>In the next section, we'll show some examples of this
          technique in action.</para>
        @ENGLISH }}} -->
        <para>I den neste seksjonen vil vi vise noen eksempler p&#229; denne 
          teknikken i praksis.</para>

      </sect3>
      
      <sect3 id="svn-ch-4-sect-3.2.2">
        <!-- @ENGLISH {{{
        <title>Previewing Merges</title>
        @ENGLISH }}} -->
        <title>Forh&#229;ndsvise flettinger</title>
        
        <!-- @ENGLISH {{{
        <para>Because merging only results in local modifications,
          it's not usually a high-risk operation.  If you get the
          merge wrong the first time, simply <command>svn
          revert</command> the changes and try again.</para>
        @ENGLISH }}} -->
        <para>Fordi fletting bare resulterer i lokale modifikasjoner, er 
          det vanligvis ikke noen h&#248;yrisikooperasjon.
          Hvis flettingen g&#229;r galt f&#248;rste gangen, bare kj&#248;r <command>svn 
          revert</command> p&#229; forandringene og pr&#248;v igjen.</para>
        
        <!-- @ENGLISH {{{
        <para>It's possible, however, that your working copy might
          already have local modifications.  The changes applied by a
          merge will be mixed with your pre-existing ones, and running
          <command>svn revert</command> is no longer an option.  The
          two sets of changes may be impossible to separate.</para>
        @ENGLISH }}} -->
        <para>Men det er derimot mulig at arbeidskopien din allerede 
          inneholder lokale forandringer.
          Forandringene lagt inn av en fletting vil bli blandet med de 
          du har fra f&#248;r, og det &#229; kj&#248;re <command>svn revert</command> 
          er ikke lenger et alternativ.
          De to settene med forandringer kan bli umulig &#229; 
          separere.</para>

        <!-- @ENGLISH {{{
        <para>In cases like this, people take comfort in being able to
          predict or examine merges before they happen.  One simple
          way to do that is to run <command>svn diff</command> with
          the same arguments you plan to pass to <command>svn
          merge</command>, as we already showed in our first example
          of merging.  Another method of previewing is to pass the
          <option>-&#64738;-dry-run</option> option to the merge
          command:</para>
        @ENGLISH }}} -->
        <para>I tilfeller som dette vil det v&#230;re greit &#229; kunne forutsi 
          eller unders&#248;ke forandringer f&#248;r de skjer.
          En enkel m&#229;te &#229; gj&#248;re det p&#229; er &#229; kj&#248;re <command>svn 
          diff</command> med de samme argumentene som du planlegger &#229; gi 
          til <command>svn merge</command>, som vi allerede har vist i 
          det f&#248;rste eksemplet v&#229;rt med fletting.
          En annen metode for forh&#229;ndsvisning er &#229; angi 
          <option>--dry-run</option>-valget til flettekommandoen:</para>

        <!-- @ENGLISH {{{
        <screen>
$ svn merge -&#64738;-dry-run -r 343:344 http://svn.example.com/repos/calc/trunk
U  integer.c

$ svn status
#  nothing printed, working copy is still unchanged.
</screen>
        @ENGLISH }}} -->
        <screen>
$ svn merge --dry-run -r 343:344 http://svn.example.com/repos/calc/trunk
U  integer.c

$ svn status
# ingenting blir skrevet ut, arbeidskopien er fortsatt uforandret.
</screen>

        <!-- @ENGLISH {{{
        <para>The <option>-&#64738;-dry-run</option> option doesn't actually
          apply any local changes to the working copy.  It only shows
          status codes that <emphasis>would</emphasis> be printed in a
          real merge.  It's useful for getting a <quote>high
          level</quote> preview of the potential merge, for those
          times when running <command>svn diff</command> gives too
          much detail.</para>
        @ENGLISH }}} -->
        <para><option>--dry-run</option>-valget gj&#248;r egentlig ingen 
          forandringer til arbeidskopien.
          Den viser bare statuskoder som <emphasis>ville</emphasis> 
          blitt skrevet ut under en virkelig fletting.
          Det er nyttig for &#229; f&#229; en <quote>h&#248;yniv&#229;</quote>-oversikt over 
          den potensielle flettingen, for de gangene der kj&#248;ring av 
          <command>svn diff</command> gir alt for mange detaljer.</para>

      </sect3>

      <sidebar>
        <!-- @ENGLISH {{{
        <title>Subversion and Changesets</title>
        @ENGLISH }}} -->
        <title>Subversion og forandringssett 
        (<foreignphrase>changesets</foreignphrase>)</title>

        <!-- @ENGLISH {{{
        <para>Everyone seems to have a slightly different definition
          of <quote>changeset</quote>, or a least a different
          expectation of what it means for a version control system to
          have <quote>changeset features</quote>.  For our purpose,
          let's say that a changeset is just a collection of changes
          with a unique name.  The changes might include textual edits
          to file contents, modifications to tree structure, or tweaks
          to metadata.  In more common speak, a changeset is just a
          patch with a name you can refer to.</para>
        @ENGLISH }}} -->
        <para>Alle ser ut til &#229; ha litt forskjellige definisjoner av 
          <quote>forandringssett</quote>, eller i det minste 
          forskjellige forventninger av hva det betyr for et 
          versjonskontrollsystem &#229; ha 
          <quote>forandringssettfunksjonalitet</quote>.
          For v&#229;rt bruk, la oss si at et forandringssett bare er en 
          samling av forandringer med et unikt navn.
          Forandringene kan inkludere tekstmessige redigeringer til 
          filinnhold, forandringer i en trestruktur, eller forandringer 
          i metadata.
          Sagt p&#229; en mer vanlig m&#229;te, et forandringssett er bare en 
          patch med et navn du kan referere til.</para>

        <!-- @ENGLISH {{{
        <para>In Subversion, a global revision number N names a tree
          in the repository: it's the way the repository looked after
          the Nth commit.  It's also the name of an implicit
          changeset: if you compare tree N with tree N-1, you can
          derive the exact patch that was committed.  For this reason,
          it's easy to think of <quote>revision N</quote> as not just
          a tree, but a changeset as well.  If you use an issue
          tracker to manage bugs, you can use the revision numbers to
          refer to particular patches that fix bugs&mdash;for example,
          <quote>this issue was fixed by revision 9238.</quote>.
          Somebody can then run <command>svn log -r9238</command> to
          read about the exact changeset which fixed the bug, and run
          <command>svn diff -r9237:9238</command> to see the patch
          itself.  And Subversion's merge command also uses revision
          numbers.  You can merge specific changesets from one branch
          to another by naming them in the merge arguments:
          <command>svn merge -r9237:9238</command> would merge
          changeset #9238 into your working copy.</para>
        @ENGLISH }}} -->
        <para>I Subversion gir et globalt revisjonsnummer N navn til et 
          tre i depotet:
          Det er m&#229;ten depotet s&#229; ut etter den Nte innleggingen.
          Det er ogs&#229; navnet for et implisitt forandringssett:
          Hvis du sammenligner treet N med treet N-1, kan du derivere 
          den eksakte patchen som ble lagt inn.
          P&#229; grunn av dette er det lett &#229; tenke p&#229; <quote>revisjon 
          N</quote> som ikke bare et tre, men ogs&#229; et forandringssett.
          Hvis du bruker en feildatabase &#8212; <!-- &#164; 
          --><foreignphrase>issue tracker</foreignphrase> &#8212; for &#229; holde 
          rede p&#229; programfeil, kan du bruke revisjonsnumre til &#229; 
          referere til spesielle patcher som fikser feil &#8212; for eksempel, 
          <quote>denne feilen ble fikset i revisjon 9238.</quote>.
          Noen kan da kj&#248;re <command>svn log -r9238</command> for &#229; lese 
          om det eksakte forandringssettet som ordnet feilen, og kj&#248;re 
          <command>svn diff -r9237:9238</command> for &#229; se selve 
          patchen.
          Og Subversions flettekommando bruker ogs&#229; revisjonsnumre.
          Du kan flette spesifikke forandringssett fra en gren til en 
          annen ved &#229; gi dem navn i fletteargumentene:
          <command>svn merge -r9237:9238</command> vil flette 
          forandringssett #9238 inn i arbeidskopien din.</para>
      </sidebar>
      
      <sect3 id="svn-ch-4-sect-3.2.3">
        <!-- @ENGLISH {{{
        <title>Noticing or Ignoring Ancestry</title>
        @ENGLISH }}} -->
        <title>Legge merke til eller ignorere slektskap</title>

        <!-- @ENGLISH {{{
        <para>When conversing with a Subversion developer, you might
          very likely hear reference to the term
          <firstterm>ancestry</firstterm>.  This word is used to
          describe the relationship between two objects in a
          repository: if they're related to each other, than one
          object is said to be an ancestor of the other.</para>
        @ENGLISH }}} -->
        <para>N&#229;r du snakker med en Subversionutvikler kan det hende du 
          h&#248;rer referanser til begrepet <firstterm>slektskap</firstterm> 
          &#8212; <foreignphrase>ancestry</foreignphrase>.
          Dette ordet blir brukt til &#229; beskrive forholdet mellom to 
          objekter i et depot:
          Hvis de er relaterte til hverandre, vil det ene objektet v&#230;re 
          en stamfar til det andre.</para>

        <!-- @ENGLISH {{{
        <para>For example, suppose you commit revision 100, which
          includes a change to a file <filename>foo.c</filename>.
          Then <filename>foo.c@99</filename> is an
          <quote>ancestor</quote> of <filename>foo.c@100</filename>.
          On the other hand, suppose you commit the deletion of
          <filename>foo.c</filename> in revision 101, and then add a
          new file by the same name in revision 102.  In this case,
          <filename>foo.c@99</filename> and
          <filename>foo.c@102</filename> may appear to be related
          (they have the same path), but in fact are completely
          different objects in the repository.  They share no history
          or <quote>ancestry</quote>.</para>
        @ENGLISH }}} -->
        <para>For eksempel, tenk deg at du legger inn revisjon 100, som 
          inkluderer en forandring i en fil kalt 
          <filename>foo.c</filename>.
          Da er <filename>foo.c@99</filename> en <quote>stamfar</quote> 
          til <filename>foo.c@100</filename>.
          P&#229; den annen side, tenk at du legger inn en sletting av 
          <filename>foo.c</filename> i revisjon 101, og deretter legger 
          til en ny fil med det samme navnet i revisjon 102.
          I dette tilfellet kan det se ut som om 
          <filename>foo.c@99</filename> og 
          <filename>foo.c@102</filename> er relaterte (de har den samme 
          filstien), men de er faktisk totalt forskjellige objekter i 
          depotet.
          De deler ingen historie eller <quote>slektskap</quote>.</para>

        <!-- @ENGLISH {{{
        <para>The reason for bringing this up is to point out an
          important difference between <command>svn diff</command> and
          <command>svn merge</command>.  The former command ignores
          ancestry, while the latter command is quite sensitive to it.
          For example, if you asked <command>svn diff</command> to
          compare revisions 99 and 102 of <filename>foo.c</filename>,
          you would see line-based diffs; the diff command is blindly
          comparing two paths.  But if you asked <command>svn
          merge</command> to compare the same two objects, it would
          notice that they're unrelated and first attempt to delete
          the old file, then add the new file;  you would see a
          <literal>D  foo.c</literal> followed by a <literal>A
          foo.c</literal>.</para>
        @ENGLISH }}} -->
        <para>Grunnen til at vi tar dette opp er for &#229; fremheve en 
          viktig forskjell mellom <command>svn diff</command> og 
          <command>svn merge</command>.
          Den f&#248;rste kommandoen ignorerer slektskap, mens den sistnevnte 
          kommandoen er ganske f&#248;lsom for det.
          Hvis du for eksempel ber <command>svn diff</command> om &#229; 
          sammenligne revisjon 99 og 102 av <filename>foo.c</filename>, 
          vil du se linjebaserte forskjeller; diffkommandoen 
          sammenligner blindt to stier.
          Men hvis du ber <command>svn merge</command> om &#229; sammenligne 
          de samme to objektene, vil den oppdage at de er urelaterte og 
          fors&#248;ker f&#248;rst &#229; slette den gamle filen og deretter legge til 
          den nye filen; du vil se en <literal>D&#160;&#160;foo.c</literal> fulgt 
          av en <literal>A&#160;&#160;foo.c</literal>.</para>

        <!-- @ENGLISH {{{
        <para>Most merges involve comparing trees that are ancestrally
          related to one another, and therefore <command>svn
          merge</command> defaults to this behavior.  Occasionally,
          however, you may want the merge command to compare two
          unrelated trees.  For example, you may have imported two
          source-code trees representing different vendor releases of
          a software project (see <xref linkend="svn-ch-7-sect-4"/>).
          If you asked <command>svn merge</command> to compare the two
          trees, you'd see the entire first tree being deleted,
          followed by an add of the entire second tree!</para>
        @ENGLISH }}} -->
        <para>De fleste flettinger involverer sammenligning av tr&#230;r som 
          er slektsmessig relatert til hverandre, og derfor har 
          <command>svn merge</command> denne oppf&#248;rselen som standard.
          Men n&#229; og da vil du kanskje bruke flettekommandoen til &#229; 
          sammenligne to urelaterte tr&#230;r.
          For eksempel har du kanskje to kildekodetr&#230;r som representerer 
          forskjellige <!-- &#164; vendor --> utgivelser av et 
          programprosjekt (se <xref linkend="svn-ch-7-sect-4"/>).
          Hvis du ber <command>svn merge</command> om &#229; sammenligne de 
          to tr&#230;rne, vil du se at hele det f&#248;rste treet blir slettet, 
          fulgt av en tillegging av hele det andre treet!</para>

        <!-- @ENGLISH {{{
        <para>In these situations, you'll want <command>svn
          merge</command> to do a path-based comparison only, ignoring
          any relations between files and directories.  Add the
          <option>-&#64738;-ignore-ancestry</option> option to your merge
          command, and it will behave just like <command>svn
          diff</command>.  (And conversely, the
          <option>-&#64738;-notice-ancestry</option> option will cause
          <command>svn diff</command> to behave like the merge
          command.)</para>
        @ENGLISH }}} -->
        <para>I disse situasjonene vil du at <command>svn 
          merge</command> bare gj&#248;r en stibasert sammenligning og 
          ignorerer enhver relasjon mellom filer og kataloger.
          Legg til valget <option>--ignore-ancestry</option> til 
          flettekommandoen, og den vil oppf&#248;re seg akkurat som 
          <command>svn diff</command>.
          (Og p&#229; motsatt m&#229;te vil 
          <option>--notice-ancestry</option>-valget f&#229; <command>svn 
          diff</command> til &#229; oppf&#248;re seg som 
          <command>merge</command>-kommandoen.</para>

      </sect3>

    </sect2>


  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 4 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-4-sect-4">
    <title>Common Use-Cases for Merging</title>

    <para>There are many different uses for <command>svn
      merge</command>, and this section describes the most common ones
      you're likely to run into.</para>

    <sect2 id="svn-ch-4-sect-4.1">
      <title>Merging a Whole Branch to Another</title>

      <para>To complete our running example, we'll move forward in
        time.  Suppose several days have passed, and many changes have
        happened on both the trunk and your private branch.  Suppose
        that you've finished working on your private branch; the
        feature or bug fix is finally complete, and now you want to
        merge all of your branch changes back into the trunk for
        others to enjoy.</para>

      <para>So how do we use <command>svn merge</command> in this
        scenario?  Remember that this command compares two trees, and
        applies the differences to a working copy.  So to receive the
        changes, you need to have a working copy of the trunk.  We'll
        assume that either you still have your original one lying
        around (fully updated), or that you recently checked out a
        fresh working copy of <filename>/calc/trunk</filename>.</para>

      <para>But which two trees should be compared?  At first glance,
        the answer may seem obvious: just compare the latest trunk
        tree with your latest branch tree.  But beware&mdash;this
        assumption is <emphasis>wrong</emphasis>, and has burned many
        a new user!  Since <command>svn merge</command> operates like
        <command>svn diff</command>, comparing the latest trunk and 
        branch trees will <emphasis>not</emphasis> merely describe
        the set of changes you made to your branch.  Such a comparison
        shows too many changes: it would not only show the addition of
        your branch changes, but also the <emphasis>removal</emphasis>
        of trunk changes that never happened on your branch.</para>

      <para>To express only the changes that happened on your branch,
        you need to compare the initial state of your branch to its
        final state.  Using <command>svn log</command> on your branch,
        you can see that your branch was created in revision 341.  And
        the final state of your branch is simply a matter of using the
        <literal>HEAD</literal> revision.  That means you want to
        compare revisions 341 and <literal>HEAD</literal> of your
        branch directory, and apply those differences to a working
        copy of the trunk.</para>

      <tip>
        <para>A nice way of finding the revision in which a branch was
          created (the <quote>base</quote> of the branch) is to use the
          <option>--stop-on-copy</option> option to <command>svn
          log</command>.  The log subcommand will normally show every
          change ever made to the branch, including tracing back
          through the copy which created the branch.  So normally,
          you'll see history from the trunk as well.  The
          <option>--stop-on-copy</option> will halt log output as soon
          as <command>svn log</command> detects that its target was
          copied or renamed.</para>

        <para>So in our continuing example,</para>

<screen>
$ svn log --verbose --stop-on-copy \
          http://svn.example.com/repos/calc/branches/my-calc-branch
&hellip;
------------------------------------------------------------------------
r341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   A /calc/branches/my-calc-branch (from /calc/trunk:340)

$
</screen>
        
        <para>As expected, the final revision printed by this command
          is the revision in which <filename>my-calc-branch</filename>
          was created by copying.</para>
      </tip>


      <para>Here's the final merging procedure, then:</para>

<screen>
$ cd calc/trunk
$ svn update
At revision 405.

$ svn merge -r 341:HEAD http://svn.example.com/repos/calc/branches/my-calc-branch
U   integer.c
U   button.c
U   Makefile

$ svn status
M   integer.c
M   button.c
M   Makefile

# ...examine the diffs, compile, test, etc...

$ svn commit -m "Merged my-calc-branch changes r341:405 into the trunk."
Sending        integer.c
Sending        button.c
Sending        Makefile
Transmitting file data ...
Committed revision 406.
</screen>

      <para>Again, notice that the commit log message very
        specifically mentions the range of changes that was merged
        into the trunk.  Always remember to do this, because it's
        critical information you'll need later on.</para>

      <para>For example, suppose you decide to keep working on your
        branch for another week, in order to complete an enhancement
        to your original feature or bug fix.  The repository's
        <literal>HEAD</literal> revision is now 480, and you're ready
        to do another merge from your private branch to the trunk.
        But as discussed in <xref linkend="svn-ch-4-sect-3.2"/>, you
        don't want to merge the changes you've already merged before;
        you only want to merge everything <quote>new</quote> on your
        branch since the last time you merged.  The trick is to figure
        out what's new.</para>

      <para>The first step is to run <command>svn log</command> on the
        trunk, and look for a log message about the last time you
        merged from the branch:</para>

      <screen>
$ cd calc/trunk
$ svn log
&hellip;
------------------------------------------------------------------------
r406 | user | 2004-02-08 11:17:26 -0600 (Sun, 08 Feb 2004) | 1 line

Merged my-calc-branch changes r341:405 into the trunk.
------------------------------------------------------------------------
&hellip;
</screen>
      
      <para>Aha!  Since all branch-changes that happened between
        revisions 341 and 405 were previously merged to the trunk as
        revision 406, you now know that you want to merge only the
        branch changes after that&mdash;by comparing revisions 406 and
        <literal>HEAD</literal>.</para>

<screen>
$ cd calc/trunk
$ svn update
At revision 480.

# We notice that HEAD is currently 480, so we use it to do the merge:

$ svn merge -r 406:480 http://svn.example.com/repos/calc/branches/my-calc-branch
U   integer.c
U   button.c
U   Makefile

$ svn commit -m "Merged my-calc-branch changes r406:480 into the trunk."
Sending        integer.c
Sending        button.c
Sending        Makefile
Transmitting file data ...
Committed revision 481.
</screen>

      <para>Now the trunk contains the complete second wave of changes
        made to the branch.  At this point, you can either delete your
        branch (we'll discuss this later on), or continue working on
        your branch and repeat this procedure for subsequent
        merges.</para>

    </sect2>

    <sect2 id="svn-ch-4-sect-4.2">
      <title>Undoing Changes</title>

      <para>Another common use for <command>svn merge</command> is to
        roll back a change that has already been committed.  Suppose
        you're working away happily on a working copy of
        <filename>/calc/trunk</filename>, and you discover that the
        change made way back in revision 303, which changed
        <filename>integer.c</filename>, is completely wrong.  It never
        should have been committed.  You can use <command>svn
        merge</command> to <quote>undo</quote> the change in your
        working copy, and then commit the local modification to the
        repository.  All you need to do is to specify a
        <emphasis>reverse</emphasis> difference:</para>


<screen>
$ svn merge -r 303:302 http://svn.example.com/repos/calc/trunk
U  integer.c

$ svn status
M  integer.c

$ svn diff
&hellip;
# verify that the change is removed
&hellip;

$ svn commit -m "Undoing change committed in r303."
Sending        integer.c
Transmitting file data .
Committed revision 350.
</screen>

      <para>One way to think about a repository revision is as a
        specific group of changes (some version control systems call
        these <firstterm>changesets</firstterm>).  By using the
        <option>-r</option> switch, you can ask <command>svn
        merge</command> to apply a changeset, or whole range of
        changesets, to your working copy.  In our case of undoing a
        change, we're asking <command>svn merge</command> to apply
        changeset #303 to our working copy
        <emphasis>backwards</emphasis>.</para>
    
      <para>Keep in mind that rolling back a change like this is just
        like any other <command>svn merge</command> operation, so you
        should use <command>svn status</command> and <command>svn
        diff</command> to confirm that your work is in the state you
        want it to be in, and then use <command>svn commit</command>
        to send the final version to the repository.  After
        committing, this particular changeset is no longer reflected
        in the <literal>HEAD</literal> revision.</para>

      <para>Again, you may be thinking: well, that really didn't undo
        the commit, did it?  The change still exists in revision 303.
        If somebody checks out a version of the
        <filename>calc</filename> project between revisions 303 and
        349, they'll still see the bad change, right?</para>

      <para>Yes, that's true.  When we talk about
        <quote>removing</quote> a change, we're really talking about
        removing it from <literal>HEAD</literal>.  The original change
        still exists in the repository's history.  For most
        situations, this is good enough.  Most people are only
        interested in tracking the <literal>HEAD</literal> of a
        project anyway.  There are special cases, however, where you
        really might want to destroy all evidence of the commit.
        (Perhaps somebody accidentally committed a confidential
        document.)  This isn't so easy, it turns out, because
        Subversion was deliberately designed to never lose
        information.  Revisions are immutable trees which build upon
        one another.  Removing a revision from history would cause a
        domino effect, creating chaos in all subsequent revisions and
        possibly invalidating all working copies.
        <footnote>
          <para>The Subversion project has plans, however, to someday
            implement an <command>svnadmin obliterate</command>
            command that would accomplish the task of permanently
            deleting information.  In the meantime, see <xref
            linkend="svn-ch-5-sect-3.1.3"/> for a possible
            workaround.</para>
        </footnote>
      </para>

    </sect2>

    <sect2 id="svn-ch-4-sect-4.3">
      <title>Resurrecting Deleted Items</title>

      <para>The great thing about version control systems is that
        information is never lost.  Even when you delete a file or
        directory, it may be gone from the <literal>HEAD</literal>
        revision, but the object still exists in earlier revisions.
        One of the most common questions new users ask is, <quote>How
        do I get my old file or directory back?</quote></para>

      <para>The first step is to define exactly <emphasis
        role="bold">which</emphasis> item you're trying to resurrect.
        Here's a useful metaphor: you can think of every object in the
        repository as existing in a sort of two-dimensional coordinate
        system.  The first coordinate is a particular revision tree,
        and the second coordinate is a path within that tree.  So
        every version of your file or directory can be defined by a
        specific coordinate pair.</para>

      <para>Subversion has no <filename>Attic</filename> directory
        like CVS does,
        <footnote>
          <para>Because CVS doesn't version trees, it creates an
            <filename>Attic</filename> area within each repository
            directory as a way of remembering deleted files.</para>
        </footnote>
        so you need to use <command>svn
        log</command> to discover the exact coordinate pair you wish
        to resurrect.  A good strategy is to run <command>svn log
        --verbose</command> in a directory which used to contain your
        deleted item.  The <option>--verbose</option> option shows a
        list of all changed items in each revision; all you need to do
        is find the revision in which you deleted the file or
        directory.  You can do this visually, or by using another tool
        to examine the log output (via <command>grep</command>, or
        perhaps via an incremental search in an editor.)</para>

      <screen>
$ cd parent-dir
$ svn log --verbose
&hellip;
------------------------------------------------------------------------
r808 | joe | 2003-12-26 14:29:40 -0600 (Fri, 26 Dec 2003) | 3 lines
Changed paths:
   D /calc/trunk/real.c
   M /calc/trunk/integer.c

Added fast fourier transform functions to integer.c.
Removed real.c because code now in double.c.
&hellip;
</screen>

      <para>In the example, we're assuming that you're looking for a
        deleted file <filename>real.c</filename>.  By looking through
        the logs of a parent directory, you've spotted that this file
        was deleted in revision 808.  Therefore, the last version of
        the file to exist was in the revision right before that.
        Conclusion: you want to resurrect the path
        <filename>/calc/trunk/real.c</filename> from revision
        807.</para>

      <para>That was the hard part&mdash;the research.  Now that you
        know what you want to restore, you have two different
        choices.</para>
      
      <para>One option is to use <command>svn merge</command> to apply
        revision 808 <quote>in reverse</quote>.  (We've already
        discussed how to undo changes, see <xref
        linkend="svn-ch-4-sect-4.2"/>.)  This would have the effect of
        re-adding <filename>real.c</filename> as a local modification.
        The file would be scheduled for addition, and after a commit,
        the file would again exist in <literal>HEAD</literal>.</para>

      <para>In this particular example, however, this is probably not
        the best strategy.  Reverse-applying revision 808 would not
        only schedule <filename>real.c</filename> for addition, but
        the log message indicates that it would also undo certain
        changes to <filename>integer.c</filename>, which you don't
        want.  Certainly, you could reverse-merge revision 808 and
        then <command>svn revert</command> the local modifications to
        <filename>integer.c</filename>, but this technique doesn't
        scale well.  What if there were 90 files changed in revision
        808?</para>

      <para>A second, more targeted strategy is not to use
        <command>svn merge</command> at all, but rather the
        <command>svn copy</command> command.  Simply copy the exact
        revision and path <quote>coordinate pair</quote> from the
        repository to your working copy:</para>

      <screen>
$ svn copy --revision 807 \
           http://svn.example.com/repos/calc/trunk/real.c ./real.c

$ svn status
A  +   real.c

$ svn commit -m "Resurrected real.c from revision 807, /calc/trunk/real.c."
Adding         real.c
Transmitting file data .
Committed revision 1390.
</screen>

      <para>The plus sign in the status output indicates that the item
        isn't merely scheduled for addition, but scheduled for
        addition <quote>with history.</quote> Subversion remembers
        where it was copied from.  In the future, running <command>svn
        log</command> on this file will traverse back through the
        file's resurrection and through all the history it had prior
        to revision 807.  In other words, this new
        <filename>real.c</filename> isn't really new; it's a direct
        descendant of the original, deleted file.</para>

      <para>Although our example shows us resurrecting a file, note
        that these same techniques work just as well for resurrecting
        deleted directories.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 5 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-4-sect-5">
    <title>Switching a Working Copy</title>

    <para>The <command>svn switch</command> command transforms an
      existing working copy into a different branch.  While this
      command isn't strictly necessary for working with branches, it
      provides a nice shortcut to users.  In our earlier example,
      after creating your private branch, you checked out a fresh
      working copy of the new repository directory.  Instead, you can
      simply ask Subversion to change your working copy of
      <filename>/calc/trunk</filename> to mirror the new branch
      location:</para>

<screen>
$ cd calc

$ svn info | grep URL
URL: http://svn.example.com/repos/calc/trunk

$ svn switch http://svn.example.com/repos/calc/branches/my-calc-branch
U   integer.c
U   button.c
U   Makefile
Updated to revision 341.

$ svn info | grep URL
URL: http://svn.example.com/repos/calc/branches/my-calc-branch
</screen>

    <para>After <quote>switching</quote> to the branch, your working
      copy is no different than what you would get from doing a fresh
      checkout of the directory.  And it's usually more efficient to
      use this command, because often branches only differ by a small
      degree.  The server sends only the minimal set of changes
      necessary to make your working copy reflect the branch
      directory.</para>

    <para>The <command>svn switch</command> command also takes a
      <option>--revision</option> (<option>-r</option>) option, so you
      need not always move your working copy to the <quote>tip</quote>
      of the branch.</para>

    <para>Of course, most projects are more complicated than our
      <filename>calc</filename> example, containing multiple
      subdirectories.  Subversion users often follow a specific
      algorithm when using branches:</para>

      <orderedlist>
        <listitem>
          <para>Copy the project's entire 'trunk' to a new branch
            directory.</para>
        </listitem>
        <listitem>
          <para>Switch only <emphasis>part</emphasis> of the trunk
            working copy to mirror the branch.</para>
        </listitem>
      </orderedlist>
    
    <para>In other words, if a user knows that the branch-work only
      needs to happen on a specific subdirectory, they use
      <command>svn switch</command> to move only that subdirectory to
      the branch.  (Or sometimes users will switch just a single
      working file to the branch!)  That way, they can continue to
      receive normal 'trunk' updates to most of their working copy,
      but the switched portions will remain immune (unless someone
      commits a change to their branch).  This feature adds a whole
      new dimension to the concept of a <quote>mixed working
      copy</quote>&mdash;not only can working copies contain a mixture
      of working revisions, but a mixture of repository locations as
      well.</para>
    
    <para>If your working copy contains a number of switched subtrees
      from different repository locations, it continues to function as
      normal.  When you update, you'll receive patches to each subtree
      as appropriate.  When you commit, your local changes will still
      be applied as a single, atomic change to the repository.</para>

    <para>Note that while it's okay for your working copy to reflect a
      mixture of repository locations, these locations must all be
      within the <emphasis>same</emphasis> repository.  Subversion
      repositories aren't yet able to communicate with one another;
      that's a feature planned beyond Subversion
      1.0.<footnote><para>You <emphasis>can</emphasis>, however, use
      <command>svn switch</command> with the
      <option>--relocate</option> switch if the URL of your server
      changes and you don't want to abandon an existing working copy.
      See the <command>svn switch</command> section in <xref
      linkend="svn-ch-9"/> for more information and an example.</para>
      </footnote></para>
    
    <sidebar>
      <title>Switches and Updates</title>
      
      <para>Have you noticed that the output of <command>svn
        switch</command> and <command>svn update</command> look the
        same?  The switch command is actually a superset of the
        update command.</para>

      <para>When you run <command>svn update</command>, you're asking
        the repository to compare two trees.  The repository does so,
        and then sends a description of the differences back to the
        client. The only difference between <command>svn
        switch</command> and <command>svn update</command> is that the
        update command always compares two identical paths.</para>
      
      <para>That is, if your working copy is a mirror of
        <filename>/calc/trunk</filename>, then <command>svn
        update</command> will automatically compare your working copy
        of <filename>/calc/trunk</filename> to
        <filename>/calc/trunk</filename> in the
        <literal>HEAD</literal> revision.  If you're switching your
        working copy to a branch, then <command>svn switch</command>
        will compare your working copy of
        <filename>/calc/trunk</filename> to some
        <emphasis>other</emphasis> branch-directory in the
        <literal>HEAD</literal> revision.</para>

      <para>In other words, an update moves your working copy through
        time.  A switch moves your working copy through time
        <emphasis>and</emphasis> space.</para>
    </sidebar>

    <para>Because <command>svn switch</command> is essentially a
      variant of <command>svn update</command>, it shares the same
      behaviors; any local modifications in your working copy are
      preserved when new data arrives from the repository.  This
      allows you to perform all sorts of clever tricks.</para>

    <para>For example, suppose you have a working copy of
      <filename>/calc/trunk</filename> and make a number of changes to
      it.  Then you suddenly realize that you meant to make the
      changes to a branch instead.  No problem!  When you <command>svn
      switch</command> your working copy to the branch, the local
      changes will remain.  You can then test and commit them to the
      branch.</para>

  </sect1>


  <!-- ================================================================= -->
  <!-- ======================== SECTION 6 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-4-sect-6">
    <title>Tags</title>

    <para>Another common version control concept is a
      <firstterm>tag</firstterm>.  A tag is just a
      <quote>snapshot</quote> of a project in time.  In Subversion,
      this idea already seems to be everywhere.  Each repository
      revision is exactly that&mdash;a snapshot of the filesystem
      after each commit.</para>

    <para>However, people often want to give more human-friendly names
      to tags, like <literal>release-1.0</literal>.  And they want to
      make snapshots of smaller subdirectories of the filesystem.
      After all, it's not so easy to remember that release-1.0 of a
      piece of software is a particular subdirectory of revision
      4822.</para>

    <sect2 id="svn-ch-4-sect-6.1">
      <title>Creating a Simple Tag</title>

      <para>Once again, <command>svn copy</command> comes to the
        rescue.  If you want to create a snapshot of
        <filename>/calc/trunk</filename> exactly as it looks in the
        <literal>HEAD</literal> revision, then make a copy of it:</para>

<screen>
$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/tags/release-1.0 \
      -m "Tagging the 1.0 release of the 'calc' project."

Committed revision 351.
</screen>

      <para>This example assumes that a
        <filename>/calc/tags</filename> directory already exists.  (If it
        doesn't, see <xref linkend="svn-ch-9-sect-1.2-re-mkdir"/>).
        After the copy completes, the new
        <filename>release-1.0</filename> directory is forever a
        snapshot of how the project looked in the
        <literal>HEAD</literal> revision at the time you made the
        copy.  Of course you might want to be more precise about
        exactly which revision you copy, in case somebody else may
        have committed changes to the project when you weren't
        looking.  So if you know that revision 350 of
        <filename>/calc/trunk</filename> is exactly the snapshot you
        want, you can specify it by passing <option>-r 350</option> to
        the <command>svn copy</command> command.</para>

      <para>But wait a moment: isn't this tag-creation procedure the
        same procedure we used to create a branch?  Yes, in fact, it
        is.  In Subversion, there's no difference between a tag and a
        branch.  Both are just ordinary directories that are created
        by copying.  Just as with branches, the only reason a copied
        directory is a <quote>tag</quote> is because
        <emphasis>humans</emphasis> have decided to treat it that way:
        as long as nobody ever commits to the directory, it forever
        remains a snapshot.  If people start committing to it, it
        becomes a branch.</para>

      <para>If you are administering a repository, there are two
        approaches you can take to managing tags.  The first approach
        is <quote>hands off</quote>: as a matter of project policy,
        decide where your tags will live, and make sure all users know
        how to treat the directories they copy in there.  (That is,
        make sure they know not to commit to them.)  The second
        approach is more paranoid: you can use one of the
        access-control scripts provided with Subversion to prevent
        anyone from doing anything but creating new copies in the
        tags-area (See <xref linkend="svn-ch-6"/>.)  The paranoid
        approach, however, isn't usually necessary.  If a user
        accidentally commits a change to a tag-directory, you can
        simply undo the change as discussed in the previous section.
        This is version control, after all.</para>

    </sect2>
    
    <sect2 id="svn-ch-4-sect-6.2">
      <title>Creating a Complex Tag</title>
      
      <para>Sometimes you may want your <quote>snapshot</quote> to be
        more complicated than a single directory at a single
        revision.</para>
      
      <para>For example, pretend your project is much larger than our
        <filename>calc</filename> example: suppose it contains a
        number of subdirectories and many more files.  In the course
        of your work, you may decide that you need to create a working
        copy that is designed to have specific features and bug fixes.
        You can accomplish this by selectively backdating files or
        directories to particular revisions (using <command>svn update
        -r</command> liberally), or by switching files and directories
        to particular branches (making use of <command>svn
        switch</command>).  When you're done, your working copy is a
        hodgepodge of repository locations from different revisions.
        But after testing, you know it's the precise combination of
        data you need.</para>

      <para>Time to make a snapshot.  Copying one URL to another won't
        work here. In this case, you want to make a snapshot of your
        exact working copy arrangement and store it in the repository.
        Luckily, <command>svn copy</command> actually has four
        different uses (which you can read about in Chapter 9),
        including the ability to copy a working-copy tree to the
        repository:</para>

<screen>
$ ls
my-working-copy/

$ svn copy my-working-copy http://svn.example.com/repos/calc/tags/mytag

Committed revision 352.
</screen>

      <para>Now there is a new directory in the repository,
        <filename>/calc/tags/mytag</filename>, which is an exact
        snapshot of your working copy&mdash;mixed revisions, URLs,
        and all.</para>

      <para>Other users have found interesting uses for this feature.
        Sometimes there are situations where you have a bunch of local
        changes made to your working copy, and you'd like a
        collaborator to see them.  Instead of running <command>svn
        diff</command> and sending a patch file (which won't capture
        tree changes), you can instead use <command>svn copy</command>
        to <quote>upload</quote> your working copy to a private area
        of the repository.  Your collaborator can then either checkout
        a verbatim copy of your working copy, or use <command>svn
        merge</command> to receive your exact changes.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECTION 7 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-4-sect-7">
    <title>Branch Maintenance</title>

    <para>You may have noticed by now that Subversion is extremely
      flexible.  Because it implements branches and tags with the same
      underlying mechanism (directory copies), and because branches
      and tags appear in normal filesystem space, many people find
      Subversion intimidating.  It's almost <emphasis>too</emphasis>
      flexible.  In this section, we'll offer some suggestions for
      arranging and managing your data over time.</para>

    <sect2 id="svn-ch-4-sect-7.1">
      <title>Repository Layout</title>
      
      <para>There are some standard, recommended ways to organize a
        repository.  Most people create a <filename>trunk</filename>
        directory to hold the <quote>main line</quote> of development,
        a <filename>branches</filename> directory to contain branch
        copies, and a <filename>tags</filename> directory to contain
        tag copies.  If a repository holds only one project, then
        often people create these top-level directories:</para>

<screen>
/trunk
/branches
/tags
</screen>

      <para>If a repository contains multiple projects, admins
        typically index their layout by project (see <xref
        linkend="svn-ch-5-sect-6.1"/> to read more about
        <quote>project roots</quote>):</para>

<screen>
/paint/trunk
/paint/branches
/paint/tags
/calc/trunk
/calc/branches
/calc/tags
</screen>

      <para>Of course, you're free to ignore these common layouts.
        You can create any sort of variation, whatever works best for
        you or your team.  Remember that whatever you choose, it's not
        a permanent commitment.  You can reorganize your repository at
        any time.  Because branches and tags are ordinary directories,
        the <command>svn move</command> command can move or rename
        them however you wish.  Switching from one layout to another
        is just a matter of issuing a series of server-side moves; if
        you don't like the way things are organized in the repository,
        just juggle the directories around.</para>

      <para>Remember, though, that while moving directories may be
        easy to do, you need to be considerate of your users as well.
        Your juggling can be disorienting to users with existing
        working copies.  If a user has a working copy of a particular
        repository directory, your <command>svn move</command>
        operation might remove the path from the latest revision.
        When the user next runs <command>svn update</command>, they'll
        be told that their working copy represents a path that no
        longer exists, and the user will be forced to <command>svn
        switch</command> to the new location.
        </para>
      
    </sect2>
    
    <sect2 id="svn-ch-4-sect-7.2">
      <title>Data Lifetimes</title>

      <para>Another nice feature of Subversion's model is that
        branches and tags can have finite lifetimes, just like any
        other versioned item.  For example, suppose you eventually
        finish all your work on your personal branch of the
        <filename>calc</filename> project.  After merging all of your
        changes back into <filename>/calc/trunk</filename>, there's
        no need for your private branch directory to stick around
        anymore:</para>

<screen>
$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch \
             -m "Removing obsolete branch of calc project."

Committed revision 375.
</screen>

      <para>And now your branch is gone.  Of course it's not really
        gone: the directory is simply missing from the
        <literal>HEAD</literal> revision, no longer distracting
        anyone.  If you use <command>svn checkout</command>,
        <command>svn switch</command>, or <command>svn list</command>
        to examine an earlier revision, you'll still be able to see
        your old branch.</para>

      <para>If browsing your deleted directory isn't enough, you can
        always bring it back.  Resurrecting data is very easy in
        Subversion.  If there's a deleted directory (or file) that
        you'd like to bring back into <literal>HEAD</literal>, simply
        use <command>svn copy -r</command> to copy it from the old
        revision:</para>

<screen>
$ svn copy -r 374 http://svn.example.com/repos/calc/branches/my-calc-branch \
                  http://svn.example.com/repos/calc/branches/my-calc-branch

Committed revision 376.
</screen>

      <para>In our example, your personal branch had a relatively
        short lifetime: you may have created it to fix a bug or
        implement a new feature.  When your task is done, so is the
        branch.  In software development, though, it's also common to
        have two <quote>main</quote> branches running side-by-side for
        very long periods.  For example, suppose it's time to release
        a stable <filename>calc</filename> project to the public, and
        you know it's going to take a couple of months to shake bugs
        out of the software.  You don't want people to add new
        features to the project, but you don't want to tell all
        developers to stop programming either.  So instead, you create
        a <quote>stable</quote> branch of the software that won't
        change much:</para>

<screen>
$ svn copy http://svn.example.com/repos/calc/trunk \
         http://svn.example.com/repos/calc/branches/stable-1.0 \
         -m "Creating stable branch of calc project."

Committed revision 377.
</screen>

      <para>And now developers are free to continue adding
        cutting-edge (or experimental) features to
        <filename>/calc/trunk</filename>, and you can declare a
        project policy that only bug fixes are to be committed to
        <filename>/calc/branches/stable-1.0</filename>.  That is, as
        people continue to work on the trunk, a human selectively
        ports bug fixes over to the stable branch.  Even after the
        stable branch has shipped, you'll probably continue to
        maintain the branch for a long time&mdash;that is, as long
        as you continue to support that release for customers.</para>

    </sect2>

  </sect1>


  <!-- ================================================================= -->
  <!-- ======================== SECTION 8 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-4-sect-8">
    <title>Summary</title>

    <para>We've covered a lot of ground in this chapter.  We've
      discussed the concepts of tags and branches, and demonstrated
      how Subversion implements these concepts by copying directories
      with the <command>svn copy</command> command.  We've shown how
      to use <command>svn merge</command> to copy changes from one
      branch to another, or roll back bad changes.  We've gone over
      the use of <command>svn switch</command> to create
      mixed-location working copies.  And we've talked about how one
      might manage the organization and lifetimes of branches in a
      repository.</para>

    <para>Remember the Subversion mantra: branches and tags are cheap.
      So use them liberally!</para>

  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
vim: set ft=svnbook :
-->


